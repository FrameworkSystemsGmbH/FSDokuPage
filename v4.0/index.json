{
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.FlavorType.TextHtml.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.FlavorType.TextHtml.html",
    "title": "Field TextHtml",
    "keywords": "Field TextHtml Stellt Text im HTML-Format dar. Namespace : FrameworkSystems.FrameworkBase.DragAndDrop Assembly : FrameworkSystems.FrameworkBase.dll Syntax public const string TextHtml = \"text/html\" Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.FlavorType.TextRtf.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.FlavorType.TextRtf.html",
    "title": "Field TextRtf",
    "keywords": "Field TextRtf Stellt Text im RTF-Format dar. Namespace : FrameworkSystems.FrameworkBase.DragAndDrop Assembly : FrameworkSystems.FrameworkBase.dll Syntax public const string TextRtf = \"text/rtf\" Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.FlavorType.TextUriList.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.FlavorType.TextUriList.html",
    "title": "Field TextUriList",
    "keywords": "Field TextUriList Stellt eine Liste von URIs (Uniform Resource Identifier) (unter anderem als Text) dar. Namespace : FrameworkSystems.FrameworkBase.DragAndDrop Assembly : FrameworkSystems.FrameworkBase.dll Syntax public const string TextUriList = \"text/uri-list\" Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.FlavorType.TextPlain.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.FlavorType.TextPlain.html",
    "title": "Field TextPlain",
    "keywords": "Field TextPlain Stellt unformatierten Text dar. Namespace : FrameworkSystems.FrameworkBase.DragAndDrop Assembly : FrameworkSystems.FrameworkBase.dll Syntax public const string TextPlain = \"text/plain\" Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.FlavorType.IsTextFlavor.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.FlavorType.IsTextFlavor.html",
    "title": "Method IsTextFlavor",
    "keywords": "Method IsTextFlavor IsTextFlavor(String) Gibt zurück, ob das übergebene Format ein Textformat ist. Declaration public static bool IsTextFlavor(string flavorType) Parameters Type Name Description System.String flavorType Returns Type Description System.Boolean"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.FlavorType.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.FlavorType.html",
    "title": "Class FlavorType",
    "keywords": "Class FlavorType Wenn bei einem Drag&Drop-Vorgang Daten von außerhalb der Applikation in die Applikation hinein gezogen werden, so wird in den Events OnCanDrop und OnDrop ( Drag&Drop Events) ein TransferObject vom Typ ExternalTransferObject ( ExternalTransferObject ) zur Verfügung gestellt. An diesem externen Transferobjekt können alle Datenformate und die dazugehörigen Daten abgerufen werden. Inheritance System.Object FlavorType Namespace : FrameworkSystems.FrameworkBase.DragAndDrop Assembly : FrameworkSystems.FrameworkBase.dll Syntax public static class FlavorType Remarks Diese Klasse stellt primär Konstanten für alle von Framework Studio bekannten Datenformate zur Verfügung. Die Konstanten sind vom Typ String. So kann das externe Transferobjekt grundsätzlich auch unbekannte Datenformate unterstützen. Fields FileList Stellt Dateien dar. Image Stellt ein Bild dar. TextHtml Stellt Text im HTML-Format dar. TextPlain Stellt unformatierten Text dar. TextRtf Stellt Text im RTF-Format dar. TextUriList Stellt eine Liste von URIs (Uniform Resource Identifier) (unter anderem als Text) dar. TextXml Stellt Text im XML-Format dar. Methods IsTextFlavor(String) Gibt zurück, ob das übergebene Format ein Textformat ist."
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.FileListFlavorData.Count.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.FileListFlavorData.Count.html",
    "title": "Property Count",
    "keywords": "Property Count Count Gibt die Anzahl der enthaltenen Dateien zurück. Declaration public int Count { get; } Property Value Type Description System.Int32"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.FileListFlavorData.GetEnumerator.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.FileListFlavorData.GetEnumerator.html",
    "title": "Method GetEnumerator",
    "keywords": "Method GetEnumerator GetEnumerator() Gibt einen Enumerator zum Iterieren durch die enthaltenen Dateien zurück. Declaration public IEnumerator<FileFlavorData> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < FileFlavorData > Examples FileListFlavorData oFileListFlavorData = oExternalTransferObject.GetFileListFlavorData(); foreach (FileFlavorData oFileFlavorData in oFileListFlavorData) { String sFileName = oFileFlavorData.Name; // ... }"
  },
  "api/FrameworkSystems.FrameworkBase.FrameworkProgress.Canceled.html": {
    "href": "api/FrameworkSystems.FrameworkBase.FrameworkProgress.Canceled.html",
    "title": "Property Canceled",
    "keywords": "Property Canceled Canceled Wird auf true gesetzt, nachdem der Benutzer am Client den Cancel-Button betätigt hat. Sie kann nicht zurückgesetzt werden. Vorraussetzung ist, dass die Eigenschaft CanCancel auf true gesetzt wird. Declaration public bool Canceled { get; } Property Value Type Description System.Boolean"
  },
  "api/FrameworkSystems.FrameworkBase.FrameworkProgress.Text.html": {
    "href": "api/FrameworkSystems.FrameworkBase.FrameworkProgress.Text.html",
    "title": "Property Text",
    "keywords": "Property Text Text Der Text, der über dem ProgressBar angezeigt werden soll. Declaration public string Text { get; set; } Property Value Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkBase.FrameworkProgress.DetailText.html": {
    "href": "api/FrameworkSystems.FrameworkBase.FrameworkProgress.DetailText.html",
    "title": "Property DetailText",
    "keywords": "Property DetailText DetailText Der Text, der unter dem ProgressBar angezeigt werden soll. Declaration public string DetailText { get; set; } Property Value Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkBase.FrameworkProgress.MaxValue.html": {
    "href": "api/FrameworkSystems.FrameworkBase.FrameworkProgress.MaxValue.html",
    "title": "Property MaxValue",
    "keywords": "Property MaxValue MaxValue Der Maximalwert des Fortschrittsbalken. Declaration public long MaxValue { get; set; } Property Value Type Description System.Int64"
  },
  "api/FrameworkSystems.FrameworkBase.FrameworkProgress.Value.html": {
    "href": "api/FrameworkSystems.FrameworkBase.FrameworkProgress.Value.html",
    "title": "Property Value",
    "keywords": "Property Value Value Der aktuelle Wert des Fortschrittsbalken. Hierfür muss gelten 0 ≤ Value ≤ MaxValue . Declaration public long Value { get; set; } Property Value Type Description System.Int64"
  },
  "api/FrameworkSystems.FrameworkBase.FrameworkProgress.Dispose.html": {
    "href": "api/FrameworkSystems.FrameworkBase.FrameworkProgress.Dispose.html",
    "title": "Method Dispose",
    "keywords": "Method Dispose Dispose() FrameworkProgress implementiert IDisposable. Nach dem Dispose verschwindet der ProgressBar auf dem Client. Declaration public void Dispose()"
  },
  "api/FrameworkSystems.FrameworkBase.FrameworkProgress.html": {
    "href": "api/FrameworkSystems.FrameworkBase.FrameworkProgress.html",
    "title": "Class FrameworkProgress",
    "keywords": "Class FrameworkProgress Mit Hilfe eines FrameworkProgress Objektes kann der Client über einen längeren Vorgang auf dem Server informiert werden. Dabei erscheint ein Fortschrittsbalken (engl. progress bar). Die Aktualisierung dessen erfolgt nicht in Echtzeit, da der Client diesbezüglich in kurzen, zeitlichen Abständen Anfragen an den Server schickt. Inheritance System.Object FrameworkProgress Namespace : FrameworkSystems.FrameworkBase Assembly : FrameworkSystems.FrameworkBase.dll Syntax public class FrameworkProgress : IDisposable Remarks Es können auch mehrere FrameworkProgress Objekte zeitgleich verwendet werden. Die angezeigten Balken werden untereinander angeordnet. Examples using(FrameworkProgress progress = new FrameworkProgress(this.Global)) { // gibt an, ob der Cancel-Button überhaupt angezeigt werden soll progress.CanCancel = true; // sonstige Eigenschaften progress.Text = \"Fortschritt ...\"; progress.MaxValue = 1000; for(int i = 0; i <= progress.MaxValue; i++) { // breche ab, falls progress.Canceled = true if(progress.Canceled) { break; } progress.Value = i; progress.DetailText = \"i hat den Wert \" + i; // Aktion ... } } Anzeige auf dem Client: Constructors FrameworkProgress(IGlobalObjects) Der Konstruktor nimmt das Objekt this.Global ( IGlobalObjects ) entgegen, wodurch die aktuelle Client-Session zugeordnet werden kann. Properties CanCancel Wenn diese Eigenschaft true ist, wird im Client ein Button zum Abbrechen des Vorgangs angezeigt. Betätigt der Nutzer diesen Button, so ist die Eigenschaft Canceled auf true . Canceled Wird auf true gesetzt, nachdem der Benutzer am Client den Cancel-Button betätigt hat. Sie kann nicht zurückgesetzt werden. Vorraussetzung ist, dass die Eigenschaft CanCancel auf true gesetzt wird. DetailText Der Text, der unter dem ProgressBar angezeigt werden soll. Id Ein Global Unique Identifier, mit dem das FrameworkProgress Objekt eindeutig identifiziert werden kann. MaxValue Der Maximalwert des Fortschrittsbalken. Text Der Text, der über dem ProgressBar angezeigt werden soll. Value Der aktuelle Wert des Fortschrittsbalken. Hierfür muss gelten 0 ≤ Value ≤ MaxValue . Methods Dispose() FrameworkProgress implementiert IDisposable. Nach dem Dispose verschwindet der ProgressBar auf dem Client."
  },
  "api/FrameworkSystems.FrameworkExceptions.RowVersionInvalidException.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.RowVersionInvalidException.html",
    "title": "Class RowVersionInvalidException",
    "keywords": "Class RowVersionInvalidException Die Component prüft beim Save automatisch, ob der Datensatz auf der Datenbank zwischenzeitlich von einer anderen Instanz geändert wurde – sprich, ob sich der Wert in der Spalte FSROWVERSION geändert hat. Wenn das der Fall ist, dann wird eine diese Exception geworfen. Inheritance System.Object System.Exception FrameworkSystems.FrameworkExceptions.FrameworkException RowVersionInvalidException Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax [Serializable] public class RowVersionInvalidException : FrameworkException, ISerializable, _Exception Constructors RowVersionInvalidException(String) RowVersionInvalidException(String, Exception)"
  },
  "api/FrameworkSystems.FrameworkBase.BrowserCommand.BROKER_TAG.html": {
    "href": "api/FrameworkSystems.FrameworkBase.BrowserCommand.BROKER_TAG.html",
    "title": "Field BROKER_TAG",
    "keywords": "Field BROKER_TAG Der Broker-Tag ist ein Platzhalter für den absoluten Pfad des Broker-Verzeichnisses. Namespace : FrameworkSystems.FrameworkBase Assembly : FrameworkSystems.FrameworkBase.dll Syntax public const string BROKER_TAG = \"fsbroker://\" Returns Type Description System.String Remarks Ressourcen mit fsbroker://RelativerPfad werden von dem Browser ausgewertet und durch den absoluten Pfad ersetzt."
  },
  "api/FrameworkSystems.FrameworkBase.BrowserCommand.CreateCommand.html": {
    "href": "api/FrameworkSystems.FrameworkBase.BrowserCommand.CreateCommand.html",
    "title": "Method CreateCommand",
    "keywords": "Method CreateCommand CreateCommand(String, IDictionary<String, String>) Mit der Methode CreateCommand können Link-Kommandos mit der Notation fscommand:[Kommando]?[Key]=[Value]&[Key1]=[Value1]&…[KeyN]=[ValueN] erstellt werden. Declaration public static string CreateCommand(string commandName, IDictionary<string, string> args = null) Parameters Type Name Description System.String commandName System.Collections.Generic.IDictionary < System.String , System.String > args Returns Type Description System.String Remarks Link-Kommandos beginnen mit dem Schlüsselwort fscommand und verfügen über ein Kommando ( commandName ) und über eine beliebige Anzahl von Argumenten ( args ). Die Argumente bestehen immer aus einem Schlüssel ( Key ) und einem Wert ( Value ) und können entweder als generische Auflistung vom Typ IDictionary oder einzeln als KeyValuePairs an die Funktion übergeben werden. Das Schlüsselwort, Kommando und die Argumente werden in Url Schreibweise miteinander verbunden, codiert und als string zurückgegeben. Die Verwendung von GenerateCommand könnte folgendermaßen aussehen: //Command-Args erstellen Dictionary<string, string> linkCommandArgs = new Dictionary<string, string>(); linkCommandArgs.Add(\"Key1\", \"1235\"); linkCommandArgs.Add(\"Key2\", \"Test\"); linkCommandArgs.Add(\"Key3\", \"Test 1234\"); // Link-Kommand erstellen string linkCommand = BrowserCommand.CreateCommand(\"TestCommand\", linkCommandArgs); // Html-Link erzeugen und mit Content-Datsource vom Browser anzeigen lassen this.contentDatasource = \"<a href=\\\"\" + linkCommand + \">Link</a>\"; CreateCommand(String, KeyValuePair<String, String>[]) Mit der Methode CreateCommand können Link-Kommandos mit der Notation fscommand:[Kommando]?[Key]=[Value]&[Key1]=[Value1]&…[KeyN]=[ValueN] erstellt werden. Declaration public static string CreateCommand(string commandName, params KeyValuePair<string, string>[] args) Parameters Type Name Description System.String commandName System.Collections.Generic.KeyValuePair < System.String , System.String >[] args Returns Type Description System.String Remarks Link-Kommandos beginnen mit dem Schlüsselwort fscommand und verfügen über ein Kommando ( commandName ) und über eine beliebige Anzahl von Argumenten ( args ). Die Argumente bestehen immer aus einem Schlüssel ( Key ) und einem Wert ( Value ) und können entweder als generische Auflistung vom Typ IDictionary oder einzeln als KeyValuePairs an die Funktion übergeben werden. Das Schlüsselwort, Kommando und die Argumente werden in Url Schreibweise miteinander verbunden, codiert und als string zurückgegeben. Die einzelnen Argumente können mit der Methode CreateArgument(String, Object) erzeugt werden, um die Konvertierung verschiedener Typen korrekt vorzunehmen. Die Verwendung von GenerateCommand könnte folgendermaßen aussehen: // Link-Kommand erstellen string linkCommand = BrowserCommand.CreateCommand(\"TestCommand\", new KeyValuePair<string, string>(\"Key1\", \"Wert1\"), BrowserCommand.CreateArgument(\"Belegnummer\", new FSlong(1005342)), BrowserCommand.CreateArgument(\"Belegart\", \"ABC\"), BrowserCommand.CreateArgument(\"Datum\", FSDateTime.Today)); // Html-Link erzeugen und mit Content-Datsource vom Browser anzeigen lassen this.contentDatasource = \"<a href=\\\"\" + linkCommand + \">Link</a>\";"
  },
  "api/FrameworkSystems.FrameworkBase.BrowserCommand.CreateArgument.html": {
    "href": "api/FrameworkSystems.FrameworkBase.BrowserCommand.CreateArgument.html",
    "title": "Method CreateArgument",
    "keywords": "Method CreateArgument CreateArgument(String, Object) Mit der Methode CreateArgument() können Event-Argumente für CreateCommand() einzeln erstellt werden. Declaration public static KeyValuePair<string, string> CreateArgument(string key, object value) Parameters Type Name Description System.String key System.Object value Returns Type Description System.Collections.Generic.KeyValuePair < System.String , System.String > Remarks So können z.B. die FS-Datentypen wie in dem nachfolgenden Beispiel als Wert übergeben werden: string linkCommand = BrowserCommand.CreateCommand(\"TestCommand\", BrowserCommand.CreateArgument(\"Belegnummer\", new FSlong(1005342)), BrowserCommand.CreateArgument(\"Belegart\", \"ABC\"), BrowserCommand.CreateArgument(\"Datum\", FSDateTime.Today)); Die FrameworkOnLinkClickEventArgs bieten Methoden GetArgument -Methoden (z.B. GetArgumentFSlong ) um mit dem richtigen Schlüssel einen Wert im entsprechenden FSTyp wieder auszulesen. Auslesen der Argumente im Browser-Event OnLinkClick : if (e.IsCommand && e.Command == \"TestCommand\") { FSlong lngDocumentID = e.GetArgumentFSlong(\"Belegnummer\"); FSstring sDocumentType = e.GetArgumentFSstring(\"Belegart\"); FSDateTime dtDate = e.GetArgumentFSDateTime(\"Datum\"); }"
  },
  "api/FrameworkSystems.FrameworkBase.BrowserCommand.TryParseCommand.html": {
    "href": "api/FrameworkSystems.FrameworkBase.BrowserCommand.TryParseCommand.html",
    "title": "Method TryParseCommand",
    "keywords": "Method TryParseCommand TryParseCommand(String, out String, out Dictionary<String, String>) Die Methode TryParseCommand ist das Gegenstück zu CreateCommand(String, IDictionary<String, String>) und extrahiert, falls es sich bei dem übergebenen Link ( url ) um ein Link-Kommando handelt, das Kommando ( commandName ) und die Argumente ( args ). Andernfalls wird false zurückgegeben. Declaration public static bool TryParseCommand(string url, out string commandName, out Dictionary<string, string> args) Parameters Type Name Description System.String url System.String commandName System.Collections.Generic.Dictionary < System.String , System.String > args Returns Type Description System.Boolean"
  },
  "api/FrameworkSystems.FrameworkBase.BrowserCommand.CreateRessourcesUrl.html": {
    "href": "api/FrameworkSystems.FrameworkBase.BrowserCommand.CreateRessourcesUrl.html",
    "title": "Method CreateRessourcesUrl",
    "keywords": "Method CreateRessourcesUrl CreateRessourcesUrl(String) Mit dieser Methode kann eine Broker-Url erstellt werden, die vom Browser in einen absoluten Pfad umgewandelt wird. Declaration public static string CreateRessourcesUrl(string relativePath) Parameters Type Name Description System.String relativePath Returns Type Description System.String Remarks Diese Url kann dann, wie im nachfolgendem Beispiel, in Verbindung mit HTML z.B. als Link zu einer Datei verwendet warden: // Link zu einer CSS-Datei sStyle = \"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"\" + BrowserCommand.CreateRessourcesUrl(\"test.css\") + \"\\\" />\";"
  },
  "api/FrameworkSystems.FrameworkBase.BrowserCommand.html": {
    "href": "api/FrameworkSystems.FrameworkBase.BrowserCommand.html",
    "title": "Class BrowserCommand",
    "keywords": "Class BrowserCommand Bei einem Link, der im Browser-Control angeklickt wird, können Link-Kommandos mit Parametern hinterlegt werden, die vom Broker ausgewertet werden. Diese Klasse stellt Konstanten und Methoden bereit, um solche Link-Kommandos zu erstellen und auszuwerten. Inheritance System.Object BrowserCommand Namespace : FrameworkSystems.FrameworkBase Assembly : FrameworkSystems.FrameworkBase.dll Syntax public class BrowserCommand Fields BROKER_TAG Der Broker-Tag ist ein Platzhalter für den absoluten Pfad des Broker-Verzeichnisses. Methods CreateArgument(String, Object) Mit der Methode CreateArgument() können Event-Argumente für CreateCommand() einzeln erstellt werden. CreateCommand(String, IDictionary<String, String>) Mit der Methode CreateCommand können Link-Kommandos mit der Notation fscommand:[Kommando]?[Key]=[Value]&[Key1]=[Value1]&…[KeyN]=[ValueN] erstellt werden. CreateCommand(String, KeyValuePair<String, String>[]) Mit der Methode CreateCommand können Link-Kommandos mit der Notation fscommand:[Kommando]?[Key]=[Value]&[Key1]=[Value1]&…[KeyN]=[ValueN] erstellt werden. CreateRessourcesUrl(String) Mit dieser Methode kann eine Broker-Url erstellt werden, die vom Browser in einen absoluten Pfad umgewandelt wird. TryParseCommand(String, out String, out Dictionary<String, String>) Die Methode TryParseCommand ist das Gegenstück zu CreateCommand(String, IDictionary<String, String>) und extrahiert, falls es sich bei dem übergebenen Link ( url ) um ein Link-Kommando handelt, das Kommando ( commandName ) und die Argumente ( args ). Andernfalls wird false zurückgegeben."
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.PackageInfo.ID.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.PackageInfo.ID.html",
    "title": "Field ID",
    "keywords": "Field ID Die eindeutige ID des Packages. Namespace : FrameworkSystems.FrameworkBase.AccessControl Assembly : FrameworkSystems.FrameworkBase.dll Syntax public readonly guid ID Returns Type Description FrameworkSystems.FrameworkDataProvider.BaseObjects.guid"
  },
  "api/FrameworkSystems.FrameworkBase.GlobalObj.IGlobalObjects.EndSafeInitialize.html": {
    "href": "api/FrameworkSystems.FrameworkBase.GlobalObj.IGlobalObjects.EndSafeInitialize.html",
    "title": "Method EndSafeInitialize",
    "keywords": "Method EndSafeInitialize EndSafeInitialize() Deaktiviert den SafeInitializing Modus. Declaration void EndSafeInitialize()"
  },
  "api/FrameworkSystems.FrameworkBase.GlobalObj.IGlobalObjects.html": {
    "href": "api/FrameworkSystems.FrameworkBase.GlobalObj.IGlobalObjects.html",
    "title": "Interface IGlobalObjects",
    "keywords": "Interface IGlobalObjects Das GlobalObject ist von überall auf mit this.Global zu erreichen. Am GlobalObject werden alle Session-Daten verwaltet und Session-Funktionen angeboten. Namespace : FrameworkSystems.FrameworkBase.GlobalObj Assembly : FrameworkSystems.FrameworkBase.dll Syntax [ComVisible(false)] public interface IGlobalObjects : IFrameworkDBPerformanceCounter Properties AUHelper Gibt ein Objekt vom Typ AUHelper zurück. Dieses Objekt bietet Methoden für den Bereich Benutzer- und Rechte-Verwaltung an. LanguageHierarchy Gibt einen Enumeratur zurück, der die Sprach-Hierarchie beinhaltet, oder legt diesen fest. SafeInitializing Gibt zurück, ob der Safe-Initialize-Modus aktiv ist. Dieser Modus wird mithilfe einer Einstellung im Start-Workflow aktiviert. SelectedLanguage Gibt den 2-Zeichen IsoCode der ersten Sprache in der LanguageHierarchy zurück oder legt diesen fest. Methods CloseApplication() Schließt die Anwendung. Der Benutzer wird gefragt, ob er die Anwendung beenden möchte. An den geöffneten Forms wird die Methode IsApplicationQuitAllowed aufgerufen und eine entsprechende Message-Box ausgegeben bzw. das Schließen der Anwendung verhindert. CloseApplication(FrameworkCloseMode) Wird als closeMode das Flag Restart angegeben, so wird ein Neustart des Clients veranlasst. Allerdings darf ein Neustart nur unter der Bedingung ausgeführt werden, dass jedes aktuell laufende Ereignis eines der folgenden ist: MenuItem.OnClick Button.OnClick ImageButton.OnClick MessageBox-Event(Als Folge eine der oben genannten Events) Mit aktuell laufenden Ereignissen sind auch solche Ereignisse gemeint, die als Folge einen modalen Dialog geöffnet haben.Solange der Dialog offen ist, zählt das Ereignis zu den laufenden. Zusätzlich gibt es das Flag KeepUserLogin . Wird Restart mit diesem Flag kombiniert (bitweise Oder-Verknüpfung), so wird beim Neustart der User Token in die neue Sitzung übernommen und es ist kein erneuter Login erforderlich. CloseApplication(String) Schließt die Anwendung unmittelbar. Es wird keine weitere Prüfung durchgeführt und der Benutzer hat keine Möglichkeit die Aktion abzubrechen. Am Client wird dabei die übergebene Message ausgegeben. CreateComponent(String) Erzeugt eine neue Component mit dem übergebenen Namen. EndSafeInitialize() Deaktiviert den SafeInitializing Modus. GetCodeDirectory() Liefert den Pfad des Verzeichnisses, in dem die Anwendung läuft."
  },
  "api/FrameworkSystems.FrameworkBase.AUPermissionType.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AUPermissionType.html",
    "title": "Enum AUPermissionType",
    "keywords": "Enum AUPermissionType Kann z.B. in Granted(AccessUnit, AUPermissionType) verwendet werden. Namespace : FrameworkSystems.FrameworkBase Assembly : FrameworkSystems.FrameworkBase.dll Syntax [Serializable] public enum AUPermissionType Fields Name Description Access Is general access allowed? AccessDerived Is access of an AccessUnit, which is derived from this AccessUnit, possible? Delete Is deleting allowed? Insert Is inserting allowed? Update Is updating allowed?"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.UserTokenAsString.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.UserTokenAsString.html",
    "title": "Property UserTokenAsString",
    "keywords": "Property UserTokenAsString UserTokenAsString Gibt den Token zurück, der bei der Authentifizierung des Benutzers am Authentication-Service gelöst wird. Ist die Authentifikation ausgeschaltet, wird String.Empty zurück gegeben. Declaration public string UserTokenAsString { get; } Property Value Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.Username.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.Username.html",
    "title": "Property Username",
    "keywords": "Property Username Username Gibt den Namen das momentan authentifizierten Benutzers zurück. Ist die Authentifikation ausgeschaltet, wird String.Empty zurück gegeben. Declaration public string Username { get; } Property Value Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.IsDefaultUser.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.IsDefaultUser.html",
    "title": "Property IsDefaultUser",
    "keywords": "Property IsDefaultUser IsDefaultUser Gibt an, ob der authentifizierte Benutzer der Default User ist. Declaration public bool IsDefaultUser { get; } Property Value Type Description System.Boolean"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.AuthenticationEnabled.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.AuthenticationEnabled.html",
    "title": "Property AuthenticationEnabled",
    "keywords": "Property AuthenticationEnabled AuthenticationEnabled Gibt an, ob die Authentication in der Anwendung aktiviert ist. Eine Developerlizenz deaktiviert die Benutzerauthentifizierung automatisch. Declaration public bool AuthenticationEnabled { get; } Property Value Type Description System.Boolean"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.IdentifyDefaultUser.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.IdentifyDefaultUser.html",
    "title": "Method IdentifyDefaultUser",
    "keywords": "Method IdentifyDefaultUser IdentifyDefaultUser() Authentifiziert den in der Application hinterlegten Default User. Dazu wird der Authentication Service kontaktiert. Declaration public bool IdentifyDefaultUser() Returns Type Description System.Boolean Gibt bei Erfolg true und bei einem Fehler false zurück. IdentifyDefaultUser(out AUHelper.Message) Authentifiziert den in der Application hinterlegten Default User. Dazu wird der Authentication Service kontaktiert. Declaration public bool IdentifyDefaultUser(out AUHelper.Message msg) Parameters Type Name Description FrameworkSystems.FrameworkBase.AccessControl.AUHelper.Message msg Im übergebenen Message Objekt wird der Erfolg bzw. der Grund bei Misserfolg angegeben. Returns Type Description System.Boolean Gibt bei Erfolg true und bei einem Fehler false zurück."
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.IdentifyUser.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.IdentifyUser.html",
    "title": "Method IdentifyUser",
    "keywords": "Method IdentifyUser IdentifyUser(out AUHelper.Message, String, String, ref String, Boolean) Authentifiziert den übergebenen Benutzer. Dazu wird der Authentication Service kontaktiert. Declaration public bool IdentifyUser(out AUHelper.Message msg, string username, string password, ref string loginInfo, bool includeRolesInToken) Parameters Type Name Description FrameworkSystems.FrameworkBase.AccessControl.AUHelper.Message msg Im übergebenen Message Objekt wird der Erfolg bzw. der Grund bei Misserfolg angegeben. System.String username System.String password System.String loginInfo Der Parameter LoginIngo wird ausgelesen und vom Authentication Service geloggt. Zurückgegeben wird die zuletzt geloggte Information. System.Boolean includeRolesInToken Der letzte Parameter gibt an, ob die Rollen im Token kommuniziert werden sollen - Standardwert true Returns Type Description System.Boolean Gibt bei Erfolg true und bei einem Fehler false zurück."
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.IdentifyUnit.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.IdentifyUnit.html",
    "title": "Method IdentifyUnit",
    "keywords": "Method IdentifyUnit IdentifyUnit(String) Wählt die Geschäftseinheit (Unit) mit dem angegebenen Schlüsselwert unitKey aus. Dadurch werden Rollen und Berechtigungen automatisch neu gesetzt. Declaration public void IdentifyUnit(string unitKey) Parameters Type Name Description System.String unitKey"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.UnitKey.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.UnitKey.html",
    "title": "Property UnitKey",
    "keywords": "Property UnitKey UnitKey Gibt Schlüsselwert der Unit (Geschäftseinheit) zurück, an der der Benutzer (mit der Methode IdentifyUnit(String) ) angemeldet wurde. Declaration public string UnitKey { get; } Property Value Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.Units.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.Units.html",
    "title": "Property Units",
    "keywords": "Property Units Units Gibt eine Enumeration von Schlüssel-Wert-Paaren zurück, welche alle an dieser Applikation zur Verfügung stehenden Geschäftseinheiten repräsentieren. Declaration public IEnumerable<KeyValuePair<string, string>> Units { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.String , System.String >> Remarks KeyValuePair.Key = Schlüsselwert der Unit (Geschäftseinheit) KeyValuePair.Value = Name der Unit"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.Granted.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.Granted.html",
    "title": "Method Granted",
    "keywords": "Method Granted Granted(AccessUnit, AUPermissionType) Gibt aus, ob ein bestimmtes Recht an einer AccessUnit besteht. Declaration public bool Granted(AccessUnit accessUnit, AUPermissionType type) Parameters Type Name Description AccessUnit accessUnit AUPermissionType type Returns Type Description System.Boolean Remarks Es wird dann Zugriff auf eine AccessUnit gewährt, wenn sowohl die Lizenz als auch die dem Benutzer zugeteilten Rollen diese freischalten. Examples if ( this.Global.AUHelper.Granted( AUList.aufrmForm1, AUPermissionType.Delete ) ) { //Delete granted } if ( this.Global.Granted(AUList.aufrmForm1, AUPermissionType.Insert) ) { //Insert granted } Granted(AccessUnit) Gibt aus, ob auf die übergebene AccessUnit das Recht Access besteht. Declaration public bool Granted(AccessUnit accessUnit) Parameters Type Name Description AccessUnit accessUnit Eine AccessUnit aus der AUList . Returns Type Description System.Boolean Remarks Es wird dann Zugriff auf eine AccessUnit gewährt, wenn sowohl die Lizenz als auch die dem Benutzer zugeteilten Rollen diese freischalten. Examples if ( this.Global.AUHelper.Granted( AUList.aufrmForm1 ) ) { //Access granted }"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.LicenseGranted.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.LicenseGranted.html",
    "title": "Method LicenseGranted",
    "keywords": "Method LicenseGranted LicenseGranted(AccessUnit, AUPermissionType) Gibt aus, ob die vorhandene Lizenz den Zugriff auf die übergebene AsccessUnit erlaubt. Declaration public bool LicenseGranted(AccessUnit accessUnit, AUPermissionType type) Parameters Type Name Description AccessUnit accessUnit Eine AccessUnit aus der AUList . AUPermissionType type Eine AUPermissionType Returns Type Description System.Boolean Remarks Bei der Überprüfung der Rechte werden die zugeteilten Rollen nicht berücksichtigt. Examples if ( this.Global.AUHelper.LicenseGranted( AUList.aufrmForm1 ) ) { //License allows Access } LicenseGranted(AccessUnit) Gibt aus, ob die vorhandene Lizenz den Zugriff auf die übergebene AsccessUnit erlaubt Declaration public bool LicenseGranted(AccessUnit accessUnit) Parameters Type Name Description AccessUnit accessUnit Eine AccessUnit aus der AUList . Returns Type Description System.Boolean Remarks Bei der Überprüfung der Rechte werden die zugeteilten Rollen nicht berücksichtigt. Examples if ( this.Global.AUHelper.LicenseGranted( AUList.aufrmForm1 ) ) { //License allows Access }"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.GetPackages.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.GetPackages.html",
    "title": "Method GetPackages",
    "keywords": "Method GetPackages GetPackages() Gibt eine Liste zurück, die alle Packages der Applikation in der Verwendungsreihenfolge enthält. Declaration public List<AUHelper.PackageInfo> GetPackages() Returns Type Description System.Collections.Generic.List < AUHelper.PackageInfo > Remarks Das SystemPackage ist in der Liste nicht enthalten. Die Liste beginnt mit dem DefaultPackage und endet mit dem obersten CustomizingPackage. Die Klasse AUHelper.PackageInfo enthält über ein Package die Informationen ID, Name, Version und Hersteller (Manufacturer)."
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.ExternalTransferObject.GetImageFlavorData.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.ExternalTransferObject.GetImageFlavorData.html",
    "title": "Method GetImageFlavorData",
    "keywords": "Method GetImageFlavorData GetImageFlavorData() Wenn im Drag&Drop-Vorgang ein Bild transportiert wird, werden die Bilddaten ( ImageFlavorData ) zurückgegeben, andernfalls null . Declaration public ImageFlavorData GetImageFlavorData() Returns Type Description ImageFlavorData"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.ExternalTransferObject.GetFileListFlavorData.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.ExternalTransferObject.GetFileListFlavorData.html",
    "title": "Method GetFileListFlavorData",
    "keywords": "Method GetFileListFlavorData GetFileListFlavorData() Wenn im Drag&Drop-Vorgang Dateien transportiert werden, werden die Daten im Format einer Dateiliste ( FileListFlavorData ) zurückgegeben, andernfalls null . Declaration public FileListFlavorData GetFileListFlavorData() Returns Type Description FileListFlavorData"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.ExternalTransferObject.GetUriListFlavorData.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.ExternalTransferObject.GetUriListFlavorData.html",
    "title": "Method GetUriListFlavorData",
    "keywords": "Method GetUriListFlavorData GetUriListFlavorData() Wenn im Drag&Drop-Vorgang URIs (Uniform Resource Identifier) transportiert werden, werden diese als URI-Liste ( UriListFlavorData ) zurückgegeben, ansonsten null . Declaration public UriListFlavorData GetUriListFlavorData() Returns Type Description UriListFlavorData"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.ExternalTransferObject.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.ExternalTransferObject.html",
    "title": "Class ExternalTransferObject",
    "keywords": "Class ExternalTransferObject Ein Objekt dieser Klasse wird in den Events OnCanDrop und OnDrop (Drag&Drop Events) als TransferObject in den Eventparametern übergeben, wenn der Drag&Drop-Vorgang von außerhalb der Applikation in die Applikation hinein ausgelöst wurde. Inheritance System.Object ExternalTransferObject Namespace : FrameworkSystems.FrameworkBase.DragAndDrop Assembly : FrameworkSystems.FrameworkBase.dll Syntax public class ExternalTransferObject Remarks Die Klasse bietet Methoden, mit denen ermittelt werden kann, welche FlavorTypes ( FlavorType ) unterstützt werden, also in welchen Formaten Daten zur Verfügung stehen. Außerdem können zu jedem FlavorType die entsprechenden Daten ( FlavorData ) abgefragt werden. In den Events OnCanDrop und OnDrop kann eindeutig erkannt werden, ob es sich um einen internen oder einen externen Drag&Drop-Vorgang handelt, indem überprüft wird, ob das TransferObject vom Typ ExternalTransferObject ist. Examples ExternalTransferObject oExternalTransferObject = e.TransferObject as ExternalTransferObject; if (oExternalTransferObject != null) { // Drag&Drop-Vorgang von außerhalb der Applikation } else { // Drag&Drop-Vorgang innerhalb der Applikation } Methods GetBestTextFlavorData() Gibt die Daten zu dem mit der Methode GetBestTextFlavorType() ermittelten Textformat ( TextFlavorData ) zurück. Wenn kein Textformat unterstützt wird, wird null zurück gegeben. GetBestTextFlavorType() Gibt das erste Textformat aus der folgenden Prioritätenliste zurück. GetFileListFlavorData() Wenn im Drag&Drop-Vorgang Dateien transportiert werden, werden die Daten im Format einer Dateiliste ( FileListFlavorData ) zurückgegeben, andernfalls null . GetFlavorData(String) Wenn zu dem angegebenen Datenformat Daten abgerufen werden können, so werden diese (als Spezialisierung von FlavorData ) zurückgegeben, andernfalls null . GetImageFlavorData() Wenn im Drag&Drop-Vorgang ein Bild transportiert wird, werden die Bilddaten ( ImageFlavorData ) zurückgegeben, andernfalls null . GetSupportedFlavorTypes() Gibt alle Datenformate zurück, zu denen Daten abgerufen werden können. GetSupportedTextFlavorTypes() Gibt alle Textformate zurück, zu denen Daten abgerufen werden können. GetTextFlavorData(String) Gibt die Daten zum angegebenen Textformat zurück, falls abrufbar, ansonsten null . GetUriListFlavorData() Wenn im Drag&Drop-Vorgang URIs (Uniform Resource Identifier) transportiert werden, werden diese als URI-Liste ( UriListFlavorData ) zurückgegeben, ansonsten null . IsFlavorTypeSupported(String) Gibt zurück, ob Daten zum angegebenen Format abgerufen werden können."
  },
  "api/FrameworkSystems.FrameworkExceptions.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.html",
    "title": "Namespace FrameworkSystems.FrameworkExceptions",
    "keywords": "Namespace FrameworkSystems.FrameworkExceptions Classes FrameworkApplicationException Exceptions die vom Framework geworfen werden und einen erwarteten Fehler darstellen sollten von dieser Klasse sein. Der Broker gibt diese dann als Fehler ohne StackTrace an den Client weiter. RowVersionInvalidException Die Component prüft beim Save automatisch, ob der Datensatz auf der Datenbank zwischenzeitlich von einer anderen Instanz geändert wurde – sprich, ob sich der Wert in der Spalte FSROWVERSION geändert hat. Wenn das der Fall ist, dann wird eine diese Exception geworfen. Enums FrameworkCloseMode Definiert den Modus mit dem die Application beendet werden soll."
  },
  "api/FrameworkSystems.FrameworkStudio.DevFormBase.EventTab.html": {
    "href": "api/FrameworkSystems.FrameworkStudio.DevFormBase.EventTab.html",
    "title": "Namespace FrameworkSystems.FrameworkStudio.DevFormBase.EventTab",
    "keywords": "Namespace FrameworkSystems.FrameworkStudio.DevFormBase.EventTab Classes FrameworkOnLinkClickEventArgs TODO: muss noch genauer beschrieben werden"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkApplicationException.-ctor.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkApplicationException.-ctor.html",
    "title": "Constructor FrameworkApplicationException",
    "keywords": "Constructor FrameworkApplicationException FrameworkApplicationException(String) Declaration public FrameworkApplicationException(string msg) Parameters Type Name Description System.String msg FrameworkApplicationException(String, Int32) Declaration public FrameworkApplicationException(string msg, int severity) Parameters Type Name Description System.String msg System.Int32 severity FrameworkApplicationException(String, Exception) Declaration public FrameworkApplicationException(string msg, Exception innerEx) Parameters Type Name Description System.String msg System.Exception innerEx FrameworkApplicationException(String, Int32, Exception) Declaration public FrameworkApplicationException(string msg, int severity, Exception innerEx) Parameters Type Name Description System.String msg System.Int32 severity System.Exception innerEx"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.ChangePasswordChecked.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.ChangePasswordChecked.html",
    "title": "Method ChangePasswordChecked",
    "keywords": "Method ChangePasswordChecked ChangePasswordChecked(String, String, String, out AUHelper.Message, String) Ändert das Passwort für den angegebenen Benutzer unter Angabe einer Login Information. In der als out Parameter angegebenen Message wird der Erfolg bzw. Grund für den Misserfolg zurückgegeben. Declaration public void ChangePasswordChecked(string username, string oldPassword, string newPassword, out AUHelper.Message message, string loginInfo) Parameters Type Name Description System.String username System.String oldPassword System.String newPassword FrameworkSystems.FrameworkBase.AccessControl.AUHelper.Message message System.String loginInfo beliebiger Text, der vom Authentication Service geloggt wird, darf null sein ChangePasswordChecked(String, Byte[], String, out AUHelper.Message, String) Ändert das Passwort für den angegebenen Benutzer unter Angabe einer Login Information In der als out Parameter angegebenen Message wird der Erfolg bzw. Grund für den Misserfolg zurückgegeben. Declaration public void ChangePasswordChecked(string username, byte[] oldHashSign, string newPassword, out AUHelper.Message message, string loginInfo) Parameters Type Name Description System.String username System.Byte [] oldHashSign Der Hashwert des alten Passwortes. System.String newPassword FrameworkSystems.FrameworkBase.AccessControl.AUHelper.Message message System.String loginInfo beliebiger Text, der vom Authentication Service geloggt wird, darf null sein"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.ChangePassword.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.ChangePassword.html",
    "title": "Method ChangePassword",
    "keywords": "Method ChangePassword ChangePassword(String, String) Ändert das Passwort des momentan angemeldeten Benutzers. Declaration public void ChangePassword(string oldPassword, string newPassword) Parameters Type Name Description System.String oldPassword System.String newPassword"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.GetAllLanguages.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.GetAllLanguages.html",
    "title": "Method GetAllLanguages",
    "keywords": "Method GetAllLanguages GetAllLanguages() Gibt eine Liste mit ISO Kürzeln aller an dieser Applikation bekannten Sprachen zurück. Declaration public List<string> GetAllLanguages() Returns Type Description System.Collections.Generic.List < System.String >"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.GetGrantedLanguages.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.GetGrantedLanguages.html",
    "title": "Method GetGrantedLanguages",
    "keywords": "Method GetGrantedLanguages GetGrantedLanguages() Gibt eine Liste mit ISO Kürzeln der Sprachen zurück, die zur Verfügung stehen und durch die verwendeten Lizenzen freigegeben sind. Declaration public List<string> GetGrantedLanguages() Returns Type Description System.Collections.Generic.List < System.String >"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.GetApplicationRoles.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.GetApplicationRoles.html",
    "title": "Method GetApplicationRoles",
    "keywords": "Method GetApplicationRoles GetApplicationRoles(Boolean) Gibt eine Liste mit den Namen aller Rollen zurück, welche an dieser Applikation zur Verfügung stehen. Declaration public List<string> GetApplicationRoles(bool reload) Parameters Type Name Description System.Boolean reload Mit true wird ein neues Laden der Rollen vom Authentication Service erzwungen. Returns Type Description System.Collections.Generic.List < System.String > GetApplicationRoles() Gibt eine Liste mit den Namen aller Rollen zurück, welche an dieser Applikation zur Verfügung stehen. Declaration public List<string> GetApplicationRoles() Returns Type Description System.Collections.Generic.List < System.String >"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.GetUserRoles.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.GetUserRoles.html",
    "title": "Method GetUserRoles",
    "keywords": "Method GetUserRoles GetUserRoles() Gibt eine Liste mit den technischen Namen der Rollen zurück, die dem aktuell angemeldeten Benutzer zugeordnet sind. Declaration public List<string> GetUserRoles() Returns Type Description System.Collections.Generic.List < System.String >"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.GetRoleDescription.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.GetRoleDescription.html",
    "title": "Method GetRoleDescription",
    "keywords": "Method GetRoleDescription GetRoleDescription(String) Gibt die Beschreibung der Rolle zurück, die über den technischen Namen roleName identifiziert wird. Declaration public string GetRoleDescription(string roleName) Parameters Type Name Description System.String roleName Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.GetRoleCaption.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.GetRoleCaption.html",
    "title": "Method GetRoleCaption",
    "keywords": "Method GetRoleCaption GetRoleCaption(String) Gibt die Bezeichnung (=anzuzeigender Name) der Rolle zurück, die über den technischen Namen roleName identifiziert wird. Declaration public string GetRoleCaption(string roleName) Parameters Type Name Description System.String roleName Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.PackageInfo.Name.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.PackageInfo.Name.html",
    "title": "Field Name",
    "keywords": "Field Name Der Name des Packages. Namespace : FrameworkSystems.FrameworkBase.AccessControl Assembly : FrameworkSystems.FrameworkBase.dll Syntax public readonly string Name Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.PackageInfo.Version.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.PackageInfo.Version.html",
    "title": "Field Version",
    "keywords": "Field Version Die Version des Packages. Namespace : FrameworkSystems.FrameworkBase.AccessControl Assembly : FrameworkSystems.FrameworkBase.dll Syntax public readonly string Version Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.PackageInfo.ProductName.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.PackageInfo.ProductName.html",
    "title": "Field ProductName",
    "keywords": "Field ProductName Der an der Package-Version definierte Product Name. Namespace : FrameworkSystems.FrameworkBase.AccessControl Assembly : FrameworkSystems.FrameworkBase.dll Syntax public readonly string ProductName Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.PackageInfo.Manufacturer.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.PackageInfo.Manufacturer.html",
    "title": "Field Manufacturer",
    "keywords": "Field Manufacturer Der im Package definierte Hersteller. Namespace : FrameworkSystems.FrameworkBase.AccessControl Assembly : FrameworkSystems.FrameworkBase.dll Syntax public readonly string Manufacturer Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.PackageInfo.PublicKey.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.PackageInfo.PublicKey.html",
    "title": "Field PublicKey",
    "keywords": "Field PublicKey Der öffenliche Schlüssel des Packages. Namespace : FrameworkSystems.FrameworkBase.AccessControl Assembly : FrameworkSystems.FrameworkBase.dll Syntax public readonly RSAKeyPair PublicKey Returns Type Description FrameworkSystems.FrameworkBase.License.RSAKeyPair"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.PackageInfo.LastCompileDate.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.PackageInfo.LastCompileDate.html",
    "title": "Field LastCompileDate",
    "keywords": "Field LastCompileDate Zeitpunkt des letzten Compiles. Namespace : FrameworkSystems.FrameworkBase.AccessControl Assembly : FrameworkSystems.FrameworkBase.dll Syntax public readonly DateTime LastCompileDate Returns Type Description System.DateTime"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.PackageInfo.WasLastCompileBugFix.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.PackageInfo.WasLastCompileBugFix.html",
    "title": "Field WasLastCompileBugFix",
    "keywords": "Field WasLastCompileBugFix Gibt an, ob der letzte Compile im Service-Release-Modus stattgefunden hat. Namespace : FrameworkSystems.FrameworkBase.AccessControl Assembly : FrameworkSystems.FrameworkBase.dll Syntax public readonly bool WasLastCompileBugFix Returns Type Description System.Boolean"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.PackageInfo.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.PackageInfo.html",
    "title": "Class AUHelper.PackageInfo",
    "keywords": "Class AUHelper.PackageInfo Diese Klasse beinhaltet die Informationen eines Packages. Die Liste der Packages kann mit der Methode GetPackages() ermittelt werden. Inheritance System.Object AUHelper.PackageInfo Namespace : FrameworkSystems.FrameworkBase.AccessControl Assembly : FrameworkSystems.FrameworkBase.dll Syntax [Serializable] public sealed class PackageInfo Remarks Warning Die Klasse darf nicht im eigenen Code instanziiert werden. Fields ID Die eindeutige ID des Packages. LastCompileDate Zeitpunkt des letzten Compiles. Manufacturer Der im Package definierte Hersteller. Name Der Name des Packages. ProductName Der an der Package-Version definierte Product Name. PublicKey Der öffenliche Schlüssel des Packages. Version Die Version des Packages. WasLastCompileBugFix Gibt an, ob der letzte Compile im Service-Release-Modus stattgefunden hat."
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.FileFlavorData.Size.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.FileFlavorData.Size.html",
    "title": "Property Size",
    "keywords": "Property Size Size Gibt die Größe der Datei in Bytes zurück. Diese Eigenschaft ist bereits im Event OnCanDrop gefüllt. Declaration public long Size { get; protected set; } Property Value Type Description System.Int64"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.FileFlavorData.Type.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.FileFlavorData.Type.html",
    "title": "Property Type",
    "keywords": "Property Type Type Gibt den Typ der Datei zurück. Declaration public FileFlavorData.FileType Type { get; protected set; } Property Value Type Description FileFlavorData.FileType Remarks Mögliche Werte sind : File : Datei Directory : Verzeichnis"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.FileFlavorData.Name.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.FileFlavorData.Name.html",
    "title": "Property Name",
    "keywords": "Property Name Name Gibt den Dateinamen (inkl. Dateiendung) zurück. Declaration public string Name { get; protected set; } Property Value Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.FileFlavorData.FullName.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.FileFlavorData.FullName.html",
    "title": "Property FullName",
    "keywords": "Property FullName FullName Gibt den Dateinamen inklusive Pfad zurück. Declaration public string FullName { get; protected set; } Property Value Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.FileFlavorData.LastModified.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.FileFlavorData.LastModified.html",
    "title": "Property LastModified",
    "keywords": "Property LastModified LastModified Gibt das letzte Änderungsdatum der Datei zurück. Declaration public DateTime LastModified { get; protected set; } Property Value Type Description System.DateTime"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.FileFlavorData.Content.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.FileFlavorData.Content.html",
    "title": "Property Content",
    "keywords": "Property Content Content Gibt den Dateiinhalt zurück. Dieser steht erst im OnDrop Eventhandler zur Verfügung und nur dann, wenn am FileFlavorData die Methode FillOnDrop() aufgerufen wurde. Declaration public byte[] Content { get; protected set; } Property Value Type Description System.Byte []"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.FileFlavorData.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.FileFlavorData.html",
    "title": "Class FileFlavorData",
    "keywords": "Class FileFlavorData Diese Klasse stellt eine einzelne Datei dar, die in einem externen Drag&Drop-Vorgang transportiert wird. Eine einzelne Datei ist immer ein Element einer Liste von Dateien ( FileListFlavorData ). Inheritance System.Object FileFlavorData Namespace : FrameworkSystems.FrameworkBase.DragAndDrop Assembly : FrameworkSystems.FrameworkBase.dll Syntax public class FileFlavorData Properties Content Gibt den Dateiinhalt zurück. Dieser steht erst im OnDrop Eventhandler zur Verfügung und nur dann, wenn am FileFlavorData die Methode FillOnDrop() aufgerufen wurde. FullName Gibt den Dateinamen inklusive Pfad zurück. LastModified Gibt das letzte Änderungsdatum der Datei zurück. Name Gibt den Dateinamen (inkl. Dateiendung) zurück. Size Gibt die Größe der Datei in Bytes zurück. Diese Eigenschaft ist bereits im Event OnCanDrop gefüllt. Type Gibt den Typ der Datei zurück."
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.GetUserUnits.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.GetUserUnits.html",
    "title": "Method GetUserUnits",
    "keywords": "Method GetUserUnits GetUserUnits() Gibt eine Liste mit Schlüsselwerten der Units (Geschäftseinheiten) zurück, welche für den aktuell angemeldeten Benutzer freigeschaltet sind. Declaration public List<string> GetUserUnits() Returns Type Description System.Collections.Generic.List < System.String >"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.RegisterUnits.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.RegisterUnits.html",
    "title": "Method RegisterUnits",
    "keywords": "Method RegisterUnits RegisterUnits(IEnumerable<KeyValuePair<String, String>>) Registriert die angegebenen Geschäftseinheiten (Units) am Authentication Service. Declaration public void RegisterUnits(IEnumerable<KeyValuePair<string, string>> units) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.String , System.String >> units Key = unit id / Value = unit name"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AUHelper.html",
    "title": "Class AUHelper",
    "keywords": "Class AUHelper Diese Klasse bietet Methoden und Properties zu den Themen Authentifizierung, Geschäftseinheiten, Laufzeitlizensierung und Packages an. Sie ist über AUHelper zu erreichen. Inheritance System.Object AUHelper Namespace : FrameworkSystems.FrameworkBase.AccessControl Assembly : FrameworkSystems.FrameworkBase.dll Syntax [Serializable] public sealed class AUHelper Examples this.Global.AUHelper.ChangePassword( sOld, sNew ); Properties AuthenticationEnabled Gibt an, ob die Authentication in der Anwendung aktiviert ist. Eine Developerlizenz deaktiviert die Benutzerauthentifizierung automatisch. IsDefaultUser Gibt an, ob der authentifizierte Benutzer der Default User ist. UnitKey Gibt Schlüsselwert der Unit (Geschäftseinheit) zurück, an der der Benutzer (mit der Methode IdentifyUnit(String) ) angemeldet wurde. Units Gibt eine Enumeration von Schlüssel-Wert-Paaren zurück, welche alle an dieser Applikation zur Verfügung stehenden Geschäftseinheiten repräsentieren. Username Gibt den Namen das momentan authentifizierten Benutzers zurück. Ist die Authentifikation ausgeschaltet, wird String.Empty zurück gegeben. UserTokenAsString Gibt den Token zurück, der bei der Authentifizierung des Benutzers am Authentication-Service gelöst wird. Ist die Authentifikation ausgeschaltet, wird String.Empty zurück gegeben. Methods ChangePassword(String, String) Ändert das Passwort des momentan angemeldeten Benutzers. ChangePasswordChecked(String, Byte[], String, out AUHelper.Message, String) Ändert das Passwort für den angegebenen Benutzer unter Angabe einer Login Information In der als out Parameter angegebenen Message wird der Erfolg bzw. Grund für den Misserfolg zurückgegeben. ChangePasswordChecked(String, String, String, out AUHelper.Message, String) Ändert das Passwort für den angegebenen Benutzer unter Angabe einer Login Information. In der als out Parameter angegebenen Message wird der Erfolg bzw. Grund für den Misserfolg zurückgegeben. GetAllLanguages() Gibt eine Liste mit ISO Kürzeln aller an dieser Applikation bekannten Sprachen zurück. GetApplicationRoles() Gibt eine Liste mit den Namen aller Rollen zurück, welche an dieser Applikation zur Verfügung stehen. GetApplicationRoles(Boolean) Gibt eine Liste mit den Namen aller Rollen zurück, welche an dieser Applikation zur Verfügung stehen. GetGrantedLanguages() Gibt eine Liste mit ISO Kürzeln der Sprachen zurück, die zur Verfügung stehen und durch die verwendeten Lizenzen freigegeben sind. GetPackages() Gibt eine Liste zurück, die alle Packages der Applikation in der Verwendungsreihenfolge enthält. GetRoleCaption(String) Gibt die Bezeichnung (=anzuzeigender Name) der Rolle zurück, die über den technischen Namen roleName identifiziert wird. GetRoleDescription(String) Gibt die Beschreibung der Rolle zurück, die über den technischen Namen roleName identifiziert wird. GetUserRoles() Gibt eine Liste mit den technischen Namen der Rollen zurück, die dem aktuell angemeldeten Benutzer zugeordnet sind. GetUserUnits() Gibt eine Liste mit Schlüsselwerten der Units (Geschäftseinheiten) zurück, welche für den aktuell angemeldeten Benutzer freigeschaltet sind. Granted(AccessUnit) Gibt aus, ob auf die übergebene AccessUnit das Recht Access besteht. Granted(AccessUnit, AUPermissionType) Gibt aus, ob ein bestimmtes Recht an einer AccessUnit besteht. IdentifyDefaultUser() Authentifiziert den in der Application hinterlegten Default User. Dazu wird der Authentication Service kontaktiert. IdentifyDefaultUser(out AUHelper.Message) Authentifiziert den in der Application hinterlegten Default User. Dazu wird der Authentication Service kontaktiert. IdentifyUnit(String) Wählt die Geschäftseinheit (Unit) mit dem angegebenen Schlüsselwert unitKey aus. Dadurch werden Rollen und Berechtigungen automatisch neu gesetzt. IdentifyUser(out AUHelper.Message, String, String, ref String, Boolean) Authentifiziert den übergebenen Benutzer. Dazu wird der Authentication Service kontaktiert. LicenseGranted(AccessUnit) Gibt aus, ob die vorhandene Lizenz den Zugriff auf die übergebene AsccessUnit erlaubt LicenseGranted(AccessUnit, AUPermissionType) Gibt aus, ob die vorhandene Lizenz den Zugriff auf die übergebene AsccessUnit erlaubt. RegisterUnits(IEnumerable<KeyValuePair<String, String>>) Registriert die angegebenen Geschäftseinheiten (Units) am Authentication Service."
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.html",
    "title": "Namespace FrameworkSystems.FrameworkBase.AccessControl",
    "keywords": "Namespace FrameworkSystems.FrameworkBase.AccessControl Classes AccessUnit TODO! AUHelper Diese Klasse bietet Methoden und Properties zu den Themen Authentifizierung, Geschäftseinheiten, Laufzeitlizensierung und Packages an. Sie ist über AUHelper zu erreichen. AUHelper.PackageInfo Diese Klasse beinhaltet die Informationen eines Packages. Die Liste der Packages kann mit der Methode GetPackages() ermittelt werden."
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.FlavorType.Image.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.FlavorType.Image.html",
    "title": "Field Image",
    "keywords": "Field Image Stellt ein Bild dar. Namespace : FrameworkSystems.FrameworkBase.DragAndDrop Assembly : FrameworkSystems.FrameworkBase.dll Syntax public const string Image = \"image/x-java-image\" Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.FlavorType.FileList.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.FlavorType.FileList.html",
    "title": "Field FileList",
    "keywords": "Field FileList Stellt Dateien dar. Namespace : FrameworkSystems.FrameworkBase.DragAndDrop Assembly : FrameworkSystems.FrameworkBase.dll Syntax public const string FileList = \"application/x-java-file-list\" Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.FlavorType.TextXml.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.FlavorType.TextXml.html",
    "title": "Field TextXml",
    "keywords": "Field TextXml Stellt Text im XML-Format dar. Namespace : FrameworkSystems.FrameworkBase.DragAndDrop Assembly : FrameworkSystems.FrameworkBase.dll Syntax public const string TextXml = \"text/xml\" Returns Type Description System.String"
  },
  "doc/tables/dbrun_mlstrings.html": {
    "href": "doc/tables/dbrun_mlstrings.html",
    "title": "dbRun_MLStrings (Business-Datenbank)",
    "keywords": "dbRun_MLStrings (Business-Datenbank) In dieser Tabelle werden die Fremdsprachen-Texte für die ML-Columns abgelegt. Die FS-Update-Logik erzeugt und aktualisiert diese Tabelle automatisch. Spalte Beschreibung ML_TableName Der Name der Datenbank-Tabelle (Uppercase) ML_ColumnName Der Name der MLColumn-Tabellen-Spalte (Uppercase) ML_FSRowID Die FSRowID des referenzierten Datensatzes. Diese kann für SQL-Abfragen verwendet werden. ML_Iso Der 2-stellige Iso-Code der Fremdsprache (Lowercase) ML_Text Der fremdsprachige Text (Langtext)"
  },
  "doc/tables/dbrun_config.html": {
    "href": "doc/tables/dbrun_config.html",
    "title": "dbRun_Config (Business-Datenbank)",
    "keywords": "dbRun_Config (Business-Datenbank) Diese Tabelle beinhaltet die Konfigurationen für den automatischen Datenbank-Update. Die FS-Update-Logik erzeugt und aktualisiert diese Tabelle automatisch. Die Einstellungen müssen manuell per SQL vorgenommen werden. Wenn keine Einstellung existiert, dann zieht automatisch die Default-Einstellung. Spalte Beschreibung ConfigKey Schlüssel (siehe unten) ConfigValue Wert (siehe unten) ConnectionGroup Der Name der Connection-Group. Bei <NULL> zieht die Einstellung für alle Connection-Groups. Wenn für eine Connection-Group eine Konfiguration angegeben ist, dann hat diese Priorität. ConfigKey UNICODE Dieser ConfigKey stellt das Unicode-Verhalten des Update-Assinstenten ein. In ConfigValue sind folgende Werte zulässig: Disabled (Default) Neue Spalten werden ASCII (VARCHAR/ CLOB) angelegt. Enabled Neue Spalten werden Unicode (NVARCHAR/ NCLOB) angelegt. Adjust Bestehende Spalten werden auf Unicode umgestellt. Dies erfolgt im Schritt 4 des Update-Assistenten. Important Diese Einstellung hat zur Folge, dass die GESAMTE Datenbank angefasst wird. Dies bedeutet ggf. einen erheblichen Zeitaufwand und verursacht ein großes Volumen an Transaktion-Protokollen. ConfigKey LOB Dieser ConfigKey steuert, wie der Update-Assistent mit Langtext-Spalten umgehen soll. In ConfigValue sind folgende Werte zulässig Normal (Default) Neue Spalten werden mit LOB-Typen angelegt. Adjust Bestehende Spalten werden auf LOB-Typen umgestellt. Dies erfolgt im Schritt 4 des Update-Assistenten. SQL-Server: text => varchar(max) / image => varbinary(max) Oracle: varchar2(2000) => CLOB Important ACHTUNG! Diese Einstellung hat zur Folge, dass große Teile der Datenbank angefasst werden. Dies bedeutet ggf. einen erheblichen Zeitaufwand und verursacht ein großes Volumen an Transaktion-Protokollen. Bei Oracle kann sein ggf. sein, dass einige ältere Programme (wie z.B. SQL-Business) nicht mit dem Datentyp CLOB umgehen können. In diesem Fall muss der Schalter auf Normal gesetzt werden."
  },
  "doc/sql/syntax.html": {
    "href": "doc/sql/syntax.html",
    "title": "SQL-Syntax",
    "keywords": "SQL-Syntax Framework Studio übersetzt alle SQL-Statements in die Syntax der verwendeten Ziel-Datenbank. Dazu werden alle Statements geparsed und für die Ziel-Datenbank wieder neu zusammengesetzt."
  },
  "doc/sql/operatoren.html": {
    "href": "doc/sql/operatoren.html",
    "title": "Operatoren",
    "keywords": "Operatoren || Verbindet 2 Zeichenketten. Beispiel: SELECT column1 || ' - ' || colum2 FROM tabelle Bei Zeichen-Ketten muss dieser Operator verwendet werden. Der + - Operator ist nicht zulässig. Wenn dennoch der + - Operator verwendet wird, versucht der Parser dies zu korrigieren. Das ist möglich, wenn bei der Operation Zeichen-Ketten oder bestimmte Zeichenketten-Funktionen beteiligt sind. Nicht erkannt wird z.B. das Verbinden von 2 Spalten. In diesem Fall kann es zu Fehlern auf der Ziel-Datenbank kommen. + - * / Addiert, subtrahiert, multipliziert bzw. dividiert 2 Zahlenwerte. Der Framework Studio SQL-Parser versteht die im Folgenden beschriebenen Operatoren und Funktionen. Diese werden Datenbank-spezifisch umgesetzt und können bedenkenlos in selbst formuliertem Sql verwendet werden. Funktionen, die der Parser nicht kennt, werden direkt ohne Konvertierung an die Datenbank weitergegeben. Das bedingt, dass diese Funktionen von der Datenbank verstanden werden. Ggf. Ist es in solchen Fällen nötig, selbst dafür zu sorgen, dass das Sql datenbankspezifisch formuliert wird."
  },
  "doc/sql/num-funktionen.html": {
    "href": "doc/sql/num-funktionen.html",
    "title": "Numerische Funktionen",
    "keywords": "Numerische Funktionen ABS ( <Numeric Expression> ) Liefert den absoluten Betrag einer Zahl TRUNC ( <Numeric Expression>, <Decimals> ) Schneidet eine Dezimal-Zahl auf die angegebene Anzahl Stellen ab. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server ROUND ( <Numeric Expression>, <Decimals>, 1 ) Oracle TRUNC ( <Numeric Expression>, <Decimals> ) ROUND ( <Numeric Expression>, <Decimals> ) Rundet eine Dezimal-Zahl auf die angegebene Anzahl Stellen. POWER ( <Numeric Expression>, <y> ) Potenziert eine Zahl mit y SQUARE ( <Numeric Expression> ) Quadrat eine Zahl. SQRT ( <Numeric Expression> ) Quadratwurzel einer Zahl CEILING ( <Numeric Expression> ) Rundet eine Zahl auf. FLOOR ( <Numeric Expression> ) Rundet eine Zahl ab. LOG (<Float Expression> ) Natürlicher Logarithmus einer Fließkommazahl. LOG10 ( <Float Expression> ) Logarithmus mit der Basis 10. EXP ( <float Expression> ) Gibt den exponentiellen Wert des angegebenen float-Ausdrucks zurück. (e x ) SIN ( <float Expression> ) Sinus einer Fließkommazahl. TAN (<Float Expression> ) Tangens einer Fließkommazahl. SIGN ( <Number> ) Gibt das Vorzeichen der Zahl zurück. Negativ -> -1, 0 -> 0, positiv -> +1."
  },
  "doc/sql/grammatik.html": {
    "href": "doc/sql/grammatik.html",
    "title": "SQL-Grammatik",
    "keywords": "SQL-Grammatik Im Folgenden ist die Grammatik beschrieben, die vom Framework Studio SQL-Parser verstanden wird. Alle an die Datenbank geschickten Befehle müssen dieser Grammatik genügen, ansonsten kommt es zu SqlParser-Exceptions. Grammatik für SQL-Kommandos <select> SELECT [DISTINCT] { * | <resultColumn>[,…n] } FROM { <singleSource> | <joinSource> } [ WHERE <condition> ] [ GROUP BY <value>[,…n] [HAVING <condition>]] [ {UNION [ALL] | INTERSECT | EXCEPT} <select(ohne orderby)> ] [ ORDER BY <orderColumn>[,…n] ] <insert> INSERT INTO <identifierChain> ( <identifier>[,…n] ) { VALUES ( <value>[,…n] ) | <select> } <update> UPDATE <identifierChain> SET {<identifierChain> = <value> } [,…n] [ WHERE <condition> ] <delete> DELETE [FROM] <identifierChain> [ WHERE <condition> ] Grammatik für die Bestandteile der Kommandos <resultColumn> <identifierChain>.* | <value> [AS <identifier>] <singleSource> ( <singleSource> ) | <identifierChain> [ [AS] <identifier> ] <joinSource> ( <joinSource> ) | { <singleSource> | <joinSource> } { INNER | {LEFT | RIGHT | FULL} [OUTER] } JOIN { <singleSource> | <joinSource> } ON <condition> <condition> ( <condition> ) | NOT <condition> | <condition> {{ AND | OR } <condition>}[,…n] | <value> <predicate2> | EXISTS ( <select> ) <predicate2> { = | != | < | <= | > | >= } <value> | IS [NOT] NULL | BETWEEN <value> AND <value> | IN ( <select> | <value> [,…n] ) | LIKE <value> | LIKEESCAPE <value> <value> NULL | ( <value> ) | { - | + } <value> | <value> { + | - | * | / | “||” } <value> | <identifierChain> | [<identifierChain>.] <FunktionsName> ( [ <value> [,…n] ] ) | <searchedCaseWhen> | <simpleCaseWhen> | \"[[\" <natives sql fragment> \"]]\" | <stringLiteral> | <integerValue> | <decimalValue> <searchedCaseWhen> CASE {WHEN <condition> THEN <value>}[,…n] [ ELSE <value> ] END <simpleCaseWhen> CASE <value> {WHEN {<predicate2> | <value>} THEN <value>}[,…n] [ ELSE <value> ] END <orderColumn> <value> [ASC | DESC] <identifierChain> <identifier>[.<identifier>][,…n] <identifier> \"[\" <beliebige Zeichenfolge> \"]\" | <Wort, mit einem Buchstaben beginnend>"
  },
  "doc/sql/funktionen.html": {
    "href": "doc/sql/funktionen.html",
    "title": "SQL-Funktionen",
    "keywords": "SQL-Funktionen GETGUID ( ) Liefert eine neue Guid mit folgendem Format: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server LOWER( REPLACE ( NEWID ( ), '-', '' ) ) Oracle LOWER( SYS_GUID ( ) )"
  },
  "doc/database/ml-column.html": {
    "href": "doc/database/ml-column.html",
    "title": "ML-Column",
    "keywords": "ML-Column Framework Studio bietet einen Mechanismus, um Dateninhalte in mehreren Sprachen zu speichern. Eine beliebige Tabellen-Spalte, in der eine Zeichenkette abgelegt ist, kann im Tabelleneditor als MLColumn markiert werden. Vorraussetzung ist jedoch, dass die Tabelle die Spalte FSRowID enthält, weil diese als eindeutige Referenz auf den Datensatz benötigt wird. Ist eine Tabellen-Spalte als MLColumn gekennzeichnet, dann werden die fremdsprachigen Texte in der Tabelle dbRun_MLStrings abgelegt. Die normale Tabellen-Spalte beinhaltet die Texte in Default-Sprache. Caution Fehlt einer Component das Property ROWID (mit Mapping auf die DB-Column FSRowID ), funktioniert der Mechanismus nicht. Die FSRowID wird benötigt, weil dadurch die Relation zur Übersetzungs-Tabelle hergestellt wird. Customizing-Package Die Eigenschaft MLColumn kann im Customizing-Package gesetzt werden. Somit kann man in Kunden-Umgebungen den Mechanismus gezielt für die gewünschten Tabellen-Spalten aktivieren. Anwendung in Default-Sprache Die Default-Sprache ist de - außer man definiert über die Tabelle ML_Config eine andere Default-Sprache. Wird die Anwendung in der Default-Sprache gestartet, dann arbeitet Framework Studio mit der ganz normalen Spalte der Tabelle - ohne jegliche Sonder-Logik. Die fremdsprachigen Texte können nicht beeinflusst werden. Ändert man einen Text, dann bleiben die ggf. existierenden Übersetzungen unverändert erhalten. Bei Bedarf müsste man die Anwendung anschließend in den Fremdsprachen starten und den gewünschten Text dort ebenfalls anpassen. Anwendung in Fremdsprache Startet man die Anwendung mit einer Fremdsprache, dann greifen besondere Mechanismen. Die entsprechenden Component-Properties behandeln dann ausschließlich den fremdsprachigen Text mit einem Fallback auf die Default-Sprache. Die ML-Column-Logik wird von den ganz normalen Component-Properties behandelt. Dadurch wirkt sie sich automatisch auf alle Bereiche der Anwendung aus - inkl. Form-Databinding und Reporting. Load : Beim Zugriff auf das entsprechende Component-Property wird der Text aus der Tabelle dbRun_MLStrings gelesen. Existiert dort kein Eintrag, wird der Text der Default-Sprache aus der normalen Tabellen-Spalte verwendet. Update : Wird der Text geändert, dann wird der Eintrag in der entsprechenden Fremdsprache überschrieben. Der Text in der Default-Sprache kann nicht verändert werden. Wird der fremdsprachige Text geleert, dann wird beim Save der Component der Eintrag aus der Übersetzungs-Tabelle gelöscht und das Component-Property fällt auf die Default-Sprache zurück. Insert : Beim Anlegen eines neuen Datensatzes wird der eingegebene Text sowohl in der normalen Tabelle als auch in der Fremdsprache gespeichert. Important Die Sprache ist mit dem Start der Anwendung am GlobalObject festgelegt. Es gibt keine Möglichkeit, zur Laufzeit auf die Sprache Einfluss zu nehmen oder die Texte in einer spezifischen Sprache zu behandeln. Tips für Entwickler Finden von MLColumns Wird eine DBColumn als MLColumn gekennzeichnet wird dafür der folgende Code generiert: public class Package_FSColumnName : FS.Demo.MDT.ArticleName { public Package_FSColumnName() { this.m_IsMLColumn = true; } } Dadurch können alle MLColumns mit dem Text this.m_IsMLColumn = true; über die Code-Suche gefunden werden. Dabei die Suche auf die DBTables einschränken."
  },
  "doc/html-client/android-app.html": {
    "href": "doc/html-client/android-app.html",
    "title": "Android App",
    "keywords": "Android App Für die volle Integration des HTML-Clients in die mobile Welt, stellen wir im Google Play Store den Client als Android App zur Verfügung. Diese ist vom Funktionsumfang equivalent zur Browser-Version. Name der App : Framework Studio Mobile Client Store Link : https://play.google.com/store/apps/details?id=com.fs.htmlclient Note Wir können derzeit noch keine Aussagen zu einer Veröffentlichung der App für iOS treffen. Einrichten eines Brokers Es muss natürlich definiert werden, mit welchem Broker sich der Mobile Client verbinden soll. Nach dem Start der App wird der Login angezeigt. Über den Button „+ New“ können beliebig viele Broker zur Liste hinzugefügt werden. Es ist auch möglich, Urls von Development Brokern hinzuzufügen. Dabei ist zu beachten, dass der Mobile Client nur auf den Development Broker zugreifen kann, wenn dieser über das Netzwerk erreichbar ist. Dazu muss Framework Studio mit Administrator-Rechten ausgeführt werden. Ob der Development Broker vom Netzwerk aus zugreifbar ist, kann über das Tray-Icon geprüft werden:"
  },
  "doc/html-client/funktionsumfang.html": {
    "href": "doc/html-client/funktionsumfang.html",
    "title": "Funktionsumfang",
    "keywords": "Funktionsumfang Der HTML-Client befindet sich noch in der agilen Entwicklung. Verglichen mit dem ausgereiften JavaClient ist der Funktionsumfang des HTML-Clients noch überschaubar. Neue Funktionen und die Unterstützung für weitere Controls werden kontinuierlich weiter entwickelt und veröffentlicht. Note Wird in diesem Kapitel etwas nicht erwähnt, wie z.B. ein Property eines Controls, eine Action oder andere Client-Funktionalitäten, so muss davon ausgegangen werden, dass diese noch nicht unterstützt werden. Handhabung von nicht unterstützten Funktionalitäten Es gibt im Form Designer oder im Code Editor von Framework Studio keine Limitierungen, die den Entwickler auf den Funktionsumfang des HTML-Clients einschränken. Werden Controls, Actions oder anderweitige Funktionalitäten genutzt, die vom HTML-Client nicht unterstützt werden, so werden diese (so weit es möglich ist) vom Client ignoriert. Wenn z.B. ein Grid-Control in ein Form eingebaut wird, so wird dieses erst garnicht vom HTML-Client interpretiert. Dasselbe gilt für nicht unterstützte Properties an Controls. Frameset Der HTML-Client besitzt kein Frameset. Alle geöffneten Forms werden in einer einzigen Liste organisiert. Es ist irrelevant, welchem Frame ein Form in einem Workflow zugeordnet ist. MessageBox und ExceptionBox Werden vollständig unterstützt inkl. Buttons, Icons, DialogResult und EventHandler. Werden im Client als modale Popups angezeigt. Modale Forms Modale Forms, die das Wechseln zu einem anderen Form unterdrücken, werden vom HTML-Client vollflächig angezeigt. Dabei wird der Menü-Button ausgeblendet. Verhalten beim Drücken des „Zurück“-Button auf einem mobilen Gerät: Wenn am Form das Property IsCloseIconVisible auf true gesetzt ist, wird der modale Dialog geschlossen. Wird dem Form über die Action SetCloseButton ein Button zugewiesen, dessen Click-Event beim Schließen ausgelöst werden soll, wird dies beim Drücken des Zurück-Button ebenfalls ausgelöst. Drag & Drop Drag & Drop und alle damit verbundenen Events werden vom HTML Client nicht unterstützt. Shortcuts und ToolTips Da für den HTML-Client die mobile Welt im Vordergrund steht, werden Shortcuts und ToolTips noch nicht unterstützt, da diese auf einem Handy bzw. Tablet keinen Sinn machen. Control Styles Control Styles werden für alle im HTML-Client verfügbaren Controls unterstützt. Wird im Form Designer einem Control ein Control Style zugeordnet, so werden dessen Properties korrekt interpretiert bzw. die Property-Hierarchie beachtet. Actions Es werden derzeit folgende Actions unterstützt: SetEnabled SetVisible SetCloseButton ScanBarcode Zurück-Button auf mobilen Geräten Mobile Geräte (z.B. Android) besitzen teilweise einen Zurück-Button. Der HTML Client unterstützt diesen kontextabhängig. Es gibt drei Prioritätsebenen, die nacheinander durchlaufen werden. Wird in einer Ebene auf das Drücken des Zurück-Buttons reagiert, so werden die darunter liegenden Ebenen nicht mehr behandelt. Die Ebenen geordnet nach Priorität sind: Overlays Modale Dialoge Normale Anzeige Overlays Als Overlay definiert sich alles, was sich mit einem ausgegrauten Hintergrund über die restliche Anzeige legt, wie z.B. MessageBoxen oder die ComboBox-Auswahl. Wenn ein Overlay geöffnet ist und der Zurück-Button gedrückt wird, wird das Overlay geschlossen. Eine MessageBox kann nur durch den Zurück-Button geschlossen werden, wenn ein Abbrechen-Button vorhanden ist. Modale Dialoge Modale Dialoge können mit dem Zurück-Button geschlossen werden, wenn das Property IsCloseIconVisible am Form auf true gesetzt ist. Wurde dem Form über die Action SetCloseButton ein Button mit einem Click-Event zugeordnet, so wird beim Drücken des Zurück-Buttons das Click-Event ausgelöst. Normale Anzeige Befindet sich der HTML Client in einem normalen Form, wird beim Drücken des Zurück-Buttons das Beenden der Application angestoßen, was mit der Rückfrage, ob die Session beendet werden soll, einher geht. Befindet sich der HTML Client im Broker-Auswahldialog, wird die Anwendung ohne Rückfrage geschlossen."
  },
  "doc/html-client/index.html": {
    "href": "doc/html-client/index.html",
    "title": "HTML-Client (Beta)",
    "keywords": "HTML-Client (Beta) Neben dem Java Client bietet Framework Studio auch einen HTML-Client für Desktop- sowie mobile Geräte an. Dieser befindet sich aktuell in der Beta-Phase und unterstützt noch deutlich weniger Funktionen und Controls als der Java Client. Was derzeit schon mit dem HTML-Client möglich ist, erfahren Sie in diesem Kapitel. Aktivieren des HTML-Clients Damit der HTML-Client über den Run Wizard und die Broker-Startseite gestartet werden kann, muss in der Application die Checkbox Supports Html Client gesetzt werden. Dies soll vermeiden, dass bisher existierende Applikationen ohne Weiteres im HTML-Client gestartet werden können, da diese sehr wahrscheinlich auf Controls und Funktionalitäten aufbauen, die derzeit vom HTML-Client noch nicht oder nicht vollständig unterstützt werden. Browser-Unterstützung Desktop Der HTML-Client basiert auf modernster Webtechnologie und benötigt deshalb auch einen aktuellen Browser für die Ausführung. Für Desktopsysteme empfehlen wir folgende Browser : Chrome Firefox Edge Safari (OSX) Auch alle weiteren Browser, basierend auf der Chromium-Engine (Opera, Vivaldi), funktionieren problemlos. Note Internet Explorer 11 kann auf Grund der betagten JavaScript-Engine nicht mehr verwendet werden. Mobile Endgeräte Eine auf den HTML-Client ausgelegte Applikation kann über die Broker-Startseite natürlich auch von einem beliebigen mobilen Gerät aus gestartet werden, welches über einen aktuellen Browser verfügt. Die Unterstützung der Browser im mobilen Umfeld ist sehr schwer zu beurteilen, da es gerade auf Android eine extrem große Auswahl gibt. Wir empfehlen deshalb folgende mobilen Browser : Chrome Firefox Edge Dolphin Android Browser (ab Android 5.1) Safari (ab iOS 10)"
  },
  "articles/requirements.html": {
    "href": "articles/requirements.html",
    "title": "Systemvoraussetzungen",
    "keywords": "Systemvoraussetzungen Entwicklungs-Rechner Ein Rechner auf dem mit der Framework Studio IDE entwickelt wird bzw. ein Rechner oder Server auf dem der Framework-Compiler ausgeführt wird. Betriebssystem Windows 10 64 Bit (Pro / Enterprise) [2] Windows 10 (Pro / Enterprise) [1] [2] Windows 8.1 64Bit (Pro / Enterprise) [2] Windows 8.1 (Pro / Enterprise) [1] [2] Windows 8 64Bit (Pro / Enterprise) [2] Windows 8 (Pro / Enterprise) [1] [2] Windows 7 SP1 64Bit (Professional / Enterprise / Ultimate) Windows 7 SP1 (Professional / Enterprise / Ultimate) [1] Windows Vista SP2 64Bit (Business / Enterprise / Ultimate) Windows Vista SP2 (Business / Enterprise / Ultimate) [1] Windows Server 2012 R2 64Bit (Essentials / Enterprise / Datacenter) Windows Server 2012 64Bit (Essentials / Enterprise / Datacenter) Windows Server 2008 R2 SP1 64Bit (Standard / Enterprise / Datacenter) Windows Server 2008 SP2 64Bit (Standard / Enterprise / Datacenter) Windows Server 2008 SP2 (Standard / Enterprise / Datacenter) [1] .NET Framework Microsoft .NET Framework 4.5 / 4.5.1 /4.5.2 / 4.6 [2] [1] Es wird ein 64Bit-Betriebssystems empfohlen. [2] Ab Windows 8 / Windows Server 2012 ist das .NET Framework 4.5 ab Windows 8.1 / Windows Server 2012 R2 ist das .NET Framework 4.5.1 und ab Windows 10 ist das .NET Framework 4.6 standardmäßig installiert. Weitere Software Java-Runtime Crystal Reports Runtime Crystal Reports Designer Oracle-Client Visual Studio: empfohlen zum Debuggen von Anwendungen Visual Studio 2012 Visual Studio 2010 Andere Versionen und Editionen können auf eigene Verantwortung in den IDE-Options konfiguriert werden. Windows Azure: Für die Funktion Publish2Azure wird folgende Software benötigt: Windows Azure SDK Version 2.4 Anwendungs-Server Rechner, auf dem Broker oder mit Framework Studio veröffentlichte Services laufen. Betriebssystem Windows Server 2012 64Bit (Essentials / Enterprise / Datacenter) Windows Server 2012 R2 64Bit (Essentials / Enterprise / Datacenter) Windows Server 2008 R2 SP1 64Bit (Standard / Enterprise / Datacenter) Windows Server 2008 SP2 64Bit (Standard / Enterprise / Datacenter) Windows Server 2008 SP2 (Standard / Enterprise / Datacenter) [1] Client-Betriebssysteme: Ein Broker oder Service kann prinzipiell auf einem Client-Betriebssystem (Windows 7, Windows 8, Windows 8.1, Windows 10) installiert werden. In einer Produktiv-Umgebung wird aber dringend der Einsatz eines o.g. Server-Betriebssystems empfohlen. Auf Client-Betriebssystemen können nur sehr wenige Benutzer parallel arbeiten. .NET Framework Microsoft .NET Framework 4.5 / 4.5.1 / 4.5.2 / 4.6 [1] Es wird ein 64Bit-Betriebsystems empfohlen. Weitere Software Crystal Reports Runtime IIS Oracle-Client Print-Server Der Print-Service benötigt eine Verbindung zur Runtime-Repository-Datenbank und er muss die gewünschten Drucker ansprechen können. Er wird nicht von der Anwendung direkt kontaktiert, deshalb kann auch ein Client-Betriebssystem verwendet werden. Print-Service Framework Studio Print-Service 3.11 Framework Studio Print-Service 3.10.3 Framework Studio Print-Service 3.9.10 Framework Studio Print-Service 3.8.14 Betriebssystem siehe Entwicklungs-Rechner Weitere Software Crystal Reports Runtime .NET Framework 4.5 / 4.5.1 / 4.5.2 / 4.6 Oracle-Client Authentication-Server Authentication-Service Framework Studio Authentication-Service 3.9 Framework Studio Authentication-Service 3.9.1 (unterstützt Runtime Supervisor) Framework Studio Authentication-Service 3.8 oder 3.8.5 Betriebssystem siehe Anwendungs-Server Weitere Software .NET Framework 4.5 / 4.5.1 / 4.5.2 / 4.6 Oracle-Client Client-Rechner Rechner, auf dem die Anwendung mit dem Java-Client ausgeführt wird. Betriebssystem An das Betriebssystem werden grundsätzlich keine besonderen Anforderungen gestellt. Entscheidend ist, dass die Java-Runtime verfügbar ist. Ja nach Framework-Studio-Anwendung kann es ggf. weitere Einschränkungen geben. Windows 10 Windows 8.1 Windows 8 Windows 7 SP1 Windows Vista SP2 Windows Server 2012 Windows Server 2008 Ubuntu Linux Mac OS X 10.9 Weitere Software Java-Runtime Crystal Reports Designer - sofern Reports bearbeitet werden sollen Je nach Framework-Studio-Anwendung ggf. weitere Software Java-Runtime Die Java Laufzeit-Umgebung wird benötigt am Client-Rechner und auf dem Entwicklungs-Rechner zur Ausführung der Anwendung. Java 8 Crystal Reports Runtime Diese Runtime wird benötigt auf dem Anwendungs-Server, dem Print-Service und dem Entwicklungs-Rechner. SAP Crystal Reports Runtime engine for .NET Framework 13.0.9 oder höher. Bei 64Bit-Betriebssystemen muss die 64Bit-Version der Runtime verwendet werden. Crystal Reports Designer Der Crystal Reports Designer wird für die Bearbeitung der Crystal Reports auf dem Entwicklungs-Rechner benötigt und sofern erforderlich auch auf dem Client-Rechner. Crystal Reports 2008 Datenbank-Server Microsoft SQL Server 2014 (Standard / Enterprise / BI) Microsoft SQL Server 2012 SP1 (Standard / Enterprise / BI) Microsoft SQL Server 2008 R2 SP2 (Standard / Enterprise / Datacenter) Microsoft SQL Server 2008 SP3 (Standard / Enterprise / Datacenter) Die Express- und Developer-Editionen des SQL Server können zu Entwicklungs- und Test-Zwecken eingesetzt werden. Dabei sind aber entsprechende funktionale und lizenzrechtliche Einschränkungen seitens Microsoft zu beachten. Der Einsatz erfolgt auf eigene Verantwortung. Oracle 12c (Standard / Enterprise) Oracle 11gR2 (Standard / Enterprise) Oracle 11g (Standard / Enterprise) Oracle-Client Tip Es wird der Einsatz des Oracle Managed Providers empfohlen. Dieser ist bereits in allen Framework-Studio enthalten. Es ist keine separate Oracle-Client Software nötig. Für die Verwendung des Oracle ODP Providers muss ein Oracle-Client installiert werden: Oracle Client 12.1.0.1+ mit Oracle Data Provider for .NET 4 Oracle Client 11.2.0.3+ mit Oracle Data Provider for .NET 4 Die Version des Oracle Client sollte möglichst zur Version des Datenbank-Servers passen, ansonsten kann es zu Performanceeinbußen kommen."
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.FileFlavorData.FileType.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.FileFlavorData.FileType.html",
    "title": "Enum FileFlavorData.FileType",
    "keywords": "Enum FileFlavorData.FileType Der Dateityp, der Verzeichnis oder Datei ist. Namespace : FrameworkSystems.FrameworkBase.DragAndDrop Assembly : FrameworkSystems.FrameworkBase.dll Syntax public enum FileType Fields Name Description Directory Ordner / Verzeichnis. File Datei."
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseMode.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseMode.html",
    "title": "Enum FrameworkCloseMode",
    "keywords": "Enum FrameworkCloseMode Definiert den Modus mit dem die Application beendet werden soll. Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax [Flags] public enum FrameworkCloseMode Fields Name Description Close KeepUserLogin Restart"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.FlavorData.FillOnDrop.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.FlavorData.FillOnDrop.html",
    "title": "Method FillOnDrop",
    "keywords": "Method FillOnDrop FillOnDrop() Durch das Aufrufen der Methode im OnCanDrop Eventhandler wird das System darüber informiert, dass im OnDrop alle zu diesem Flavor zur Verfügung stehenden Daten gefüllt werden sollen. Declaration public virtual void FillOnDrop() Remarks Hintergrund: Einige Datenformate bringen unter Umständen sehr große Datenmengen mit sich. Beispielsweise können Dateien sehr groß sein. Daher werden beim ersten Request des Clients ( OnCanDrop ) nur Informationen wie der Speicherort, Name, Größe usw. übertragen und nur dann, wenn der Inhalt tatsächlich im OnDrop benötigt wird (und deshalb FillOnDrop() aufgerufen wurde), werden die ggf. großen Daten ausgelesen und übertragen."
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.FlavorData.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.FlavorData.html",
    "title": "Class FlavorData",
    "keywords": "Class FlavorData Die Daten, welche am externen Transferobjekt ( ExternalTransferObject ) bei einem Drag&Drop-Vorgang in einem bestimmten Format ( FlavorType ) angeboten werden, werden immer in einem Objekt verpackt, das eine Spezialisierung der abstrakten Klasse FlavorData darstellt. Inheritance System.Object FlavorData FileListFlavorData ImageFlavorData TextFlavorData Namespace : FrameworkSystems.FrameworkBase.DragAndDrop Assembly : FrameworkSystems.FrameworkBase.dll Syntax public abstract class FlavorData Remarks Die Klasse bietet die Methode FillOnDrop() . Durch den Aufruf dieser Methode wird gesteuert, dass beim Drop-Vorgang alle Daten vollständig gefüllt werden sollen. Methods FillOnDrop() Durch das Aufrufen der Methode im OnCanDrop Eventhandler wird das System darüber informiert, dass im OnDrop alle zu diesem Flavor zur Verfügung stehenden Daten gefüllt werden sollen. See Also FileFlavorData FileListFlavorData ImageFlavorData TextFlavorData UriListFlavorData"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.html",
    "title": "Namespace FrameworkSystems.FrameworkBase.DragAndDrop",
    "keywords": "Namespace FrameworkSystems.FrameworkBase.DragAndDrop Classes ExternalTransferObject Ein Objekt dieser Klasse wird in den Events OnCanDrop und OnDrop (Drag&Drop Events) als TransferObject in den Eventparametern übergeben, wenn der Drag&Drop-Vorgang von außerhalb der Applikation in die Applikation hinein ausgelöst wurde. FileFlavorData Diese Klasse stellt eine einzelne Datei dar, die in einem externen Drag&Drop-Vorgang transportiert wird. Eine einzelne Datei ist immer ein Element einer Liste von Dateien ( FileListFlavorData ). FileListFlavorData Diese Klasse stellt bei einem Drag&Drop-Vorgang die Liste der transportierten Dateien dar. Die Klasse ist enumerierbar ( IEnumerator<FileFlavorData> ) und eine Spezialisierung von FlavorData . FlavorData Die Daten, welche am externen Transferobjekt ( ExternalTransferObject ) bei einem Drag&Drop-Vorgang in einem bestimmten Format ( FlavorType ) angeboten werden, werden immer in einem Objekt verpackt, das eine Spezialisierung der abstrakten Klasse FlavorData darstellt. FlavorType Wenn bei einem Drag&Drop-Vorgang Daten von außerhalb der Applikation in die Applikation hinein gezogen werden, so wird in den Events OnCanDrop und OnDrop ( Drag&Drop Events) ein TransferObject vom Typ ExternalTransferObject ( ExternalTransferObject ) zur Verfügung gestellt. An diesem externen Transferobjekt können alle Datenformate und die dazugehörigen Daten abgerufen werden. ImageFlavorData Diese Klasse stellt bei einem Drag&Drop-Vorgang das transportierte Bild dar. TextFlavorData Diese Klasse stellt bei einem Drag&Drop-Vorgang einen Text dar. UriListFlavorData Diese Klasse stellt bei einem Drag&Drop-Vorgang eine Liste von URIs (Uniform Resource Identifier) dar. Enums FileFlavorData.FileType Der Dateityp, der Verzeichnis oder Datei ist."
  },
  "api/FrameworkSystems.FrameworkBase.html": {
    "href": "api/FrameworkSystems.FrameworkBase.html",
    "title": "Namespace FrameworkSystems.FrameworkBase",
    "keywords": "Namespace FrameworkSystems.FrameworkBase Classes BrowserCommand Bei einem Link, der im Browser-Control angeklickt wird, können Link-Kommandos mit Parametern hinterlegt werden, die vom Broker ausgewertet werden. Diese Klasse stellt Konstanten und Methoden bereit, um solche Link-Kommandos zu erstellen und auszuwerten. FrameworkProgress Mit Hilfe eines FrameworkProgress Objektes kann der Client über einen längeren Vorgang auf dem Server informiert werden. Dabei erscheint ein Fortschrittsbalken (engl. progress bar). Die Aktualisierung dessen erfolgt nicht in Echtzeit, da der Client diesbezüglich in kurzen, zeitlichen Abständen Anfragen an den Server schickt. Enums AUPermissionType Kann z.B. in Granted(AccessUnit, AUPermissionType) verwendet werden."
  },
  "api/FrameworkSystems.FrameworkStudio.DevFormBase.EventTab.FrameworkOnLinkClickEventArgs.GetArgumentFSlong.html": {
    "href": "api/FrameworkSystems.FrameworkStudio.DevFormBase.EventTab.FrameworkOnLinkClickEventArgs.GetArgumentFSlong.html",
    "title": "Method GetArgumentFSlong",
    "keywords": "Method GetArgumentFSlong GetArgumentFSlong(String) Declaration public FSlong GetArgumentFSlong(string key) Parameters Type Name Description System.String key Returns Type Description FrameworkSystems.FrameworkBase.Metadatatype.FSlong"
  },
  "api/FrameworkSystems.FrameworkStudio.DevFormBase.EventTab.FrameworkOnLinkClickEventArgs.html": {
    "href": "api/FrameworkSystems.FrameworkStudio.DevFormBase.EventTab.FrameworkOnLinkClickEventArgs.html",
    "title": "Class FrameworkOnLinkClickEventArgs",
    "keywords": "Class FrameworkOnLinkClickEventArgs TODO: muss noch genauer beschrieben werden Inheritance System.Object System.EventArgs FrameworkSystems.FrameworkStudio.DevFormBase.EventTab.FrameworkEventArgs FrameworkOnLinkClickEventArgs Namespace : FrameworkSystems.FrameworkStudio.DevFormBase.EventTab Assembly : FrameworkSystems.FrameworkStudio.DevFormBase.dll Syntax public class FrameworkOnLinkClickEventArgs : FrameworkEventArgs Methods GetArgumentFSlong(String)"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.ExternalTransferObject.GetSupportedFlavorTypes.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.ExternalTransferObject.GetSupportedFlavorTypes.html",
    "title": "Method GetSupportedFlavorTypes",
    "keywords": "Method GetSupportedFlavorTypes GetSupportedFlavorTypes() Gibt alle Datenformate zurück, zu denen Daten abgerufen werden können. Declaration public IEnumerable<string> GetSupportedFlavorTypes() Returns Type Description System.Collections.Generic.IEnumerable < System.String >"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.ExternalTransferObject.GetSupportedTextFlavorTypes.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.ExternalTransferObject.GetSupportedTextFlavorTypes.html",
    "title": "Method GetSupportedTextFlavorTypes",
    "keywords": "Method GetSupportedTextFlavorTypes GetSupportedTextFlavorTypes() Gibt alle Textformate zurück, zu denen Daten abgerufen werden können. Declaration public IEnumerable<string> GetSupportedTextFlavorTypes() Returns Type Description System.Collections.Generic.IEnumerable < System.String >"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.ExternalTransferObject.IsFlavorTypeSupported.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.ExternalTransferObject.IsFlavorTypeSupported.html",
    "title": "Method IsFlavorTypeSupported",
    "keywords": "Method IsFlavorTypeSupported IsFlavorTypeSupported(String) Gibt zurück, ob Daten zum angegebenen Format abgerufen werden können. Declaration public bool IsFlavorTypeSupported(string flavorType) Parameters Type Name Description System.String flavorType Returns Type Description System.Boolean"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.ExternalTransferObject.GetFlavorData.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.ExternalTransferObject.GetFlavorData.html",
    "title": "Method GetFlavorData",
    "keywords": "Method GetFlavorData GetFlavorData(String) Wenn zu dem angegebenen Datenformat Daten abgerufen werden können, so werden diese (als Spezialisierung von FlavorData ) zurückgegeben, andernfalls null . Declaration public FlavorData GetFlavorData(string flavorType) Parameters Type Name Description System.String flavorType Returns Type Description FlavorData"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.ExternalTransferObject.GetTextFlavorData.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.ExternalTransferObject.GetTextFlavorData.html",
    "title": "Method GetTextFlavorData",
    "keywords": "Method GetTextFlavorData GetTextFlavorData(String) Gibt die Daten zum angegebenen Textformat zurück, falls abrufbar, ansonsten null . Declaration public TextFlavorData GetTextFlavorData(string textFlavorType) Parameters Type Name Description System.String textFlavorType Returns Type Description TextFlavorData"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.ExternalTransferObject.GetBestTextFlavorType.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.ExternalTransferObject.GetBestTextFlavorType.html",
    "title": "Method GetBestTextFlavorType",
    "keywords": "Method GetBestTextFlavorType GetBestTextFlavorType() Gibt das erste Textformat aus der folgenden Prioritätenliste zurück. Declaration public string GetBestTextFlavorType() Returns Type Description System.String Remarks Zu dem Daten zur Verfügung gestellt werden: TextXml TextHtml TextUriList TextPlain Ein unbekanntes Textformat, soweit eines unterstützt wird null , falls gar kein Textformat unterstützt wird"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.ExternalTransferObject.GetBestTextFlavorData.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.ExternalTransferObject.GetBestTextFlavorData.html",
    "title": "Method GetBestTextFlavorData",
    "keywords": "Method GetBestTextFlavorData GetBestTextFlavorData() Gibt die Daten zu dem mit der Methode GetBestTextFlavorType() ermittelten Textformat ( TextFlavorData ) zurück. Wenn kein Textformat unterstützt wird, wird null zurück gegeben. Declaration public TextFlavorData GetBestTextFlavorData() Returns Type Description TextFlavorData"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkApplicationException.Severity.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkApplicationException.Severity.html",
    "title": "Property Severity",
    "keywords": "Property Severity Severity Definiert den Schweregrad der Exception. Declaration public int Severity { get; } Property Value Type Description System.Int32 Remarks Diese Information wird momentan nicht ausgewertet."
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkApplicationException.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkApplicationException.html",
    "title": "Class FrameworkApplicationException",
    "keywords": "Class FrameworkApplicationException Exceptions die vom Framework geworfen werden und einen erwarteten Fehler darstellen sollten von dieser Klasse sein. Der Broker gibt diese dann als Fehler ohne StackTrace an den Client weiter. Inheritance System.Object System.Exception System.ApplicationException FrameworkApplicationException Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax [Serializable] public class FrameworkApplicationException : ApplicationException, ISerializable, _Exception Constructors FrameworkApplicationException(String) FrameworkApplicationException(String, Exception) FrameworkApplicationException(String, Int32) FrameworkApplicationException(String, Int32, Exception) Properties Severity Definiert den Schweregrad der Exception."
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.TextFlavorData.Text.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.TextFlavorData.Text.html",
    "title": "Property Text",
    "keywords": "Property Text Text Gibt im OnDrop Eventhandler den Text zurück, wenn im OnCanDrop Eventhhandler FillOnDrop() aufgerufen wurde. Declaration public virtual string Text { get; protected set; } Property Value Type Description System.String Remarks Lediglich die Texte in den Formaten TextPlain und TextUriList werden schon im OnCanDrop gefüllt."
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.TextFlavorData.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.TextFlavorData.html",
    "title": "Class TextFlavorData",
    "keywords": "Class TextFlavorData Diese Klasse stellt bei einem Drag&Drop-Vorgang einen Text dar. Inheritance System.Object FlavorData TextFlavorData UriListFlavorData Inherited Members FlavorData.FillOnDrop() Namespace : FrameworkSystems.FrameworkBase.DragAndDrop Assembly : FrameworkSystems.FrameworkBase.dll Syntax public class TextFlavorData : FlavorData Remarks In einem Drag&Drop-Vorgang können mehrere TextFlavorData Objekte (zu unterschiedlichen Textformaten) enthalten sein. Properties Text Gibt im OnDrop Eventhandler den Text zurück, wenn im OnCanDrop Eventhhandler FillOnDrop() aufgerufen wurde."
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.ImageFlavorData.ImageByteArray.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.ImageFlavorData.ImageByteArray.html",
    "title": "Property ImageByteArray",
    "keywords": "Property ImageByteArray ImageByteArray Gibt im OnDrop Eventhandler das Bild im PNG-Format zurück, wenn im OnCanDrop Eventhandler FillOnDrop() aufgerufen wurde. Declaration public byte[] ImageByteArray { get; } Property Value Type Description System.Byte []"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.ImageFlavorData.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.ImageFlavorData.html",
    "title": "Class ImageFlavorData",
    "keywords": "Class ImageFlavorData Diese Klasse stellt bei einem Drag&Drop-Vorgang das transportierte Bild dar. Inheritance System.Object FlavorData ImageFlavorData Inherited Members FlavorData.FillOnDrop() Namespace : FrameworkSystems.FrameworkBase.DragAndDrop Assembly : FrameworkSystems.FrameworkBase.dll Syntax public class ImageFlavorData : FlavorData Properties ImageByteArray Gibt im OnDrop Eventhandler das Bild im PNG-Format zurück, wenn im OnCanDrop Eventhandler FillOnDrop() aufgerufen wurde."
  },
  "api/FrameworkSystems.FrameworkBase.GlobalObj.html": {
    "href": "api/FrameworkSystems.FrameworkBase.GlobalObj.html",
    "title": "Namespace FrameworkSystems.FrameworkBase.GlobalObj",
    "keywords": "Namespace FrameworkSystems.FrameworkBase.GlobalObj Interfaces IGlobalObjects Das GlobalObject ist von überall auf mit this.Global zu erreichen. Am GlobalObject werden alle Session-Daten verwaltet und Session-Funktionen angeboten."
  },
  "api/FrameworkSystems.FrameworkExceptions.RowVersionInvalidException.-ctor.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.RowVersionInvalidException.-ctor.html",
    "title": "Constructor RowVersionInvalidException",
    "keywords": "Constructor RowVersionInvalidException RowVersionInvalidException(String) Declaration public RowVersionInvalidException(string caption) Parameters Type Name Description System.String caption RowVersionInvalidException(String, Exception) Declaration public RowVersionInvalidException(string caption, Exception ex) Parameters Type Name Description System.String caption System.Exception ex"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.FileListFlavorData.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.FileListFlavorData.html",
    "title": "Class FileListFlavorData",
    "keywords": "Class FileListFlavorData Diese Klasse stellt bei einem Drag&Drop-Vorgang die Liste der transportierten Dateien dar. Die Klasse ist enumerierbar ( IEnumerator<FileFlavorData> ) und eine Spezialisierung von FlavorData . Inheritance System.Object FlavorData FileListFlavorData Inherited Members FlavorData.FillOnDrop() Namespace : FrameworkSystems.FrameworkBase.DragAndDrop Assembly : FrameworkSystems.FrameworkBase.dll Syntax public class FileListFlavorData : FlavorData, IEnumerable<FileFlavorData>, IEnumerable Remarks Die Enumeration enthält (auch im Event OnCanDrop ) immer mindestens ein Objekt vom Typ FileFlavorData . Properties Count Gibt die Anzahl der enthaltenen Dateien zurück. Methods GetEnumerator() Gibt einen Enumerator zum Iterieren durch die enthaltenen Dateien zurück."
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.UriListFlavorData.Count.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.UriListFlavorData.Count.html",
    "title": "Property Count",
    "keywords": "Property Count Count Gibt die Anzahl der enthaltenen URIs zurück. Declaration public int Count { get; } Property Value Type Description System.Int32"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.UriListFlavorData.Text.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.UriListFlavorData.Text.html",
    "title": "Property Text",
    "keywords": "Property Text Text Wenn der Drag&Drop-Vorgang nur eine URI enthält, gibt dieses Property genau diese URI zurück. Andernfalls ist die Eigenschaft undefiniert. Declaration public override string Text { get; protected set; } Property Value Type Description System.String Overrides TextFlavorData.Text"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.UriListFlavorData.GetEnumerator.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.UriListFlavorData.GetEnumerator.html",
    "title": "Method GetEnumerator",
    "keywords": "Method GetEnumerator GetEnumerator() Gibt einen Enumerator zum Iterieren durch die enthaltenen URIs zurück. Declaration public IEnumerator<string> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.String > Examples UriListFlavorData oUriListFlavorData = oExternalTransferObject.GetUriListFlavordata(); foreach (string sUri in oUriListFlavorData) { // ... }"
  },
  "api/FrameworkSystems.FrameworkBase.DragAndDrop.UriListFlavorData.html": {
    "href": "api/FrameworkSystems.FrameworkBase.DragAndDrop.UriListFlavorData.html",
    "title": "Class UriListFlavorData",
    "keywords": "Class UriListFlavorData Diese Klasse stellt bei einem Drag&Drop-Vorgang eine Liste von URIs (Uniform Resource Identifier) dar. Inheritance System.Object FlavorData TextFlavorData UriListFlavorData Inherited Members FlavorData.FillOnDrop() Namespace : FrameworkSystems.FrameworkBase.DragAndDrop Assembly : FrameworkSystems.FrameworkBase.dll Syntax public class UriListFlavorData : TextFlavorData, IEnumerable<string>, IEnumerable Remarks Die Klasse ist enumerierbar ( IEnumerator<String> ). Diese Klasse ist eine Spezialisierung von TextFlavorData , da der URI-Listen-Flavor ein spezieller Text-Flavor ist. Properties Count Gibt die Anzahl der enthaltenen URIs zurück. Text Wenn der Drag&Drop-Vorgang nur eine URI enthält, gibt dieses Property genau diese URI zurück. Andernfalls ist die Eigenschaft undefiniert. Methods GetEnumerator() Gibt einen Enumerator zum Iterieren durch die enthaltenen URIs zurück."
  },
  "api/FrameworkSystems.FrameworkBase.FrameworkProgress.-ctor.html": {
    "href": "api/FrameworkSystems.FrameworkBase.FrameworkProgress.-ctor.html",
    "title": "Constructor FrameworkProgress",
    "keywords": "Constructor FrameworkProgress FrameworkProgress(IGlobalObjects) Der Konstruktor nimmt das Objekt this.Global ( IGlobalObjects ) entgegen, wodurch die aktuelle Client-Session zugeordnet werden kann. Declaration public FrameworkProgress(IGlobalObjects global) Parameters Type Name Description IGlobalObjects global"
  },
  "api/FrameworkSystems.FrameworkBase.FrameworkProgress.Id.html": {
    "href": "api/FrameworkSystems.FrameworkBase.FrameworkProgress.Id.html",
    "title": "Property Id",
    "keywords": "Property Id Id Ein Global Unique Identifier, mit dem das FrameworkProgress Objekt eindeutig identifiziert werden kann. Declaration public guid Id { get; } Property Value Type Description FrameworkSystems.FrameworkDataProvider.BaseObjects.guid"
  },
  "api/FrameworkSystems.FrameworkBase.FrameworkProgress.CanCancel.html": {
    "href": "api/FrameworkSystems.FrameworkBase.FrameworkProgress.CanCancel.html",
    "title": "Property CanCancel",
    "keywords": "Property CanCancel CanCancel Wenn diese Eigenschaft true ist, wird im Client ein Button zum Abbrechen des Vorgangs angezeigt. Betätigt der Nutzer diesen Button, so ist die Eigenschaft Canceled auf true . Declaration public bool CanCancel { get; set; } Property Value Type Description System.Boolean"
  },
  "index.html": {
    "href": "index.html",
    "title": "Framework Studio 4.0",
    "keywords": "Framework Studio 4.0 Note Diese Dokumentation befindet sich noch im Aufbau. Diese Seite gliedert sich in folgende Teile: Technische Dokumentation Api-Dokumentation Andere Versionen können hier aufgerufen werden."
  },
  "doc/tables/ml_config.html": {
    "href": "doc/tables/ml_config.html",
    "title": "ML_Config (Business-Datenbank)",
    "keywords": "ML_Config (Business-Datenbank) Die ML-Columns arbeiten standardmäßig mit der Default-Sprache de Deutsch. Ist die \"führende\" Sprache nicht de , dann kann über diese Tabelle die korrekte Default-Sprache eingestellt werden. Das geschieht in der Business-Datenbank, wo auch die Übersetzungs-Tabelle dbRun_MLStrings abgelegt ist, welche die anderssprachigen Werte speichert. Die Einstellung muss in dieser Datenbank stehen, damit sichergestellt ist, dass die Übersetzungs-Tabelle immer mit derselben Konfiguration angesprochen wird - unabhängig davon, wie die Anwendung FS-seitig konfiguriert ist. Die Tabelle muss bei Bedarf manuell per SQL angelegt werden. Dazu können die folgenden Scripte verwendet werden. Das Iso-Sprach-Kürzel de muss entsprechend durch das gewünschte Iso-Sprach-Kürzel ersetzt werden. -- SQL-Server CREATE TABLE ML_CONFIG ( CONFIG_KEY VARCHAR(10) NOT NULL, DEFAULT_LANGUAGE VARCHAR(2), CONSTRAINT PK_ML_CONFIG PRIMARY KEY CLUSTERED (CONFIG_KEY) ); INSERT INTO ML_CONFIG (CONFIG_KEY, DEFAULT_LANGUAGE) values ('!!!!!', 'de'); -- Oracle CREATE TABLE ML_CONFIG ( CONFIG_KEY VARCHAR2(10) NOT NULL, DEFAULT_LANGUAGE VARCHAR2(2) NULL, CONSTRAINT PK_ML_CONFIG PRIMARY KEY (CONFIG_KEY) ); INSERT INTO ML_CONFIG (CONFIG_KEY, DEFAULT_LANGUAGE) values ('!!!!!', 'de'); Caution Wenn die Konfiguration geändert wurde, dann müssen die Anwendungs-Broker und FS-Services neu gestartet werden, weil diese Informationen aus Performance-Gründen zwischengespeichert werden. Die Konfiguration darf nicht nachträglich geändert werden, weil ansonsten die in der Übersetzungs-Tabelle abgelegten Texte nicht mehr stimmen. Wenn die Konfiguration zu Beginn bei Einrichtung der Business-Datenbank vorgenommen wird, dann muss im Anschluss sichergestellt werden, dass die Tabelle dbRun_MLStrings leer ist. Wenn bei einer Änderung der Konfiguration doch dbRun_MLStrings -Inhalte erhalten bleiben sollen, müssen alle Einträge, für die neue Default-Sprache gelöscht werden."
  },
  "doc/sql/datum-funktionen.html": {
    "href": "doc/sql/datum-funktionen.html",
    "title": "Datums-Funktionen",
    "keywords": "Datums-Funktionen GETDATE ( ) Liefert das aktuelle Datum auf dem Datenbank-Server. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server GETDATE ( ) Oracle SYSDATE GETUTCDATE ( ) Liefert die aktuelle Weltzeit (UTC) auf dem Datenbank-Server. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server GETUTCDATE ( ) Oracle CAST(sys_extract_utc(systimestamp) AS TIMESTAMP) ADD_DAYS ( <Date Expression>, <Days> ) Addiert die übergebenen Tage zu einem Datum/Zeit-Ausdruck. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server DATEADD ( DAY, <Days>, <Date Expression> ) Oracle <Date Expression> + <Days> ADD_MINUTES ( <Date Expression>, <Minutes> ) Addiert die übergebenen Minuten zu einem Datum/Zeit-Ausdruck. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server DATEADD ( MINUTE, <Minutes>, <Date Expression> ) Oracle <Date Expression> + ( <Minutes> / 1440 ) ADD_MONTHS ( <Date Expression>, <Months> ) Addiert die übergebenen Monate zu einem Datum/Zeit-Ausdruck. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server DATEADD ( MONTH, <Months>, <Date Expression> ) Oracle ADD_MONTHS ( <Date Expression>, <Months> ) DAYS_BETWEEN (<Start-Date>, <End-Date>) Liefert die Anzahl der ganzen Tage zwischen 2 Datums-Werten. Wenn das Start-Datum größer ist als das End-Datum, dann werden negative Werte zurückgegeben. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server DATEDIFF ( DAY, <Start-Date>, <End-Date> ) Oracle TRUNC ( <End-Date> - <Start-Date> ) MONTHS_BETWEEN (<Start-Date>, <End-Date>) Liefert die Anzahl der ganzen Monate zwischen 2 Datums-Werten. Wenn das Start-Datum größer ist als das End-Datum, dann werden negative Werte zurückgegeben. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server DATEDIFF (MONTH, <Start-Date>, <End-Date>) Oracle MONTHS_BETWEEN (<End-Date>, <Start-Date>) YEAR ( <Date Expression> ) Liefert eine 4-stellige Zahl, die dem Jahr des Datum/Zeit-Wertes entspricht. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server YEAR ( <Date Expression> ) Oracle EXTRACT ( YEAR FROM <Date Expression> ) MONTH ( <Date Expression> ) Liefert eine Zahl, die dem Monat des Datum/Zeit-Wertes entspricht. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server MONTH ( <Date Expression> ) Oracle EXTRACT ( MONTH FROM <Date Expression> ) DAY ( <Date Expression> ) Liefert eine Zahl, die dem Tag (Tag des Monats) des Datum/Zeit-Wertes entspricht. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server DAY ( <Date Expression> ) Oracle EXTRACT ( DAY FROM <Date Expression> ) HOUR ( <Date Expression> ) Liefert eine Zahl, die der Stunde des Datum/Zeit-Wertes entspricht. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server DATEPART ( HOUR, <Date Expression> ) Oracle TO_NUMBER ( TO_CHAR ( <Date Expression>, 'HH24' ) ) MINUTE ( <Date Expression> ) Liefert eine Zahl, die der Minute des Datum/Zeit-Wertes entspricht. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server DATEPART ( MINUTE, <Date Expression> ) Oracle TO_NUMBER ( TO_CHAR ( <Date Expression>,'MI' ) ) SECOND ( <Date Expression> ) Liefert eine Zahl, die der Sekunde des Datum/Zeit-Wertes entspricht. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server DATEPART ( SECOND, <Date Expression> ) Oracle TO_NUMBER ( TO_CHAR ( <Date Expression>, 'SS' ) )"
  },
  "doc/sql/cast-funktionen.html": {
    "href": "doc/sql/cast-funktionen.html",
    "title": "Umwandlungsfunktionen",
    "keywords": "Umwandlungsfunktionen CHAR_TO_DATE ( <Expression>, <format-Number>) Wandelt eine Zeichen-Kette in ein Datum um. Dabei wird das angegebene Format verwendet. Die Format-Nummer muss als konstante Zahl übergeben werden. Sie kann folgende Werte haben: Number Format YY Format YYYY 1 / 101 MM/DD/YY MM/DD/YYYY 2 / 102 YY/MM/DD YYYY/MM/DD 3 / 103 DD/MM/YY DD/MM/YYYY 4 / 104 DD.MM.YY DD.MM.YYYY 5 / 105 DD-MM-YY DD-MM-YYYY 6 / 106 DD MM YYY DD MM YYYY 7 / 107 Mon DD, YY Mon DD, YYYY 8 / 108 hh:mm:ss (24h) 10 / 110 MM-DD-YY MM-DD-YYYY 11 / 111 YY/MM/DD YYYY/MM/DD 12 / 112 YYMMDD YYYYMMDD 20 / 120 YYYY-MM-DD hh:mm:ss (24h) DATE_TO_CHAR ( <date Expression>, <format-Number> ) Wandelt ein Datum in eine Zeichenkette um. Die Format-Nummer arbeitet wie bei der Funktion CHAR_TO_DATE. NUMBER_TO_CHAR ( <Number Expression>, <Decimals>) Wandelt eine Dezimal-Zahl in einen Text um. Dabei wird die Zahl auf die übergebene Anzahl von Dezimal-Stellen gerundet bzw. abgeschnitten. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server CAST ( ROUND ( <Number Expression>, <Decimals> ) AS VARCHAR ) Oracle LTRIM ( TO_CHAR (<Number Expression>, '99999999999999999999999999999999.9999' ) ) Die Anzahl der Nachkommastellen ist gleich <Decimals> INT_TO_CHAR ( <Number Expression>) Wandelt eine Ganzzahl in einen Text um. Bei einer Dezimal-Zahl wird gerundet bzw. es werden die Dezimal-Stellen abgeschnitten. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server CAST ( ROUND ( <Number Expression>, 0 ) AS VARCHAR ) Oracle LTRIM ( TO_CHAR (<Number Expression>, '99999999999999999999999999999999' ) ) CHAR_TO_DECIMAL ( <Expression> ) Wandelt eine Zeichenkette in eine Dezimal-Zahl um."
  },
  "doc/sql/alpha-funktionen.html": {
    "href": "doc/sql/alpha-funktionen.html",
    "title": "Alphanumerische Funktionen",
    "keywords": "Alphanumerische Funktionen LENGTH ( <text> ) Liefert die Länge des Ausdrucks LOWER ( <text> ) Text in Kleinbuchstaben. UPPER ( <text> ) Text in Großbuchstaben. LTRIM ( <text> ) Schneidet die linken Leerzeichen der Zeichenkette ab. RTRIM ( <text> ) Schneidet die rechten Leerzeichen der Zeichenkette ab. REPLACE ( <text>, <search text>, <replace text> ) Ersetzt im übergebenen Text den Search-Text durch Replace-Text. SUBSTRING ( <text>, <number start>, <number length> ) Gibt den Teil einer Zeichenkette zurück."
  },
  "doc/sql/aggr-funktionen.html": {
    "href": "doc/sql/aggr-funktionen.html",
    "title": "Aggregat-Funktionen",
    "keywords": "Aggregat-Funktionen COUNT ( <Expression> ) Liefert die Anzahl. MIN ( <Expression> ) Liefert das Minimum. MAX ( <Expression> ) Liefert das Maximum. SUM ( <Number Expression> ) Liefert den Summe. AVG ( <Number Expression> ) Liefert den Durchschnitt. VAR ( <Number Expression> ) Liefert die Varianz. STDEV ( <Number Expression> ) Liefert die Standardabweichung."
  },
  "doc/mdt/vererbung.html": {
    "href": "doc/mdt/vererbung.html",
    "title": "Vererbung von Metadatentypen",
    "keywords": "Vererbung von Metadatentypen Es ist möglich, Metadatentypen zu vererben. Das macht dann Sinn, wenn Metadatentypen aufeinander aufbauen und z.B. ein gemeinsames Format-Pattern verwenden. Sie können so in einem Basis-Metadatentyp mit allen Datentypen Controls und einem Default-Label definieren. Anschließend brauchen Sie diesen nur abzuleiten und die Ableitung hat die gleichen Eigenschaften wie die Basis. Dann können Sie noch z.B. das Label oder den Wertebereich ändern. In der Ableitung werden die nachträglich geänderten Werte fettgedruckt dargestellt. Eine Ableitung können Sie auf zwei Wegen erstellen: Einen Metadatentypen ableiten, indem Sie den Metadatentyp im Overview auswählen, den Button ( Derive ) drücken und in der Namespace-Auswahl angeben, in welchem Namespace die Ableitung angelegt werden soll. Einem vorhandenen Metadatentypen im Feld Base eine Basis (oder auch eine andere Basis) zuweisen. Warning Wird beim Ändern der Basis auch der Datentyp geändert, kann das evtl. Auswirkungen auf die Programmteile haben, die diesen Metadatentypen bereits verwenden. Unter Umständen lassen sich diese Programmteile nicht mehr kompilieren."
  },
  "doc/mdt/metadatentypen.html": {
    "href": "doc/mdt/metadatentypen.html",
    "title": "Metadatentypen",
    "keywords": "Metadatentypen Die Idee der Metadatentypen kommt daher, dass bestimmte Felder innerhalb einer Anwendung immer wieder auftauchen (z.B. Artikelnummer, Kundennummer, ...). Deshalb können solche Felder an einer zentralen Stelle definiert werden, was Fehler in der Felddefinition verhindert und Redundanzen minimiert. Dabei werden Informationen wie das Label, das Datenformat, das zugehörige Control, die mehrsprachige Bezeichnung usw. hinterlegt, so dass sich der Arbeitsaufwand bei der späteren Arbeit mit dem Metadatentypen minimiert. Sie erkennen Metadatentypen an einem - Icon vor der Bezeichnung. Metadatentypen bearbeiten Um einen Metadatatypen zu bearbeiten, doppelklicken Sie den entsprechenden Eintrag auf der Registerkarte Namespaces . Der Metadatentyp wird im Hauptfenster des Framework Designers angezeigt. Der Metadatentyp kann in verschiedenen Teilen der Anwendung zum Einsatz kommen: Er kann auf unterster Ebene der Spalte einer DBTable zugeordnet werden. Er kann in Components oder Forms als Datentyp für Properties verwendet werden. Deshalb nehmen Sie an einem Metadatentyp verschiedene Einstellungen vor: Name : Geben Sie die Bezeichnung des Metadatentyps an. Datatype Database : Benennen Sie den Datentyp der Spalte in der Datenbank. Datatype Application : Gibt den FS-Datentyp des Metadatentyps an. Dieser Datentyp wird später in den Components und Forms gezogen. Die folgende Tabelle zeigt, welche Database-Datentypen mit welchem Application-Datatype kombiniert werden können: FSbool FSbyte FSbyteArray FSDateTime FSdecimal FSdouble FSfloat FSint FSlong FSshort FSstring Binary X Boolean X Byte X Date X DateTime X Time X Double X Currency X X X Single X X X Decimal X X Big Int X Integer X X Smallint X X X Tiny Int X X X Ansi String X Long Varchar X String X null X X X X X X X X X X X Warning Wenn Sie die Datentypen nachträglich ändern, kann das evtl. Auswirkungen auf Programmteile haben, die diesen Metadatentypen bereits verwenden. Unter Umständen lassen sich diese Programmteile nicht mehr kompilieren. Die Einstellungen für Size, Precision und Scale hängen von der Auswahl des Datatype Database ab. Je nachdem, ob der Datenbank-Datentyp Zeichen, Ganzzahlen oder Gleitkommazahlen unterstützt, sind die Felder für Eingaben zugänglich. Size : Definiert die Feldlänge bei Zeichenfeldern. Precision : Anzahl der Stellen inkl. eventueller Nachkommastellen bei numerischen Feldern. Scale : Anzahl der Nachkommastellen bei Dezimal -Feldern. Format : Gibt das Anzeige-Format des Felds an. Das Format wirkt sich in der Darstellung des Felds auf einem Form aus. Format Pattern : Wird im Feld Format User Defined gewählt, ist es möglich hier selbst ein Format anzugeben. Es können Formate für Zahlen, Daten und Zeichenketten entsprechend der Standard-Definition für reguläre Ausdrücke eingegeben werden. Siehe auch Format-Pattern Registerkarte Description Hier kann eine Beschreibung des Metadatentyps eingegeben werden. Registerkarte Values Für einen Metadatentypen kann definiert werden, welche Werte er annehmen darf. Wird hier nichts angegeben, sind alle Werte möglich, die der entsprechend hinterlegte Datentyp zulässt. Es können mehrere Werte oder Wertebereiche angegeben werden. From : Gibt die untere Grenze eines Wertebereichs an. Warning Ist nur dieses Feld gefüllt (und To nicht), wird dies als Wert und nicht als Wertebereich angesehen. To : Gibt die obere Grenze eines Wertebereichs an. Button Add New Range : Mit dem Button Add New Range kann ein neuer Bereich hinzugefügt werden. Button Remove Range : Mit dem Button Remove Range kann ein Bereich gelöscht werden. Registerkarte Default Label Einem Metadatentypen kann ein Label zugewiesen werden. Dieses Label wird im Form links neben dem Control des Metadatentyps angezeigt. Das Label kann mehrsprachig hinterlegt werden. Tip Es ist möglich, dieses Label in den Components und im Form zu überschreiben. Registerkarte Control Types Die Registerkarte ControlTypes zeigt an, welche Controls später im Form zur Verfügung stehen sollen. Es ist möglich, einem Metadatentypen mehrere Controls zuzuordnen. Es kann aber maximal ein Control als Default gekennzeichnet sein. Das als Default gekennzeichnete Control wird zunächst angezeigt, wenn ein Property (welches diesen Metadatentypen verwendet) in ein Form gezogen wird. Das Default-Control kann dann auf weitere, hier hinterlegte Controls geändert werden. Diese Liste von Controls kann auch im DBTable oder in der einer Component ergänzt werden. Ist kein Control als Standard-Control hinterlegt, wird ein Editfeld angenommen. Mit dem Button Add wird ein neuer Control-Type hinzugefügt. Es öffnet sich das Fenster Assign Controls. In diesem Fenster sind alle Controls aufgelistet, einschließlich der Controls, die Sie in den Control Default Styles definieren können (siehe Kapitel Control Default Styles). Wählen Sie hier ein Control aus und setzen Sie ggf. die Checkbox is Default . Mit dem Button OK wird das Control der Liste hinzugefügt. Mit dem Button Change können Sie das Control ändern. Es öffnet sich wieder wie bei Add das Fenster Assign Controls . Sie können hier ein anderes Control auswählen und dann mit OK bestätigen. Mit dem Button Delete wird das markierte Control gelöscht."
  },
  "doc/mdt/format-pattern.html": {
    "href": "doc/mdt/format-pattern.html",
    "title": "Format-Pattern im Metadatentyp",
    "keywords": "Format-Pattern im Metadatentyp Je nachdem, welcher Datentyp ausgewählt wurde, ändern sich die Einstellungen für das Format-Pattern. Format Pattern für Zeichenketten Bei Zeichenketten können im Format reguläre Ausdrücke eingegeben werden. Die Zeichenketten müssen dann dem definierten regulären Ausdruck entsprechen. Im Java-Client wird bereits bei der Eingabe überprüft, ob die Zeichenkette dem Ausdruck genügt. Format-Pattern für Zahlen Bei Zahlen können gewöhnliche Zahlenformate eingegeben werden. Neben dem Feld Format-Pattern wird eine Beispiel-Zahl für das eingegebene Format dargestellt. Warning Es ist aber zu beachten, dass als Tausender-Trennzeichen das Komma und als Dezimal-Trennzeichen der Punkt dient. Gültige Formate wären z.B. #,##0.00 ergibt 1.234,56 0.00 ergibt 1.234,56 #,##0.00 ’EUR’ ergibt 1.234,56 EUR Format-Pattern für Datum Bei Datum können gewöhnliche Datum-Formate eingegeben werden. Neben dem Feld Format-Pattern wird als Beispiel das aktuelle Systemdatum entsprechend formatiert dargestellt. Der Button Default Values setzt die Werte auf die vom Framework Studio vorgegebenen Standardwerte zurück."
  },
  "doc/html-client/geraete-funktionen.html": {
    "href": "doc/html-client/geraete-funktionen.html",
    "title": "Gerätespezifische Funktionen",
    "keywords": "Gerätespezifische Funktionen Nachfolgend werden diejenigen Funktionen erläutert, die nur auf spezifischen Geräten verfügbar sind. Es ist nicht oder nur eingeschränkt möglich, vom Browser aus auf native Funktionen wie z.B. das Dateisystem zuzugreifen. Dadurch hat der HTML Client auf mobilen Geräten mehr Möglichkeiten als im Browser. Barcode Scanner (nur mobile Geräte) Über die in einem mobilen Gerät integrierte Kamera können im HTML Client Barcodes unterschiedlicher Formate eingescannt werden. Unterstützte Formate Name Beispiel AZTEC CODABAR CODE_39 CODE_93 CODE_128 DATA_MATRIX EAN_8 EAN_13 ITF PDF_417 QR_CODE UPC_A UPC_E Action ScanBarcode() In Framework Studio wird ein Scan über folgende Action am Form gestartet: ScanBarcode( Action<IFrameworkBarcodeScanInfo> callback, BarcodeFormat allowedFormat ) oder ScanBarcode( Action<IFrameworkBarcodeScanInfo> callback, BarcodeFormat allowedFormat, string identifier ) Beispiel: protected virtual void FE_btnScan_OnClick(FrameworkButtonClickEventArgs e) { this.ScanBarcode( this.ScanBarcodeCallback, BarcodeFormat.CODE_128 | BarcodeFormat.ITF, \"Article\" ); } Parameter Action callback Wenn der Scanvorgang am Client abgeschlossen ist, wird der übergebene Callback aufgerufen. Der Callback ist vom Typ Action<IFrameworkBarcodeScanInfo> IFrameworkBarcodeScanInfo Properties Property Typ Beschreibung Cancelled bool true wenn der Scanvorgang am Client abgebrochen wurde ErrorMessage string Fehlermeldung bei einem gescheiterten Scanvorgang Format BarcodeFormat Das Format des gescannten Barcodes HasError bool true wenn beim Scanvorgang ein Fehler aufgetreten ist Identifier string Der in ScanBarcode() übergebene Wert, sonst null Value string Der Wert des gescannten Barcodes Beispiel: public virtual void ScanBarcodeCallback(IFrameworkBarcodeScanInfo e) { this.Reset(); this.sIdentifier = e.Identifier; if (e.HasError) { this.sValue = e.ErrorMessage; } else if (e.Cancelled) { this.sValue = \"Cancelled\"; } else { this.sValue = e.Value; this.sFormat = e.Format.ToString(); } } Parameter BarcodeFormat allowedFormat Definiert, welches Barcode-Format am Client bei einem Scanvorgang unterstützt wird. Note Es wird dringend empfohlen, nur diejenigen Barcode-Formate zu übergeben, die auch tatsächlich beim Scanvorgang unterstützt werden sollen, um Fehler beim Scannen zu vermeiden. Je geringer die Anzahl der unterstützten Formate ist, desto unwahrscheinlicher ist es, dass der Scan fehlschlägt. Beispiel: Wenn am Client z.B. CODE_128 und ITF unterstützt werden soll, so können diese per bitweiser Oder-Verknüpfung übergeben werden. protected virtual void FE_btnScan_OnClick(FrameworkButtonClickEventArgs e) { this.ScanBarcode( this.ScanBarcodeCallback, BarcodeFormat.CODE_128 | BarcodeFormat.ITF, \"Article\" ); } Parameter string identifier Es kann vorkommen, dass auf einem Form mehrere Buttons einen Scan initiieren können. Beispielsweise könnte erst ein Auftrag und nachfolgend eine Menge eingescannt werden. Es ist aber oft nicht praktikabel, für jeden Scanvorgang einen separaten Callback zu implementieren. Anstatt dessen kann der ScanBarcode() -Action einfach ein beliebiger string mitgegeben werden, über den der Scanvorgang im Callback identifiziert werden kann. Beispiel: public virtual void ScanBarcodeCallback(IFrameworkBarcodeScanInfo e) { this.Reset(); this.sIdentifier = e.Identifier; if (e.HasError) { this.sValue = e.ErrorMessage; } else if (e.Cancelled) { this.sValue = \"Cancelled\"; } else { if (e.Identifier == \"Article\") { this.sArticle = e.Value; } else { this.sAmount = e.Value; } this.sFormat = e.Format.ToString(); } } Berechtigung für Kamera Der Barcode Scanner benötigt auf dem mobilen Gerät Zugriff auf die Kamera. Diese muss z.B. auf einem Android-Gerät einmalig erteilt werden:"
  },
  "doc/application/application.html": {
    "href": "doc/application/application.html",
    "title": "Application",
    "keywords": "Application"
  },
  "doc/allgemein/options.html": {
    "href": "doc/allgemein/options.html",
    "title": "Options",
    "keywords": "Options Die Options können in der IDE über den Menüeintrag Tools / Options geöffnet werden. IDE (Registerkarte) Appearance Error Display : Wird die Checkbox Legacy Error Window gesetzt, kann erzwungen werden, dass die Errors in derselben Art und Weise ausgegeben werden, wie es bis Framework Studio 2.6 der Fall war. Background Image : Wird die Checkbox Disable gesetzt, wird in der Framework Studio Umgebung kein Hintergrundbild mehr angezeigt. Dies kann zu einer Performancesteigerung bei Remote Sessions beitragen (z.B. VNC). Documentation Indicators : Zeigt an den Controls im Form-Designer an, ob eine Dokumentation gepflegt ist, bzw vererbt wurde. Show form designer grid : Gibt an, ob im Form-Designer das Raster-Grid angezeigt werden soll. Bei der Arbeit über Remote Desktop kann dieses Grid die Performance sehr stark verschlechtern. Code Editor Font Family : Hier können Schriftart und -größe für den Code-Editor angepasst werden. Context Tooltip : Gibt an, ob im Code-Editor Informationen zu Elementen angezeigt werden sollen, wenn mit der Maus auf Code-Teile gezeigt wird. Compile / Debug (Registerkarte) Application Pool : Gibt den Application-Pool im IIS an, in dem der Development-Broker laufen soll. Beim Starten von Applications aus Framework Studio heraus werden im IIS automatisch virtuelle Verzeichnisse erzeugt. Diesen wird der hier angegebene Application-Pool zugewiesen. Broker Rootdirectory : Gibt an, unter welchem Ordner Framework Studio die Verzeichnisse für den Development-Broker erzeugen soll. Diese Einstellung wird automatisch von Framework Studio gesetzt und kann nicht geändert werden. Broker Port : Standard Broker Port. Wird 0 eingetragen, wird automatisch ein freier Port genutzt. Host Port : Standard Broker Port. Wird 0 eingetragen, wird automatisch ein freier Port genutzt. Compile Rootdirectory : Gibt an, unter welchem Ordner Framework Studio die Compile-Verzeichnisse erzeugen soll. Diese Einstellung muss manuell in der Datei FrameworkStudio_3_X.exe.config angepasst werden. Visual Studio Path : Hier kann angegeben werden, wo Visual Studio installiert ist. Die aktuell von Framework Studio unterstützten Versionen von Visual Studio werden automatisch erkannt. Wenn eine andere Version oder Edition (z.B. Visual Studio Express) verwendet werden soll, kann das entsprechende Programm angegeben werden. Mit dem Button Reset wird der Wert auf die Original-Einstellung zurückgesetzt. Diese Einstellung wird für das Menu View / Compiled Code in Visual Studio in den Designer-Fenstern verwendet. Außerdem wird der Ordner aus dieser Einstellung verwendet, um für die Arbeit mit Services das Programm WcfTestClient.exe zu finden. Visual Studio Arguments : Hier können die Kommandozeilen-Argumente für das Öffnen der Quellcode-Dateien angegeben werden. Beim Einsatz von Visual Studio können die Standard-Einstellungen %file% /Edit beibehalten werden. Der Platzhalter %file% steht für die zu öffnenden Dateien. Dieser werden in dem Format \"Datei1.cs\" \"Datei2.cs\"… übergeben. Wenn dieser Platzhalter nicht angegeben ist, dann werden die Dateien an der Parameter gestellt. Utilities (Registerkarte) SvcUtil : Gibt den Pfad zur SvcUtil.exe des Windows SDK an. Diese wird für die Generierung des Services verwendet. InstallUtil : Gibt den Pfad zur InstallUtil.exe des .NET-Frameworks an. Crystal Report Designer : Gibt den Pfad zum Crystal Report Designer an. Diff Tool : Hier kann die ausführbare Datei für das Diff Tool angegeben werden. Diff Tool Data Dir : Hier kann das Datenverzeichnis für das Diff Tool angegeben werden. Mit dem Button [...] kann jeweils ein Dateiauswahldialog geöffnet werden."
  },
  "doc/index.html": {
    "href": "doc/index.html",
    "title": "Framework Studio Technische Dokumentation",
    "keywords": "Framework Studio Technische Dokumentation"
  },
  "doc/mdt/validierung.html": {
    "href": "doc/mdt/validierung.html",
    "title": "Metadatentyp-Validierung",
    "keywords": "Metadatentyp-Validierung Die Einstellungen, die am Metadatentyp zu sehen sind (z.B. Größe, Formatierung, Wertebereich, …), werden bei der Arbeit mit Properties herangezogen, um die Werte zu validieren und ggf. zu korrigieren. Auch der Client nutzt diese Informationen, um falsche Eingaben so früh wie möglich zu unterbinden. Die Zusammenhänge werden durch folgendes Schaubild erläutert: Die folgende Tabelle stellt dar, was passiert, wenn mit einem Wert gearbeitet wird, der denen am Metadatentyp definierten Kriterien nicht entspricht. Einstellung Lesen von Properties aus der Datenbank, die falsche Werte beinhalten Setzen von Properties Client Allgemein Values Value Ranges Es wird ein Null-Wert zurückgegeben. Eine Exception wird geworfen. Nach der Eingabe wird der Wert geprüft und es wird eine Fehlermeldung ausgegeben. Strings Size Bei zu langen Strings wird auf dieser auf die Size gekürzt. Eine Exception wird geworfen. Die Eingabe wird begrenzt. Uppercase, Lowercase Der Text wird ggf. mit ToUpperInvariant() bzw. ToLowerInvariant() korrigiert. Der Text wird ggf. mit ToUpperInvariant() bzw. ToLowerInvariant() korrigiert. Die Eingabe lässt nur Groß- bzw. Kleinbuchstaben zu. Format-Pattern (Regulärer Ausdruck) Es wird FSstring.Null zurückgegeben. Eine Exception wird geworfen. Nach der Eingabe wird der Wert geprüft und es wird eine Fehlermeldung ausgegeben. Es wird zuvor noch versucht, den String mit Uppercase oder Lowercase zu korrigieren, wenn der reguläre Ausdruck selber Uppercase bzw. Lowercase ist. Wenn das funktioniert, dann wird der Wert in Uppercase bzw. Lowercase konvertiert. Numerische Werte Precision Es wird ein Null-Wert zurückgegeben. Eine Exception wird geworfen. Die Eingabe wird begrenzt. Scale (bei Dezimal-Zahlen) Der Wert wird „kaufmännisch“ gerundet. Der Wert wird „kaufmännisch“ gerundet. Die Eingabe wird begrenzt. Positive Integer, Negative Integer (bei Ganzzahlen) Es wird ein Null-Wert zurückgegeben. Eine Exception wird geworfen. Das Minus-Zeichen wird bei der Eingabe unterdrückt bzw. automatisch hinzugefügt. Der Java-Client gibt bei der Eingabe eines falschen Wertes die folgenden Fehlermeldungen aus: Wenn das Format-Pattern (der reguläre Ausdruck) verletzt wird: Wenn ein Wertebereich verletzt wird:"
  },
  "doc/html-client/lizenzen.html": {
    "href": "doc/html-client/lizenzen.html",
    "title": "Hinweise zu Lizenzen",
    "keywords": "Hinweise zu Lizenzen Timeout Aus technischen Gründen kann der HTML-Client weder im Browser, noch in der App auf einem mobilen Gerät dem Broker mitteilen, dass er beendet wurde. Z.B. kann auf einem Android-Gerät nicht unterschieden werden, ob eine App nur in den Ruhezustand gewechselt hat oder komplett geschlossen wurde. Dies hat zur Folge, dass Broker-Sessions, die von einem HTML-Client aus gestartet wurden, offen bleiben, bis der Broker sie von sich aus verwirft. Diese Zeitspanne beträgt 12 Stunden . ClientID Um dem Verbrauch von Lizenzen entgegen zu wirken, wird im HTML-Client eine ClientID generiert, die den Browser bzw. das mobile Gerät identifiziert und mit zum Broker geschickt wird. Im Browser ist die ClientID eine UUIDv4, die im Code generiert wird, auf mobilen Geräten wird die Cordova-Geräte-ID herangezogen. Über die ClientID kann der Broker den Browser bzw. das mobile Gerät identifizieren und bei einem erneuten Start einer Anwendung diesem die bisherige Lizenz zuordnen. Zusatz für mobile Geräte Die ClientID auf mobilen Geräten ist immer gleich. Ein mobiles Gerät verbraucht am Broker eine Lizenz unabhängig vom Benutzer. Zusatz für Browser Ein Browser hat keinen Zugriff auf das Betriebssystem und den Computer. Die generierte ClientID wird deshalb im sogenannten „Local Storage“ des Browsers gespeichert. Dieser Speicher ist je nach Konfiguration benutzerabhängig. Beispiel: Ist auf einem Computer, den drei Benutzer verwenden, Firefox als Browser installiert, so hat jeder Benutzer seinen eigenen Local Storage. Dies bedeutet, dass jeder Benutzer seine eigene ClientID bekommt und somit auch drei Lizenzen am Broker verbraucht werden. Dies gilt auch, wenn ein Benutzer dieselbe Applikation einmal im Firefox und einmal im Chrome öffnet. Die beiden Browser haben separate Local Storages und verbrauchen somit auch wieder zwei Lizenzen am Broker."
  },
  "doc/html-client/controls.html": {
    "href": "doc/html-client/controls.html",
    "title": "Controls",
    "keywords": "Controls Symbol Bedeutung + Property oder Event wird vollständig unterstützt - Property oder Event wird nicht unterstützt o Property oder Event wird teilweise unterstützt (Anmerkung beachten) Allgemein Die folgende Auflistung beinhaltet diejenigen Properties und Events, die an allen verfügbaren Controls im HTML-Client vorhanden sind. Properties Name Unterstützt Anmerkung Alignment + BackColor + BorderColor + BorderRadius + BorderThickness + ButtonGroupDataSource + Caption + DockPanel.ItemSize + Font Family - Ist im Client hart definiert auf die Hierarchie Arial -> Helvetica -> Sans-Serif. Font Bold + Font Italic + Font Underline + ForeColor + IsEditable + LabelTemplate + MapEnterToTabAction - Margin + MaxSize + MinSize + Name + Padding + Shortcut - TabStop + ToolTip + Visibility + Events Name Unterstützt OnCanDrop - OnDrag - Form Properties Name Unterstützt BadgeImage DataSource - IsCloseIconVisible + MainMenu - PreferredSize - SymbolImage - Title + VerticalScrollbarOverlay - Events Name Unterstützt OnLoad + OnClose + Dock Panel Properties Name Unterstützt BackgroundImage - BackgroundScaleMode - DockPanelOrientation + Spacing + Events Name Unterstützt OnEnter - OnLeave - Wrap Panel Properties Name Unterstützt BackgroundImage - BackgroundScaleMode - ContentAlignment + InvertFlowDirection + Spacing + WrapArrangement + Events Name Unterstützt OnEnter - OnLeave - Field Panel Properties Name Unterstützt BackgroundImage - BackgroundScaleMode - RowLabelTemplate + SynchronizeColumns + Events Name Unterstützt OnEnter - OnLeave - Field Row Properties Name Unterstützt FieldRowSize + LabelMode + OptimizeGeneratedLabels + Button Properties Name Unterstützt ShowCaption + TabStop + Events Name Unterstützt OnClick + OnEnter + OnLeave + ImageButton Properties Name Unterstützt BadgeImage DataSource - CaptionAlign - ContextMenu - DataSource - DisabledImage + HighlightImage - Image + MouseOverImage + PressedImage + ScaleMode - ShowCaption + SymbolImage - TabStop + Events Name Unterstützt OnClick + OnEnter + OnLeave + Label Properties Name Unterstützt DataSource + TextAlign + Events Name Unterstützt OnEnter + OnLeave + CheckBox Properties Name Unterstützt DataSource + ShowCaption + Events Name Unterstützt OnClick + OnEnter + OnLeave + Editfield Properties Name Unterstützt Anmerkung DataSource + DisabledBackColor o Wird dynamisch im Client berechnet DisplayLength + Editor o Nur \"PlainText”, \"HTML” wird nicht unterstützt Format + FormatPattern o Funktioniert nur mit Format \"Decimal\" Multiline + PasswordChar + Client generiert ein Password-Feld, wenn gesetzt, das Passwort-Zeichen selbst kann aber nicht geändert werden (in Web Browsern technisch nicht möglich). ScrollBars + SelectionEnd - SelectionStart - TabStop + TextAlign + WordWrap + Events Name Unterstützt OnEnter + OnLeave + OnValidated + ComboBox Properties Name Unterstützt DataSource + DisplayLength + EditStyle + List + ListOrder + MaxDropDownSize + TabStop + Events Name Unterstützt OnEnter + OnLeave + OnSelectionChanged + RadioButton Properties Name Unterstützt CaptionDataSource + DataSourceOnValue + Events Name Unterstützt OnEnter + OnLeave + OnClick + ListView Properties Name Unterstützt DataSource + ItemArrangement + ItemSize + SelectedItems + SelectionMode + SelectorPosition + Spacing + Template + Events Name Unterstützt OnEnter - OnLeave - OnItemActivated + OnItemSelectionChanged +"
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "Artikel",
    "keywords": "Artikel In diesem Bereich werden Neuheiten, Release-Listen und sonstige Artikel veröffentlicht."
  },
  "doc/comp/components.html": {
    "href": "doc/comp/components.html",
    "title": "Components",
    "keywords": "Components"
  },
  "api/FrameworkSystems.FrameworkBase.AccessControl.AccessUnit.html": {
    "href": "api/FrameworkSystems.FrameworkBase.AccessControl.AccessUnit.html",
    "title": "Class AccessUnit",
    "keywords": "Class AccessUnit TODO! Inheritance System.Object AccessUnit Namespace : FrameworkSystems.FrameworkBase.AccessControl Assembly : FrameworkSystems.FrameworkBase.dll Syntax [Serializable] public sealed class AccessUnit"
  },
  "api/FrameworkSystems.FrameworkBase.GlobalObj.IGlobalObjects.CloseApplication.html": {
    "href": "api/FrameworkSystems.FrameworkBase.GlobalObj.IGlobalObjects.CloseApplication.html",
    "title": "Method CloseApplication",
    "keywords": "Method CloseApplication CloseApplication() Schließt die Anwendung. Der Benutzer wird gefragt, ob er die Anwendung beenden möchte. An den geöffneten Forms wird die Methode IsApplicationQuitAllowed aufgerufen und eine entsprechende Message-Box ausgegeben bzw. das Schließen der Anwendung verhindert. Declaration void CloseApplication() Remarks Diese Methode wirft intern eine Exception, die dafür sorgt, dass die gesamte Anwendung beendet wird. Dies wird auch dem Client mitgeteilt, sodass dieser ebenfalls geschlossen wird. CloseApplication(FrameworkCloseMode) Wird als closeMode das Flag Restart angegeben, so wird ein Neustart des Clients veranlasst. Allerdings darf ein Neustart nur unter der Bedingung ausgeführt werden, dass jedes aktuell laufende Ereignis eines der folgenden ist: MenuItem.OnClick Button.OnClick ImageButton.OnClick MessageBox-Event(Als Folge eine der oben genannten Events) Mit aktuell laufenden Ereignissen sind auch solche Ereignisse gemeint, die als Folge einen modalen Dialog geöffnet haben.Solange der Dialog offen ist, zählt das Ereignis zu den laufenden. Zusätzlich gibt es das Flag KeepUserLogin . Wird Restart mit diesem Flag kombiniert (bitweise Oder-Verknüpfung), so wird beim Neustart der User Token in die neue Sitzung übernommen und es ist kein erneuter Login erforderlich. Declaration void CloseApplication(FrameworkCloseMode closeMode) Parameters Type Name Description FrameworkCloseMode closeMode Remarks Diese Methode wirft intern eine Exception, die dafür sorgt, dass die gesamte Anwendung beendet wird. Dies wird auch dem Client mitgeteilt, sodass dieser ebenfalls geschlossen wird. CloseApplication(String) Schließt die Anwendung unmittelbar. Es wird keine weitere Prüfung durchgeführt und der Benutzer hat keine Möglichkeit die Aktion abzubrechen. Am Client wird dabei die übergebene Message ausgegeben. Declaration void CloseApplication(string message) Parameters Type Name Description System.String message Die Meldung die am Client angezeigt werden soll. Wird String.Empty übergeben, wird die Anwendung ohne Meldung beendet. Wird null übergeben, verhält sich die Methode wie die parameterlose CloseApplication() . Remarks Diese Methode wirft intern eine Exception, die dafür sorgt, dass die gesamte Anwendung beendet wird. Dies wird auch dem Client mitgeteilt, sodass dieser ebenfalls geschlossen wird."
  },
  "api/FrameworkSystems.FrameworkBase.GlobalObj.IGlobalObjects.AUHelper.html": {
    "href": "api/FrameworkSystems.FrameworkBase.GlobalObj.IGlobalObjects.AUHelper.html",
    "title": "Property AUHelper",
    "keywords": "Property AUHelper AUHelper Gibt ein Objekt vom Typ AUHelper zurück. Dieses Objekt bietet Methoden für den Bereich Benutzer- und Rechte-Verwaltung an. Declaration AUHelper AUHelper { get; } Property Value Type Description AUHelper"
  },
  "api/FrameworkSystems.FrameworkBase.GlobalObj.IGlobalObjects.SelectedLanguage.html": {
    "href": "api/FrameworkSystems.FrameworkBase.GlobalObj.IGlobalObjects.SelectedLanguage.html",
    "title": "Property SelectedLanguage",
    "keywords": "Property SelectedLanguage SelectedLanguage Gibt den 2-Zeichen IsoCode der ersten Sprache in der LanguageHierarchy zurück oder legt diesen fest. Declaration string SelectedLanguage { get; set; } Property Value Type Description System.String Remarks Beim Setzen der SelectedLanguage gibt es 2 Möglichkeiten: 1.) Es wird nur ein ISO-Code übergeben.Dieser wird an die erste Stelle der LanguageHierarchy gesetzt. Wenn dieser Code schon in der Hierarchie enthalten ist, dann wird dieser an die erste Stelle verschoben. 2.) Es wird eine Komma-separierte Liste von ISO-Codes übergeben.In diesem Fall wird aus dieser Liste eine neue LanguageHierarchy aufgebaut. Die Sprache wird beim Start im Client festgelegt. Der Broker wechselt beim Start der Anwendung ggf. auf die Default-Sprache der Anwendung, wenn die vom Client angefragte Sprache nicht zur Verfügung steht. Warning Dieser Wert sollte in einem normalen Broker nicht geändert werden."
  },
  "api/FrameworkSystems.FrameworkBase.GlobalObj.IGlobalObjects.CreateComponent.html": {
    "href": "api/FrameworkSystems.FrameworkBase.GlobalObj.IGlobalObjects.CreateComponent.html",
    "title": "Method CreateComponent",
    "keywords": "Method CreateComponent CreateComponent(String) Erzeugt eine neue Component mit dem übergebenen Namen. Declaration object CreateComponent(string componentName) Parameters Type Name Description System.String componentName Returns Type Description System.Object Remarks Das zurückgegebene Objekt muss ggf. in einen anderen Typ umgewandelt werden, damit eine Weiterverarbeitung möglich ist. DevFrameworkObject oObject = this.Global.CreateComponent(\"Namespace.cdComponent\") as DevFrameworkObject; DevFrameworkObjectColl oColl = this.Global.CreateComponent(\"Namespace.cdComponentColl\") as DevFrameworkObjectColl; Der ComponentName entspricht dem FullName des Typs. Dieser kann auch zur Laufzeit ermittelt werden. sComponentName = oComponent.GetType().FullName; Warning Da der übergebene Parameter nicht kompiliert ist, sollte diese Funktion nur in Ausnahmefällen eingesetzt werden, um z.B. verallgemeinerte Logik umzusetzen."
  },
  "api/FrameworkSystems.FrameworkBase.GlobalObj.IGlobalObjects.GetCodeDirectory.html": {
    "href": "api/FrameworkSystems.FrameworkBase.GlobalObj.IGlobalObjects.GetCodeDirectory.html",
    "title": "Method GetCodeDirectory",
    "keywords": "Method GetCodeDirectory GetCodeDirectory() Liefert den Pfad des Verzeichnisses, in dem die Anwendung läuft. Declaration string GetCodeDirectory() Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkBase.GlobalObj.IGlobalObjects.LanguageHierarchy.html": {
    "href": "api/FrameworkSystems.FrameworkBase.GlobalObj.IGlobalObjects.LanguageHierarchy.html",
    "title": "Property LanguageHierarchy",
    "keywords": "Property LanguageHierarchy LanguageHierarchy Gibt einen Enumeratur zurück, der die Sprach-Hierarchie beinhaltet, oder legt diesen fest. Declaration IEnumerable<string> LanguageHierarchy { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Remarks Beim Setzen kann jeder Typ zugewiesen werden, der von IEnumerable<string> erbt. Es ist jedoch empfehlenswert, mit einer ReadOnlyCollection<string> zu arbeiten, um Manipulationen an dieser Liste zu verhindern. Diese kann zum Beispiel mit der Methode Liste<string>.AsReadOnly() erzeugt werden. Warning Dieser Wert sollte in einem normalen Broker nicht geändert werden."
  },
  "api/FrameworkSystems.FrameworkBase.GlobalObj.IGlobalObjects.SafeInitializing.html": {
    "href": "api/FrameworkSystems.FrameworkBase.GlobalObj.IGlobalObjects.SafeInitializing.html",
    "title": "Property SafeInitializing",
    "keywords": "Property SafeInitializing SafeInitializing Gibt zurück, ob der Safe-Initialize-Modus aktiv ist. Dieser Modus wird mithilfe einer Einstellung im Start-Workflow aktiviert. Declaration bool SafeInitializing { get; } Property Value Type Description System.Boolean Remarks Der Modus kann mithilfe der Methode EndSafeInitialize() zurückgesetzt werden. Wenn diese Methode einmal aufgerufen wurde, dann ist es nicht mehr möglich, den Modus wieder zu aktivieren. Wenn dieser Modus aktiv ist, dann können z.B. in einer Update-Sitation Exceptions unterbunden werden, die den Start der Anwendung verhindern würden. Examples try { [Aktion] } catch (Exception ex) { if (this.Global.SafeInitializing) { [Fehler behandeln] } else { // Exception weiter werfen. throw; } }"
  }
}