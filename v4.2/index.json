{
  "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.UNTRANSLATABLE.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.UNTRANSLATABLE.html",
    "title": "Field UNTRANSLATABLE",
    "keywords": "Field UNTRANSLATABLE Namespace : FrameworkSystems.FrameworkExceptions.MultiLanguage Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public const string UNTRANSLATABLE = \"untranslatable\" Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.html",
    "title": "Class MLKey",
    "keywords": "Class MLKey Inheritance System.Object MLKey Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : FrameworkSystems.FrameworkExceptions.MultiLanguage Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public class MLKey Constructors Name Description MLKey(String) Fields Name Description DISPLAY_FORMAT DISPLAY_FORMAT_END DISPLAY_FORMAT_START KEY MLKEYS UNTRANSLATABLE Methods Name Description Equals(Object) GetHashCode() IsKey(String) ToString()"
  },
  "api/FrameworkSystems.FrameworkExceptions.RowVersionInvalidException.-ctor.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.RowVersionInvalidException.-ctor.html",
    "title": "Constructor RowVersionInvalidException",
    "keywords": "Constructor RowVersionInvalidException RowVersionInvalidException(String) Declaration public RowVersionInvalidException(string caption) Parameters Type Name Description System.String caption RowVersionInvalidException(String, Exception) Declaration public RowVersionInvalidException(string caption, Exception ex) Parameters Type Name Description System.String caption System.Exception ex"
  },
  "api/FrameworkSystems.FrameworkExceptions.RowVersionInvalidException.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.RowVersionInvalidException.html",
    "title": "Class RowVersionInvalidException",
    "keywords": "Class RowVersionInvalidException Inheritance System.Object System.Exception FrameworkException RowVersionInvalidException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members FrameworkException.ErrorCode FrameworkException.YouHaveToSortBeforeSave FrameworkException.NoSortBecauseOfDroppedEntriesInColl FrameworkException.YouHaveToSaveBeforeApplyAFilter FrameworkException.GetObjectData(SerializationInfo, StreamingContext) System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax [Serializable] public class RowVersionInvalidException : FrameworkException, ISerializable, _Exception Constructors Name Description RowVersionInvalidException(String) RowVersionInvalidException(String, Exception)"
  },
  "doc/index.html": {
    "href": "doc/index.html",
    "title": "Framework Studio Technische Dokumentation",
    "keywords": "Framework Studio Technische Dokumentation"
  },
  "doc/application/application.html": {
    "href": "doc/application/application.html",
    "title": "Application",
    "keywords": "Application"
  },
  "doc/allgemein/options.html": {
    "href": "doc/allgemein/options.html",
    "title": "Options",
    "keywords": "Options Die Options können in der IDE über den Menüeintrag Tools / Options geöffnet werden. IDE (Registerkarte) Login Get DLLs Mit der Checkbox Enable option 'Include Debug DLLs' by default wird im Login dafür gesorgt, dass beim Get DLLs die vom Framework Compiler erzeugten Debug-Informationen gezogen werden. Das beinhaltet (soweit vorhanden) die Debug-Informationen der Basis-Packages. Appearance Error Display Wird die Checkbox Legacy Error Window gesetzt, kann erzwungen werden, dass die Errors in derselben Art und Weise ausgegeben werden, wie es bis Framework Studio 2.6 der Fall war. Background Image Wird die Checkbox Disable gesetzt, wird in der Framework Studio Umgebung kein Hintergrundbild mehr angezeigt. Dies kann zu einer Performancesteigerung bei Remote Sessions beitragen (z.B. VNC). Documentation Indicators Zeigt an den Controls im Form-Designer an, ob eine Dokumentation gepflegt ist, bzw vererbt wurde. Form Control DoubleClick Gibt an, was im Form-Designer passieren soll, wenn auf ein Control Strg + Doppelklick ausgeführt wird. RadioButton Show Control Events : Zeigt den Events-Dialog für das Control an. Diese Option ist sinnvoll für normale Entwickler. Der Documentation-Editor kann über das Context-Menü des Controls geöffnet werden. RadionButton Show Documentation : Zeigt den Documentation-Editor für das Control an. Diese Option ist sinnvoll für Benutzer, die viel an Dokumentationen arbeiten. Die Control-Events können über das Context-Menü des Controls geöffnet werden. Show form designer grid Gibt an, ob im Form-Designer das Raster-Grid angezeigt werden soll. Bei der Arbeit über Remote Desktop kann dieses Grid die Performance sehr stark verschlechtern. Languages in designer Hier können die Sprachen eingestellt werden, die in den MLStrings und im Wörterbuch angeboten werden sollen. Die Reihenfolge wird - sofern dies möglich ist - von den Designer-Fenstern berücksichtigt. Es werden kommasepariert die Iso-Codes der Sprachen angegeben - z.B. de,en,fr . Wird keine Angabe gemacht, werden in allen Designer-Fenstern immer alle verfügbaren Sprachen angeboten. Code Editor Font Family Hier können Schriftart und -größe für den Code-Editor angepasst werden. Go to Definition with Ctrl+DoubleClick Schaltet im Code-Editor die Funktion Go to Definition (F12) mit Strg + Doppelklick ein. Es kann sinnvoll sein, diese Funktion zu deaktivieren, wenn man diese Funktion öfters aus Versehen auslöst. Dann bleibt immer noch die F12-Taste oder das Context-Menü zum Aufruf dieser Funktion. Context Tooltip Gibt an, ob im Code-Editor Informationen zu Elementen angezeigt werden sollen, wenn mit der Maus auf Code-Teile gezeigt wird. Compile / Debug (Registerkarte) Broker Port Standard Broker Port. Wird 0 eingetragen, wird automatisch ein freier Port genutzt. Host Port Standard Broker Port. Wird 0 eingetragen, wird automatisch ein freier Port genutzt. Compile Rootdirectory Gibt an, unter welchem Ordner Framework Studio die Compile-Verzeichnisse erzeugen soll. Diese Einstellung muss manuell in der Datei FrameworkStudio.exe.config angepasst werden. Beispiel: <configuration> <appSettings> <add key=\"CompileBaseDirectory\" value=\"C:\\FS\\Compile42\" /> [...] Visual Studio Path Hier kann angegeben werden, wo Visual Studio installiert ist. Die aktuell von Framework Studio unterstützten Versionen von Visual Studio werden automatisch erkannt. Wenn eine andere Version oder Edition (z.B. Visual Studio Express) verwendet werden soll, kann das entsprechende Programm angegeben werden. Mit dem Button Reset wird der Wert auf die Original-Einstellung zurückgesetzt. Diese Einstellung wird für das Menu View / Compiled Code in Visual Studio in den Designer-Fenstern verwendet. Außerdem wird der Ordner aus dieser Einstellung verwendet, um für die Arbeit mit Services das Programm WcfTestClient.exe zu finden. Visual Studio Arguments Hier können die Kommandozeilen-Argumente für das Öffnen der Quellcode-Dateien angegeben werden. Beim Einsatz von Visual Studio können die Standard-Einstellungen %file% /Edit beibehalten werden. Der Platzhalter %file% steht für die zu öffnenden Dateien. Dieser werden in dem Format \"Datei1.cs\" \"Datei2.cs\"… übergeben. Wenn dieser Platzhalter nicht angegeben ist, dann werden die Dateien an der Parameter gestellt. Utilities (Registerkarte) SvcUtil Gibt den Pfad zur SvcUtil.exe des Windows SDK an. Diese wird für die Generierung des Services verwendet. InstallUtil Gibt den Pfad zur InstallUtil.exe des .NET-Frameworks an. Crystal Report Designer Gibt den Pfad zum Crystal Report Designer an. Diff Tool Hier kann die ausführbare Datei für das Diff Tool angegeben werden. Diff Tool Data Dir Hier kann das Datenverzeichnis für das Diff Tool angegeben werden. Mit dem Button [...] kann jeweils ein Dateiauswahldialog geöffnet werden."
  },
  "doc/tables/dbrun_config.html": {
    "href": "doc/tables/dbrun_config.html",
    "title": "dbRun_Config (Business-Datenbank)",
    "keywords": "dbRun_Config (Business-Datenbank) Diese Tabelle beinhaltet die Konfigurationen für den automatischen Datenbank-Update. Die FS-Update-Logik erzeugt und aktualisiert diese Tabelle automatisch. Die Einstellungen müssen manuell per SQL vorgenommen werden. Wenn keine Einstellung existiert, dann zieht automatisch die Default-Einstellung. Spalte Beschreibung ConfigKey Schlüssel (siehe unten) ConfigValue Wert (siehe unten) ConnectionGroup Der Name der Connection-Group. Bei <NULL> zieht die Einstellung für alle Connection-Groups. Wenn für eine Connection-Group eine Konfiguration angegeben ist, dann hat diese Priorität. ConfigKey UNICODE Dieser ConfigKey stellt das Unicode-Verhalten des Update-Assinstenten ein. In ConfigValue sind folgende Werte zulässig: Disabled (Default) Neue Spalten werden ASCII (VARCHAR/ CLOB) angelegt. Enabled Neue Spalten werden Unicode (NVARCHAR/ NCLOB) angelegt. Adjust Bestehende Spalten werden auf Unicode umgestellt. Dies erfolgt im Schritt 4 des Update-Assistenten. Important Diese Einstellung hat zur Folge, dass die GESAMTE Datenbank angefasst wird. Dies bedeutet ggf. einen erheblichen Zeitaufwand und verursacht ein großes Volumen an Transaktion-Protokollen. ConfigKey LOB Dieser ConfigKey steuert, wie der Update-Assistent mit Langtext-Spalten umgehen soll. In ConfigValue sind folgende Werte zulässig Normal (Default) Neue Spalten werden mit LOB-Typen angelegt. Adjust Bestehende Spalten werden auf LOB-Typen umgestellt. Dies erfolgt im Schritt 4 des Update-Assistenten. SQL-Server: text => varchar(max) / image => varbinary(max) Oracle: varchar2(2000) => CLOB Important ACHTUNG! Diese Einstellung hat zur Folge, dass große Teile der Datenbank angefasst werden. Dies bedeutet ggf. einen erheblichen Zeitaufwand und verursacht ein großes Volumen an Transaktion-Protokollen. Bei Oracle kann sein ggf. sein, dass einige ältere Programme (wie z.B. SQL-Business) nicht mit dem Datentyp CLOB umgehen können. In diesem Fall muss der Schalter auf Normal gesetzt werden."
  },
  "doc/sql/syntax.html": {
    "href": "doc/sql/syntax.html",
    "title": "SQL-Syntax",
    "keywords": "SQL-Syntax Framework Studio übersetzt alle SQL-Statements in die Syntax der verwendeten Ziel-Datenbank. Dazu werden alle Statements geparsed und für die Ziel-Datenbank wieder neu zusammengesetzt."
  },
  "doc/sql/operatoren.html": {
    "href": "doc/sql/operatoren.html",
    "title": "Operatoren",
    "keywords": "Operatoren || Verbindet 2 Zeichenketten. Beispiel: SELECT column1 || ' - ' || colum2 FROM tabelle Bei Zeichen-Ketten muss dieser Operator verwendet werden. Der + - Operator ist nicht zulässig. Wenn dennoch der + - Operator verwendet wird, versucht der Parser dies zu korrigieren. Das ist möglich, wenn bei der Operation Zeichen-Ketten oder bestimmte Zeichenketten-Funktionen beteiligt sind. Nicht erkannt wird z.B. das Verbinden von 2 Spalten. In diesem Fall kann es zu Fehlern auf der Ziel-Datenbank kommen. + - * / Addiert, subtrahiert, multipliziert bzw. dividiert 2 Zahlenwerte. Der Framework Studio SQL-Parser versteht die im Folgenden beschriebenen Operatoren und Funktionen. Diese werden Datenbank-spezifisch umgesetzt und können bedenkenlos in selbst formuliertem Sql verwendet werden. Funktionen, die der Parser nicht kennt, werden direkt ohne Konvertierung an die Datenbank weitergegeben. Das bedingt, dass diese Funktionen von der Datenbank verstanden werden. Ggf. Ist es in solchen Fällen nötig, selbst dafür zu sorgen, dass das Sql datenbankspezifisch formuliert wird."
  },
  "doc/sql/num-funktionen.html": {
    "href": "doc/sql/num-funktionen.html",
    "title": "Numerische Funktionen",
    "keywords": "Numerische Funktionen ABS ( <Numeric Expression> ) Liefert den absoluten Betrag einer Zahl TRUNC ( <Numeric Expression>, <Decimals> ) Schneidet eine Dezimal-Zahl auf die angegebene Anzahl Stellen ab. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server ROUND ( <Numeric Expression>, <Decimals>, 1 ) Oracle TRUNC ( <Numeric Expression>, <Decimals> ) ROUND ( <Numeric Expression>, <Decimals> ) Rundet eine Dezimal-Zahl auf die angegebene Anzahl Stellen. POWER ( <Numeric Expression>, <y> ) Potenziert eine Zahl mit y SQUARE ( <Numeric Expression> ) Quadrat eine Zahl. SQRT ( <Numeric Expression> ) Quadratwurzel einer Zahl CEILING ( <Numeric Expression> ) Rundet eine Zahl auf. FLOOR ( <Numeric Expression> ) Rundet eine Zahl ab. LOG (<Float Expression> ) Natürlicher Logarithmus einer Fließkommazahl. LOG10 ( <Float Expression> ) Logarithmus mit der Basis 10. EXP ( <float Expression> ) Gibt den exponentiellen Wert des angegebenen float-Ausdrucks zurück. (e x ) SIN ( <float Expression> ) Sinus einer Fließkommazahl. TAN (<Float Expression> ) Tangens einer Fließkommazahl. SIGN ( <Number> ) Gibt das Vorzeichen der Zahl zurück. Negativ -> -1, 0 -> 0, positiv -> +1."
  },
  "doc/sql/grammatik.html": {
    "href": "doc/sql/grammatik.html",
    "title": "SQL-Grammatik",
    "keywords": "SQL-Grammatik Im Folgenden ist die Grammatik beschrieben, die vom Framework Studio SQL-Parser verstanden wird. Alle an die Datenbank geschickten Befehle müssen dieser Grammatik genügen, ansonsten kommt es zu SqlParser-Exceptions. Grammatik für SQL-Kommandos <select> SELECT [DISTINCT] { * | <resultColumn>[,…n] } FROM { <singleSource> | <joinSource> } [ WHERE <condition> ] [ GROUP BY <value>[,…n] [HAVING <condition>]] [ {UNION [ALL] | INTERSECT | EXCEPT} <select(ohne orderby)> ] [ ORDER BY <orderColumn>[,…n] ] <insert> INSERT INTO <identifierChain> ( <identifier>[,…n] ) { VALUES ( <value>[,…n] ) | <select> } <update> UPDATE <identifierChain> SET {<identifierChain> = <value> } [,…n] [ WHERE <condition> ] <delete> DELETE [FROM] <identifierChain> [ WHERE <condition> ] Grammatik für die Bestandteile der Kommandos <resultColumn> <identifierChain>.* | <value> [AS <identifier>] <singleSource> ( <singleSource> ) | <identifierChain> [ [AS] <identifier> ] <joinSource> ( <joinSource> ) | { <singleSource> | <joinSource> } { INNER | {LEFT | RIGHT | FULL} [OUTER] } JOIN { <singleSource> | <joinSource> } ON <condition> <condition> ( <condition> ) | NOT <condition> | <condition> {{ AND | OR } <condition>}[,…n] | <value> <predicate2> | EXISTS ( <select> ) <predicate2> { = | != | < | <= | > | >= } <value> | IS [NOT] NULL | BETWEEN <value> AND <value> | IN ( <select> | <value> [,…n] ) | LIKE <value> | LIKEESCAPE <value> <value> NULL | ( <value> ) | { - | + } <value> | <value> { + | - | * | / | “||” } <value> | <identifierChain> | [<identifierChain>.] <FunktionsName> ( [ <value> [,…n] ] ) | <searchedCaseWhen> | <simpleCaseWhen> | \"[[\" <natives sql fragment> \"]]\" | <stringLiteral> | <integerValue> | <decimalValue> <searchedCaseWhen> CASE {WHEN <condition> THEN <value>}[,…n] [ ELSE <value> ] END <simpleCaseWhen> CASE <value> {WHEN {<predicate2> | <value>} THEN <value>}[,…n] [ ELSE <value> ] END <orderColumn> <value> [ASC | DESC] <identifierChain> <identifier>[.<identifier>][,…n] <identifier> \"[\" <beliebige Zeichenfolge> \"]\" | <Wort, mit einem Buchstaben beginnend>"
  },
  "doc/sql/datum-funktionen.html": {
    "href": "doc/sql/datum-funktionen.html",
    "title": "Datums-Funktionen",
    "keywords": "Datums-Funktionen GETDATE ( ) Liefert das aktuelle Datum auf dem Datenbank-Server. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server GETDATE ( ) Oracle SYSDATE GETUTCDATE ( ) Liefert die aktuelle Weltzeit (UTC) auf dem Datenbank-Server. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server GETUTCDATE ( ) Oracle CAST(sys_extract_utc(systimestamp) AS TIMESTAMP) ADD_DAYS ( <Date Expression>, <Days> ) Addiert die übergebenen Tage zu einem Datum/Zeit-Ausdruck. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server DATEADD ( DAY, <Days>, <Date Expression> ) Oracle <Date Expression> + <Days> ADD_MINUTES ( <Date Expression>, <Minutes> ) Addiert die übergebenen Minuten zu einem Datum/Zeit-Ausdruck. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server DATEADD ( MINUTE, <Minutes>, <Date Expression> ) Oracle <Date Expression> + ( <Minutes> / 1440 ) ADD_MONTHS ( <Date Expression>, <Months> ) Addiert die übergebenen Monate zu einem Datum/Zeit-Ausdruck. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server DATEADD ( MONTH, <Months>, <Date Expression> ) Oracle ADD_MONTHS ( <Date Expression>, <Months> ) DAYS_BETWEEN (<Start-Date>, <End-Date>) Liefert die Anzahl der ganzen Tage zwischen 2 Datums-Werten. Wenn das Start-Datum größer ist als das End-Datum, dann werden negative Werte zurückgegeben. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server DATEDIFF ( DAY, <Start-Date>, <End-Date> ) Oracle TRUNC ( <End-Date> - <Start-Date> ) MONTHS_BETWEEN (<Start-Date>, <End-Date>) Liefert die Anzahl der ganzen Monate zwischen 2 Datums-Werten. Wenn das Start-Datum größer ist als das End-Datum, dann werden negative Werte zurückgegeben. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server DATEDIFF (MONTH, <Start-Date>, <End-Date>) Oracle MONTHS_BETWEEN (<End-Date>, <Start-Date>) YEAR ( <Date Expression> ) Liefert eine 4-stellige Zahl, die dem Jahr des Datum/Zeit-Wertes entspricht. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server YEAR ( <Date Expression> ) Oracle EXTRACT ( YEAR FROM <Date Expression> ) MONTH ( <Date Expression> ) Liefert eine Zahl, die dem Monat des Datum/Zeit-Wertes entspricht. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server MONTH ( <Date Expression> ) Oracle EXTRACT ( MONTH FROM <Date Expression> ) DAY ( <Date Expression> ) Liefert eine Zahl, die dem Tag (Tag des Monats) des Datum/Zeit-Wertes entspricht. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server DAY ( <Date Expression> ) Oracle EXTRACT ( DAY FROM <Date Expression> ) HOUR ( <Date Expression> ) Liefert eine Zahl, die der Stunde des Datum/Zeit-Wertes entspricht. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server DATEPART ( HOUR, <Date Expression> ) Oracle TO_NUMBER ( TO_CHAR ( <Date Expression>, 'HH24' ) ) MINUTE ( <Date Expression> ) Liefert eine Zahl, die der Minute des Datum/Zeit-Wertes entspricht. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server DATEPART ( MINUTE, <Date Expression> ) Oracle TO_NUMBER ( TO_CHAR ( <Date Expression>,'MI' ) ) SECOND ( <Date Expression> ) Liefert eine Zahl, die der Sekunde des Datum/Zeit-Wertes entspricht. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server DATEPART ( SECOND, <Date Expression> ) Oracle TO_NUMBER ( TO_CHAR ( <Date Expression>, 'SS' ) )"
  },
  "doc/sql/cast-funktionen.html": {
    "href": "doc/sql/cast-funktionen.html",
    "title": "Umwandlungsfunktionen",
    "keywords": "Umwandlungsfunktionen CHAR_TO_DATE ( <Expression>, <format-Number>) Wandelt eine Zeichen-Kette in ein Datum um. Dabei wird das angegebene Format verwendet. Die Format-Nummer muss als konstante Zahl übergeben werden. Sie kann folgende Werte haben: Number Format YY Format YYYY 1 / 101 MM/DD/YY MM/DD/YYYY 2 / 102 YY/MM/DD YYYY/MM/DD 3 / 103 DD/MM/YY DD/MM/YYYY 4 / 104 DD.MM.YY DD.MM.YYYY 5 / 105 DD-MM-YY DD-MM-YYYY 6 / 106 DD MM YYY DD MM YYYY 7 / 107 Mon DD, YY Mon DD, YYYY 8 / 108 hh:mm:ss (24h) 10 / 110 MM-DD-YY MM-DD-YYYY 11 / 111 YY/MM/DD YYYY/MM/DD 12 / 112 YYMMDD YYYYMMDD 20 / 120 YYYY-MM-DD hh:mm:ss (24h) DATE_TO_CHAR ( <date Expression>, <format-Number> ) Wandelt ein Datum in eine Zeichenkette um. Die Format-Nummer arbeitet wie bei der Funktion CHAR_TO_DATE. NUMBER_TO_CHAR ( <Number Expression>, <Decimals>) Wandelt eine Dezimal-Zahl in einen Text um. Dabei wird die Zahl auf die übergebene Anzahl von Dezimal-Stellen gerundet bzw. abgeschnitten. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server CAST ( ROUND ( <Number Expression>, <Decimals> ) AS VARCHAR ) Oracle LTRIM ( TO_CHAR (<Number Expression>, '99999999999999999999999999999999.9999' ) ) Die Anzahl der Nachkommastellen ist gleich <Decimals> INT_TO_CHAR ( <Number Expression>) Wandelt eine Ganzzahl in einen Text um. Bei einer Dezimal-Zahl wird gerundet bzw. es werden die Dezimal-Stellen abgeschnitten. Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server CAST ( ROUND ( <Number Expression>, 0 ) AS VARCHAR ) Oracle LTRIM ( TO_CHAR (<Number Expression>, '99999999999999999999999999999999' ) ) CHAR_TO_DECIMAL ( <Expression> ) Wandelt eine Zeichenkette in eine Dezimal-Zahl um."
  },
  "doc/sql/alpha-funktionen.html": {
    "href": "doc/sql/alpha-funktionen.html",
    "title": "Alphanumerische Funktionen",
    "keywords": "Alphanumerische Funktionen LENGTH ( <text> ) Liefert die Länge des Ausdrucks LOWER ( <text> ) Text in Kleinbuchstaben. UPPER ( <text> ) Text in Großbuchstaben. LTRIM ( <text> ) Schneidet die linken Leerzeichen der Zeichenkette ab. RTRIM ( <text> ) Schneidet die rechten Leerzeichen der Zeichenkette ab. REPLACE ( <text>, <search text>, <replace text> ) Ersetzt im übergebenen Text den Search-Text durch Replace-Text. SUBSTRING ( <text>, <number start>, <number length> ) Gibt den Teil einer Zeichenkette zurück."
  },
  "doc/sql/aggr-funktionen.html": {
    "href": "doc/sql/aggr-funktionen.html",
    "title": "Aggregat-Funktionen",
    "keywords": "Aggregat-Funktionen COUNT ( <Expression> ) Liefert die Anzahl. MIN ( <Expression> ) Liefert das Minimum. MAX ( <Expression> ) Liefert das Maximum. SUM ( <Number Expression> ) Liefert den Summe. AVG ( <Number Expression> ) Liefert den Durchschnitt. VAR ( <Number Expression> ) Liefert die Varianz. STDEV ( <Number Expression> ) Liefert die Standardabweichung."
  },
  "doc/mlkey/woerterbuch.html": {
    "href": "doc/mlkey/woerterbuch.html",
    "title": "Wörterbuch",
    "keywords": "Wörterbuch Alle mehrsprachigen Texte der Anwendung werden in einem zentralen Wörterbuch abgelegt. Organisiert werden die Einträge mit einem eindeutigen alphanumerischen Schüssel - dem MLKey . Die MLKeys und deren Texte können folgendermaßen genutzt werden: In den MLString -Properties überall in Framework Studio Im selbst geschriebenen Methoden-Code (siehe Programmierung ) In den Code-Messages (Exceptions, Message-Boxen) Multilanguage Text Editor Die Bearbeitung des Wörterbuchs erfolgt über den Multilanguage Text Editor . Dieser wird über das Menü Tools / Multilanguage Text Editor geöffnet. Die im Grid angezeigten Sprachen und deren Reihenfolge können in den Options mit der Einstellung Languages in designer eingestellt werden. Die Bearbeitung des Wörterbuchs funktioniert ohne Checkout-Mechanismus. Wenn mehrere Benutzer zur gleichen Zeit an denselben MLKeys arbeiten sollten, dann gewinnt derjenige, der zuletzt den Button Save drückt. Der Editor sammelt alle vorgenommenen Änderungen (Add, Edit, Delete) im Hintergrund. Mit dem Button Save werden diese in das Repository gespeichert. Dabei wird in einer Transaktion zuerst der aktuelle Stand frisch aus dem Repository gelesen, dann die Änderungen erneut auf diesen (evtl. durch einen anderen Benutzer veränderten) Stand angewendet und zuletzt der neue Stand wieder zurück in das Repository gespeichert. Das hat die Folge, dass nach einem Save Änderungen sichtbar sind, die zuvor von einem anderen Benutzer vorgenommen wurden. Eine Ausnahme sind die Basis-Packages. Diese werden aus einem Stand gezogen, den der FrameworkCompiler zum Zeitpunkt des Compile-Laufs in den Workspace gespeichert hat. Suchen von MLKeys Essentiell für die tägliche Arbeit ist das Auffinden von existierenden MLKeys. Dazu wird das Search Feld angeboten. Die Suche scannt alle Felder des MLKeys: MLKey, Comment, Obsolete, Texte. Die Groß-Klein-Schreibung wird nicht berücksichtigt. Es können mehrere Worte eingegeben werden. Dann müssen alle Worte oder Wortteile in irgend einem Feld auftauchen. z.B. MSG_ Artikel Save sucht nach Messages die mit Artikel und Save zu tun haben. Generell wird nach Wortteilen gesucht. Wenn man das Wort oder den Text in Anführungszeichen setzt, wird nach einem exakten Treffer und ganzen Worten gesucht. Das funktioniert auch mit mehreren Worten und in Kombination mit der normalen Suche. z.B. LBL_ \"Kunde\" Ziel des Wörterbuches ist es, Texte wiederzuverwenden und die Anzahl der Einträge auf das Nötigste zu reduzieren. Aus diesem Grund sollte man immer zuerst nach einem MLKey suchen, bevor man einen neuen erfasst. Zu einem logischen Begriff sollen keine zwei MLKeys existieren. Tip Die Suche sollte durchaus kreativ gestaltet werden - besonders bei Texten die eigentlich schon vorhanden sein müssten. Ein Beispiel dafür ist das Wort Einfügen . Möchte man dieses mit der englischen Bezeichnung Add nutzen, stellt man fest, dass es Einfügen schon mit mehreren Übersetzungen gibt, jedoch keine mit der englischen Bezeichnung Add . Sucht man dann aber direkt nach Add , so findet man den statt Einfügen zu verwendenden deutschen Text Hinzufügen . Erfassen neuer MLKeys Mit dem Button Add öffnet sich ein Dialog, in dem der neue MLKey erfasst werden kann. MLKey : Hier wird der MLKey angegeben. Im Customizing-Package wird der Package-Code automatisch vorbelegt. Note Der MLKey kann zu einem späteren Zeitpunkt nicht mehr geändert werden. Der MLKey kann frei vergeben werden, es gibt jedoch ein paar Regeln und Empfehlungen: Es handelt sich um einen C#-Identifier, der auch im Quellcode verwendet wird. Buchstaben, Zahlen, Unterstrich Groß-Klein-Schreibung ist relevant Der sprechende Name sollte sich nach Möglichkeit an den englischen Text anlehnen. z.B. LBL_Article Wenn der Text zu komplex ist - z.B. bei Messages oder Tooltips, dann kann der Name eine Guid enthalten. Diese kann mit dem Button Generate Guid angefügt werden. z.B. MSG_1c9f3024dfc340dfba0651cb92d90ad6 In Customizing-Packages erhält der MLKey einen Package-Code. Dieser wird automatisch vorbelegt. z.B. LBL_K87_SpecialArticle In der eNVenta/WS Standard-Entwicklung sind entsprechende Namensregeln einzuhalten. Wird dieser Dialog aus der MLKey-Suche heraus geöffnet, dann wird abhängig vom jeweiligen Context auch ein passender Präfix vorbelegt: LBL_ / LBL_<PackageCode>_ : Der Suchdialog wurde z.B. aus einem Caption- oder Default-Label-Property aufgerufen. TTT_ / TTT_<PackageCode>_ : Der Suchdialog wurde aus dem Tooltip-Property aufgerufen. MSG_ / MSG_<PackageCode>_ : Der Suchdialog wurde aus dem MessageBox- bzw. Exception-Wizard aufgerufen. Comment : Der Kommentar beschreibt bei Bedarf den MLKey genauer. Das ist sinnvoll, wenn der Text oder auch der MLKey erklärungsbedürftige Abkürzungen beinhaltet oder wenn es ähnliche Texte mit verschiedenen Verwendungszwecken gibt. Obsolete : Ein MLKey kann durch die Eingabe einer Obsolete-Message als veraltet markiert werden. Der Compiler wird bei Verwendung dieses MLKeys diese Message als Warning ausgeben. Weil das Löschen von MLKeys vor allem im Hinblick auf Customizing-Packages Compile-Errors erzeugt, sollte davon abgesehen und stattdessen diese Obsolete-Message verwendet werden. Ein Hinweis auf einen alternativ zu verwendenden MLKey ist empfehlenswert. German : Die Eingabe eines deutschen Textes ist Pflicht, weil Deutsch immer der letzte Fallback ist, wenn eine Fremdsprache nicht gepflegt ist. Fremdsprachen : Über die Radio-Buttons kann festgelegt werden, welche Sprache im 2. Textfeld angezeigt oder bearbeitet werden soll. Diese Texte sind optional. Die angebotenen Fremdsprachen und deren Reihenfolge kann in den Options mit der Einstellung Languages in designer eingestellt werden. German lässt sich in diesem Dialog aber nicht steuern - diese Sprache wird immer im separaten Feld angezeigt. In der eNVenta/WS Standard-Entwicklung muss der englische Text gepflegt werden. Button Untranslatable : Es gibt Texte, die nicht übersetzt werden können wie z.B. Eigennamen oder Einheiten. Dieser Button löscht alle Fremdsprachen-Texte und Schreibt den Text untranslatable in das Comment Feld. Mit der Routine MLKeys Cleanup kann diese Aktion systematisch für das komplette Wörterbuch ausgeführt werden. Bearbeiten von MLKeys Mit dem Button Edit wird für den selektierten MLKey der Bearbeitungs-Dialog geöffnet. Durch einen Doppelklick in das Grid kann der Bearbeitungs-Dialog ebenfalls geöffnet werden. Dabei wird der Fokus automatisch in das Feld gesetzt, das der angeklickten Grid-Zelle entspricht. Das ist praktisch, wenn man z.B. gezielt eine Fremdsprache bearbeiten möchte. Außerdem können einzeilige Texte direkt im Grid bearbeitet werden. Note Die logische Bedeutung des MLKeys darf zu einem späteren Zeitpunkt nicht mehr geändert werden. Der Dialog ist gleich aufgebaut wie der Add-Dialog. Es werden zusätzlich das Create Date des MLKeys und die Edit Dates der Fremdsprachen-Texte angezeigt. Der MLKey kann nicht bearbeitet werden. Wird im Customizing-Package ein MLKey aus dem Basis-Package geöffnet, dann sind einige weitere Felder für die Bearbeitung gesperrt: Comment / Button Untranslatable , Obsolete Die Texte können bearbeitet werden. Mit dem Button View History wird ein weiteres Fenster geöffnet, in dem die Version des Eintrages vor der letzten Bearbeitung angezeigt wird. Siehe Abschnitt History . Copy Entry / Paste Entry Wenn man ein oder mehrere Einträge selektiert hat, kann man mit dem Button Copy Entry diese in die Zwischenablage kopieren. Mit dem Button Paste Entry können diese Einträge z.B. in einer anderen Version des Packages eingefügt werden. Intern benutzt diese Funktion den Import- / Export-Mechanismus . Dieser verwendet ein XML im TMX-Format. Dadurch ist es möglich, das XML vor dem Paste Entry bei Bedarf in einem Text-Editor zu manipulieren, z.B. um den PackageCode des MLKey anzupassen. Mit Paste Entry werden neue MLKeys hinzugefügt. Enthält die Zwischenablage existierende Keys, dann wird vor dem Einfügen ein Auswahl-Dialog angezeigt. Ignore : Es werden keinerlei Einträge ersetzt. Lediglich unbekannte, neue MLKeys werden hinzugefügt. Replace : Es wird der komplette existierende Eintrag ersetzt. Wenn in der Zwischenablage ein Wert nicht gesetzt ist, dann wird dieser entfernt. Merge : Die beiden Einträge werden zusammengeführt. Dabei gewinnt jeweils der Text mit dem neueren Edit-Date. Mit dem Button Cancel wird die komplette Aktion abgebrochen. Dann werden auch keine MLKeys hinzugefügt. Customizing Jedes Customizing-Package verwaltet sein eigenes Wörterbuch. Es können neue MLKeys angelegt werden. Diese müssen den Package-Code enthalten, damit es in Zukunft keine Kollisionen mit Basis-Packages gibt. Bevor ein neuer MLKey angelegt wird, sollte immer geprüft werden, ob es nicht doch einen passenden MLKey gibt. Texte aus Basis-Packages können überschrieben bzw. ergänzt werden. So können z.B. Übersetzungen für Fremdsprachen gepflegt werden. Es muss darauf geachtet werden, dass die Bedeutung des MLKeys nicht geändert wird, weil dieser ggf. an mehreren Stellen in der Anwendung verwendet wird. Wird an einer bestimmten Stelle in der Anwendung ein anderer Text benötigt (in eNVenta kann das z.B. der Text \"Code1\" sein, der ersetzt werden soll) dann muss an dieser Stelle (jedoch möglichst weit unten in der DBColumn oder Metadatentyp) ein anderer MLKey zugeordnet werden. (siehe auch MLString-Vererbung ) Im Customizing-Package übersetzte Texte können exportiert und in das Basis-Package importiert werden. Zu einem späteren Zeitpunkt können die dann redundanten Übersetzung mit der MLKeys Cleanup Routine bereinigt werden. History Bei jeder Bearbeitung im Wörterbuch wird die Vorgänger-Version des MLKeys in einen separaten History-Bereich geschrieben. Aus dem Edit-Dialog heraus kann diese Information mit dem Button View History geöffnet werden. Gibt es keine Informationen, ist der Button deaktiviert. Die History arbeitet pro Sprache. Wird z.B. der englische Text bearbeitet, wird auch nur der alte englische Text mit seinem alten Änderungs-Datum in den History-Bereich übertragen. Die History-Informationen der anderen Sprachen bleiben unverändert. Eine leere Eigenschaft wird nicht historisiert - das gilt insbes. für Comment und Obsolete Message . Wird eine dieser Eigenschaften geleert, dann verbleibt der alte Text auch dann in der History, wenn später wieder ein neuer Text gesetzt wird. Wird ein MLKey gelöscht , wird der komplette Eintrag mit allen Sprachen in die History übertragen. Dieser kann jedoch zu einem späteren Zeitpunkt nicht mehr ohne weiteres gegriffen werden. Tip Wurde ein MLKey versehentlich gelöscht und es gibt einen Compile-Error mit dem entsprechenden MLKey, dann kann man diesen Eintrag wieder neu im Wörterbuch anlegen. Beim anschließenden Bearbeiten des MLKeys können dann die noch existierenden History-Informationen eingesehen werden. Gefüllt wird die History mit dem Save -Button. Framework Studio sammelt alle im Wörterbuch vorgenommenen Änderungen und speichert diese mit dem Save -Button in einem Rutsch. Dadurch kann ein Text auch mehrfach hintereinander geändert werden. Erst nach dem Save steht der alte Text in der History. Note Beim Labeln der Package-Version wird die History-Information nicht in die neue Package-Version übernommen. Die History-Informationen berücksichtigen nur das aktuelle Package. Weil für Basis-Packages das Wörterbuch aus dem letzten Framework-Compiler-Stand gelesen wird, enthält es keine History-Informationen."
  },
  "doc/mlkey/programmierung.html": {
    "href": "doc/mlkey/programmierung.html",
    "title": "Programmierung mit MLKeys",
    "keywords": "Programmierung mit MLKeys Klasse MLKeys Framework Studio generiert aus dem Wörtebuch eine Klasse MLKeys , die alle MLKeys beinhaltet. Sie wird im Compile-Schritt Ressource compiliert und steht somit in der kompletten Applikation zur Verfügung. Sie erbt die MLKeys aus dem Basis-Package - so z.B. auch die SYS_ -Keys aus dem System-Package. Die Klasse wird z.B. folgendermaßen verwendet: this.Global.GetMLText( MLKeys.LBL_Amount ); Alle Quellcodes, die mit MLKeys arbeiten, greifen auf diese Klasse zu - sowohl selbst geschriebener Methoden-Code als auch der von Framework Studio generierte Code. Dadurch findet der CSharp-Compiler alle Probleme, die im Zusammenhang mit MLKeys auftreten können: Compile-Error, wenn ein MLKey nicht mehr existiert. Auch wenn diese z.B. in einem Metadatentypen oder einem Form-Control verwendet werden. Eine Obsolete-Warning, wenn ein mit einer Obsolete-Message versehener MLKey verwendet wird. Die Obsolete-Message wird als Obsolete -Attribut vor den MLKey generiert. Eine Warning, wenn in einem Customizing-Package ein identischer MLKey definiert ist. Die generierte MLKeys -Klasse sieht in etwa so aus: public class MLKeys : BasisPackage_MLKeys { public static readonly MLKey LBL_Amount = new MLKey(\"LBL_Amount\"); public static readonly MLKey LBL_Article = new MLKey(\"LBL_Article\"); public static readonly MLKey TTT_Article = new MLKey(\"TTT_Article\"); public static readonly MLKey MSG_0da9815a719049ae806d3c0ba7d824ff = new MLKey(\"MSG_0da9815a719049ae806d3c0ba7d824ff\"); public static readonly MLKey MSG_0f2ad9d4385b49fc9667ed7eff2d925f = new MLKey(\"MSG_0f2ad9d4385b49fc9667ed7eff2d925f\"); [Obsolete(\"Please use LBL_Amount\")] public static readonly MLKey LBL_Amount2 = new MLKey(\"LBL_Amount2\"); } Warning Es sollten keine eigenen MLKey-Instanzen aus Strings erzeugt werden. Diese können vom Compiler nicht validiert werden. Code Editor Der Code-Editor bietet diverse Unterstützung bei der Arbeit mit der Klasse MLKeys . Im Intellisense werden alle MLKeys angeboten und im jeweiligen Tooltip wird zur besseren Orientierung der deutsche Text angezeigt. Fährt man mit der Maus über einen MLKey, dann wird ein Info-Tooltip mit dem deutschen Text angezeigt. Wird auf einem MLKey der Befehl Goto Definition (F12) ausgeführt, dann öffnet sich der Multilanguage Text Editor und es wird der entsprechende Eintrag selektiert. Methoden am Global-Object Das GlobalObject bietet mehrere Methoden an, mit denen ein MLKey in ein Text überführt werden kann. GetMLText public string GetMLText(MLKey mlkey) Diese Methode ermittelt für den übergebenen MLKey den Text. Es wird die aktuell in der Session gesetzte Sprach-Hierarchie verwendet. public string GetMLText(MLKey mlkey, string iso) Bei dieser Variante wird der Iso-Code der gewünschten Sprache übergeben. Beispiel: FSstring sArticleLabel = this.Global.GetMLText( MLKeys.LBL_Article ); FSString sAmountEn = this.Global.GetMLText( MLKeys.LBL_Amount, \"en\" ); FormatMLText public string FormatMLText(MLKey mlkey, params object[] args) Diese Methode ermittelt für den übergebenen MLKey den Text. Es wird zudem ein String.Format() mit den übergebenen args ausgeführt. Beispiel: FSstring sFormattedText = this.Global.FormatMLText( MLKeys.LBL_MitFormat, \"Text1\", lngAmount ); GetMLKeyText public MLKeyText GetMLKeyText(MLKey mlkey) Diese Variante gibt ein MLKeyText Objekt zurück, welches neben dem Text auch den übergebenen MLKey beinhaltet. Das kann hilfreich sein, wenn der MLKey interessant ist, um ihn z.B. als Fehler-Code zu verwenden. Diese Methode wird z.B. für die Code-Messages benutzt: // FSCodeMessage: Please select only one article. throw new FrameworkApplicationException(this.Global.GetMLKeyText(MLKeys.MSG_1b6b9bea43304e2082d1162d75d9e317), 0); FormatMLKeyText public MLKeyText FormatMLKeyText(MLKey mlkey, params object[] args) Gibt ein MLKeyText -Objekt mit dem formatierten Text und dem MLKey zurück. Diese Methode wird in den Code-Messages benutzt. Beispiel: // FSCodeMessage: Please specify {0} throw new FrameworkApplicationException(this.Global.FormatMLKeyText(MLKeys.MSG_24979a3d247546318dc673c5501d3b15, this.sName), 0); cGlobal EntryPoint In der Klasse cGlobal gibt es einen zentralen Entry-Point GlobalGetMLText . Dieser wird JEDES MAL aufgerufen, wenn aus einem MLKey ein Text erzeugt wird. public virtual string GlobalGetMLText(MLKey mlkey, string iso) Die Sprach-Hierarchie der Session, welche am GlobalObject hinterlegt ist, wird außerhalb dieser Methode aufgelöst. Besteht die Hierarchie aus mehreren Fallbacks (z.B. fr, en, de ), wird diese Methode auch ggf. mehrfach nacheinander mit den unterschiedlichen Iso-Codes aufgerufen. Liefert die Methode einen Wert ungleich null oder String.Empty zurück, wird dieser als Text verwendet und es erfolgt kein weiterer Aufruf. Es ist möglich, diese Methode am cGlobal zu überschreiben und die Ermittlung der Texte zu beeinflussen oder zu überwachen. Warning Diese Methode muss sehr performant gestaltet werden. Komplexe Logik kann die Performance der kompletten Anwendung sehr negativ beeinflussen. Der Basis-Aufruf muss sichergestellt werden. Ansonsten wird das komplette Wörterbuch ausgehebelt und es werden gar keine Texte mehr ermittelt."
  },
  "doc/mlkey/mlstring.html": {
    "href": "doc/mlkey/mlstring.html",
    "title": "MLString",
    "keywords": "MLString Framework Studio bietet eine durchgängige Unterstützung für die Mehrsprachigkeit. An allen Stellen, an denen für den Anwender sichtbare Beschriftungen, Tooltips oder Meldungstexte gepflegt werden bietet Framework Studio einen Editor zur Bearbeitung von mehrsprachigen Texten (Multi Language String / MLString ) an. Der Editor wird in Form einer Tabelle angezeigt, in der die Verschiedenen Sprachen des Textes angezeigt und bei Bedarf auch bearbeitet werden. Die fett gedruckten Angaben sind an dieser Stelle überschrieben. Die normal gedruckten Angaben sind aus dem Basis-Package oder dem Basis-Record geerbt. Siehe auch Abschnitt Vererbung . An erster Stelle steht immer der MLKey . Dieser stellt einen Verweis auf das Wörterbuch dar. Es kann direkt ein MLKey eingeben werden oder mit dem Auswahl-Button ein Such-Dialog geöffnet werden. Dabei handelt es sich um den voll funktionsfähigen Multilanguage Text Editor erweitert um eine Auswahl-Funktion. In diesem Dialog können, wenn kein passender MLKey gefunden wurde, auch ein neuer Key erfasst werden. Die Texte in den einzelnen Sprachen werden im Designer und auch zur Laufzeit der Anwendung aus dem Wörterbuch ermittelt. Die angezeigten Sprachen und deren Reihenfolge können in den Options mit der Einstellung Languages in designer eingestellt werden. Important Ist ein MLKey angegeben, dann ist es davon abzuraten, einzelne Texte zu überschreiben. Im Property-Grid wird der MLString in einer Zeile dargestellt, die zur Anzeige der einzelnen Sprachen erweitert werden kann. Die einzeilige Anzeige stellt einen kombinierten Text in Format @{MLKey} - {deutscher Text} dar. In diesem Text man auch direkt mit vorangestellten @ -Zeichen einen anderen MLKey eintragen - z.B. @LBL_ArticleID . Ein MLKey kann auch (wie oben beschrieben) am entsprechenden MLKey-Eintrag eingetragen oder ausgewählt werden. Vererbung Mit den verschiedenen Records in Framework Studio werden auch die entsprechenden MLStrings vererbt. Dadurch werden im Idealfall die am Metadatentyp definierten Texte über die komplette Kette bis hin zu den Form-Controls durchgereicht. Ein vererbter Text kann an jeder beliebigen Stelle in der Kette überschrieben werden. Es gibt 2 Möglichkeiten: Einen anderen MLKey zuweisen Damit werden alle anderen Texte aus der Basis inkl. MLKeys und den überschriebenen Texten ausgeblendet. Auch wenn der neue MLKey z.B. keinen Text für fr definiert hat, wird ein in der Basis definierter fr Text ausgeblendet. Einen einzelnen Text überschreiben: Warning Darauf sollte möglichst verzichtet werden. Wenn lediglich die Übersetzung gepflegt wird, dann erfolgt dies besser im Wörterbuch. Wenn eine abweichende Bedeutung gewünscht ist, dann sollte ein anderer MLKey angegeben werden. Das überschreibt nur den Text der entsprechenden Sprache. Die anderen nicht überschriebenen Sprachen werden weiter aus der Basis gezogen. Caution In der eNVenta/WS Standard-Entwicklung ist das verboten. Das folgende Bild zeigt eine Vererbungs-Hierarchie. Die Pfeile stellen den Weg dar, über den der Text für das Control ermittelt wird. Dabei wird hier die Sprache fr mit den Fallback-Sprachen en und de verwendet. Der erste Text der auf diesem Weg gefunden wird, wird ausgegeben."
  },
  "doc/mlkey/mlkey-cleanup.html": {
    "href": "doc/mlkey/mlkey-cleanup.html",
    "title": "MLKeys Cleanup",
    "keywords": "MLKeys Cleanup MLKeys-Cleanup ist eine Wartungs-Routine, die bereinigungen im Wörterbuch durchführt. Sie kann über das Menu Tools / Checks / MLKeys Cleanup aufgerufen werden."
  },
  "doc/mlkey/migration.html": {
    "href": "doc/mlkey/migration.html",
    "title": "MLKey Migration",
    "keywords": "MLKey Migration Ziel ist es, dass alle Texte aus den Records entfernt und in das Wörterbuch übertragen werden. Die Records erhalten dafür die MLKeys. Abwärts-Kompatibilität Texte, die bisher an den Records definiert sind, funktionieren auch weiterhin, weil jeder MLString neben dem MLKey explizit gesetzte Texte versteht. So kann man nach dem Update auf die Version 4.2 die Migration in aller Ruhe angehen. In Kunden-Umgebungen ist die Umstellung der eigenen Texte auf MLKeys nicht zwingend notwendig. Das hat aber langfristig einige Nachteile zur Folge - insbesondere in Hinblick auf die Mehrsprachigkeit der Anwendung: Der Language Export / Import funktioniert nur für das Wörterbuch. Individuelle Texte an Records werden nicht (mehr) berücksichtigt. Das Pflegen von Fremdsprachen an den Records ist sehr aufwändig. Die MLKeys aus dem Wörterbuch bringen hingegen die Übersetzungen automatisch in alle Bereiche der Anwendung. MLKeys zuordnen Im Customizing kann man grundsätzlich 2 verschiedene Arten von überschriebenen Texten unterscheiden: Texte, die eine ganz neue Bedeutung haben. Wenn z.B. ein relativ allgemeiner Metadatentyp in einem Component-Property verwendet wird, wird dort am Default-Label ein neuer Text formuliert. In diesen Fällen sollte auf jeden Fall ein entsprechender ggf. neuer MLKey zugeordnet werden. Ändern eines bestehenden Textes. Es wird z.B. ein Metadatentyp customized und das Default-Label geändert - aus dem Begriff \"Angebot\" wird z.B. \"Offerte\". Die Bedeutung bleibt aber dieselbe. In solchen Fällen gilt es zu prüfen, ob es evtl. ratsam ist, diese Änderung direkt im Wörterbuch vorzunehmen. So zieht diese für die gesamte Anwendung. Bei der Migration weist man dann diesen Einträgen den existierenden MLKey zu - auch wenn er identisch mit dem bereits zugeordneten MLKey aus dem Basis-Package sein sollte. In einem späteren Schritt der Migration wird eine redundante Zuordnung dann automatisch eliminiert. MLKeys übertragen Ist das Wörterbuch komplett vorbereitet, ist es an der Zeit, die MLKeys in die Records zu übertragen. In diesem Schritt werden alle Aktionen ausgeführt, die einen Checkout der Records zur Folge haben. So wird die ggf. erhebliche Menge an Checkouts auf das nötigste reduziert. (1) Als FCUser anmelden Weil nach der Konvertierung sehr viel kompiliert werden muss, ist es empfehlenswert als FCUser zu arbeiten. So kann direkt nach dem Kompilieren der Complete Framework Compiler aufgerufen werden und es ist kein zusätzlicher FrameworkCompiler nötig. Mit dem Benutzer FrameworkCompiler anmelden - mit Refresh Workspace. Get DLLs ist nicht notwendig. Framework Studio direkt wieder beenden. Jetzt als FC-User anmelden - mit Refresh Workspace. Das übernimmt den Workspace vom Benutzer FrameworkCompiler. (2) Apply MLKeys Im Fenster Multilanguage Text Migration mit dem Button Load Data (inkl. den Tooltips) alle Daten einlesen. Es sollte jetzt keine offenen Zuordnungen mehr geben - wenn man die Checkbox Show only missing keys setzt, dürfen keine Einträge angezeigt werden. Mit dem Button Apply MLKeys wird die Routine gestartet. Es werden alle zugeordneten MLKeys an die entsprechenden Properties der Records übertragen. Dabei werden ALLE in den jeweiligen Sprachen gesetzten Texte aus den Records entfernt. Somit ziehen ab diesem Zeitpunkt die Texte nur noch aus dem Wörterbuch. (3) Convert Messages Mit dem Button Convert Messages im Fenster Multilangage Text Migration wird die Routine gestartet. Für diese Routine müssen keine Daten eingelesen werden - das gilt auch, wenn sie zu einem späteren Zeitpunkt erneut gestartet wird. Es werden alle Methoden-Codes analysiert und nach Exceptions- und MessageBox-Aufrufen gesucht. Diese werden in das neue Message-Format umgewandelt und die Verweise auf die Text-Collections werden durch den entsprechenden MLKey ersetzt. Warning Die Routine Apply MLKeys muss zuvor ausgeführt worden sein, damit die Message-TextCollections sauber zugeordnete MLKeys besitzen. Alter Exception-Code vor der Konvertierung: #region Required for Exception Editor support. Do not modify manually. //Component type is required. //Severity: 0 ; Buttons: OK; Icon:Error throw new FrameworkApplicationException (String.Format(FSGeneral.ctMessagesFactory.Get(this.Global,3550).Value[Global.SelectedLanguage],new object []{}),0 ); //<ExceptionEditor TextColl=\"Messages\" ID =\"832e0e50c2b748068ba38a2c4422aaab\" Severity=\"0\" EHID=\"\" ></ExceptionEditor> #endregion End of generated section Neuer Exception-Code nach der Konvertierung: // FSCodeMessage: Component type is required. throw new FrameworkApplicationException(this.Global.GetMLKeyText(MLKeys.MSG_445559f2ca44452e8d49ca9515b3a83e), 0); Es ist relativ wahrscheinlich, dass Warnings oder sogar Errors ausgegeben werden. Diese können erst einmal ignoriert werden. Es handelt sich dabei um inhaltliche Probleme und nicht um Compile-Errors. Die Convert Code Messages Routine kann zu einem späteren Zeitpunkt erneut ausgeführt und diese Probleme dann behoben werden. Important Damit sind die Message-Text-Collections jetzt obsolete. Sie dürfen aber nicht gelöscht oder geleert werden, weil sie ggf. noch von Customizing-Packages referenziert werden. (4) MLStrings Cleanup Nachdem alle MLKeys übertragen wurden, können jetzt noch einige Bereinigungen durchgeführt werden. Über das Menü Tools / Checks / MLStrings Cleanup kann das Cleanup-Fenster geöffnet werden. Dort stehen mehrere Routinen zur Auswahl. Diese sollten einer nach der anderen ausgeführt werden. Dabei ist es ratsam zuerst den Button Analyze zu benutzen. Erst nach der Sichtung der Infos und Warnings wird die Routine mit dem Button Cleanup ausgeführt. Clean MLKeys Wird in einem Record (z.B. DBColumn, Form-Control) der MLKey mit demselben Wert überschrieben, wie er in der Basis (z.B. Metadatentyp, Basis-Package) definiert ist, dann wird diese Überschreibung entfernt. Transfer translations Wurden trotz vererbtem MLKey Übersetzungen nur an Records gepflegt, dann wurden diese mit der Migration ggf. nicht in das Wörterbuch übertragen. Das wird mit dieser Routine nachgeholt. Wird an einem Record, der einen MLKey besitzt, eine Übersetzung gefunden und das Wörterbuch kennt diese noch nicht, wird diese in das Wörterbuch übertragen und der Text vom Record entfernt. Dabei gewinnt pro MLKey der erste Record. Wird ein weiterer Record mit gleichem MLKey aber einer anderen Übersetzung gefunden, dann wird dieser als Warning ausgegeben. Beim Cleanup verbleibt dieser Text am Record. Bei einem weiteren Lauf würde dieser Record mit der Routine Clean individual texts gefunden werden. Clean individual texts Die MLKey-Migration berücksichtigt nur Texte, die mindestens in Deutsch und Englisch gepflegt sind. Sind an einem Record nur andere Sprachen definiert, dann wird dieser Text nicht migriert. Oftmals erben diese Records schon einen Text aus der Basis und es sind nur einige Übersetzungen gepflegt. Diese sollen hier bereinigt werden. Es werden Texte, die identisch mit dem Wörterbuch sind, entfernt. Vom Wörterbuch abweichende Texte werden als Warning ausgegeben und NICHT entfernt. Diese müssen in einem weiteren Schritt bearbeitet werden. Warnings bearbeiten Jetzt müssen die aufgetretenen Warnings begutachtet und ggf. manuell bearbeitet werden. Clean individual texts mit Remove different Wurden im vorherigen Schritt die Warnings begutachtet, können mit dieser Aktion alle abweichenden Texte entfernt werden. (5) Compile und CheckIn Jetzt müssen alle Änderungen compiliert werden. Menü Compile / Compile Changes . Nachdem der Compiler erfolgreich beendet wurde, werden alle Elemente eingecheckt. Dabei sollte ein CheckIn-Kommentar z.B. MLKey Migration angegeben werden. Zum Abschluss noch über den Compile-Manager den Button Complete Framework Compiler aufrufen."
  },
  "doc/mlkey/import-export.html": {
    "href": "doc/mlkey/import-export.html",
    "title": "MLKey Import / Export",
    "keywords": "MLKey Import / Export"
  },
  "doc/mlkey/enventa-regeln.html": {
    "href": "doc/mlkey/enventa-regeln.html",
    "title": "eNVenta Regeln für MLKeys",
    "keywords": "eNVenta Regeln für MLKeys Allgemeine Regeln Texte aus den Test-Namespaces : Diese sollen nicht ins Wörterbuch aufgenommen werden. Unübersetzbare Texte : Texte, die nicht übersetzt werden können wie z.B. Eigennamen, müssen mit dem Kommentar untranslatable versehen werden. Sind weitere Hinweise im Kommentar nötig, beginnt der Kommentar mit untranslatable gefolgt von einem Zeilenumbruch. Der Text soll in diesem Fall nur in der deutschen Sprache angegeben werden. Abkürzungen im Namen eines MLKeys : Werden im Namen eines MLKeys bewusst Großbuchstaben als Abkürzungen für Teilworte verwendet, weil z.B. der Name sonst zu lang würde, so muss die Abkürzung nach folgendem Schema im Comment erläutert werden: {Abkürzung1} = {Begriff1}, {Abkürzung2} = {Begriff2} Beispiele: LBL_CCServicePort : Comment = CC = Cross Company LBL_CCNameDebit : Comment = CC = Cost Center Bezeichnung von MLKeys Normalfall Begriffe: LBL_{englische Bezeichnung} Beispiel: LBL_Search Sätze: MSG_{GUID} Beispiel: MSG_f39ceca46b3341ee8b9862d34cfd06b6 Einheiten LBL_{englische Bezeichnung}_Unit Beispiel: LBL _mm_Unit Zeichen LBL_{englische Bezeichnung}_Sign Beispiel: LBL_Plus_Sign für den Text „+“ Ziffern LBL_{englische Bezeichnung}_Digit oder LBL_{englische Bezeichnung}_Digits (Plural) Beispiele: LBL_Nine_Digit für den Text „9“, LBL_EightOClock_Digits für den Text „08:00“ Prozentzeichen LBL_{englischer Prefix}Percent (kein Unterstrich) Beispiel: LBL_DiscountPercent (de = „Skonto %“, en = „Discount %“) Abkürzungen / Ausgeschriebene Texte Wenn für einen englischen Begriff im deutschen am häufigsten eine abgekürzte Schreibweise verwendet wird, so wird der MLKey für den Text mit Abkürzung normal mit LBL_{englische Bezeichnung} benannt. Wird parallel dazu auch der im deutschen (oder anderen Fremdsprachen) ausgeschriebene Text benötigt, so wird der MLKey mit LBL_{englische Bezeichnung}_Full benannt. Wird zu einem Begriff, zu dem es schon eine ausgeschriebene Schreibweise gibt eine Abkürzung benötigt, so wird der MLKey mit LBL_{englische Bezeichnung}_Abbrev bezeichnet. Beispiele: LBL_ClerkScanner (de = „SB-Scanner“), LBL_ClerkScanner_Full (de = „Sachbearbeiter Scanner“) LBL_Reminder (de = „Wiedervorlage“), LBL_Reminder_Abbrev (de = „Wiedervorl.“) Spezialfall: Ein Buchstabe als Abkürzung LBL_{englische Bezeichnung}_Char Beispiele: LBL_Order_Char (de = „B“, en= „O“) LBL_Container_Char (de = „B“, en = „C“) Beschriftung von Mini-Buttons LBL_{englische Bezeichnung}_Mini Wird ein MiniButton (Control Style = MiniEmpty) auf einer Maske mit einer Caption von 1 bis 2 Buchstaben versehen (die typischerweise eine Abkürzung darstellen), so wird der MLKey dazu mit der eigentlichen Bezeichnung, ergänzt um _Mini beschriftet. Dabei ist darauf zu achten, dass die Beschriftungen pro Sprache eindeutig sind. Beispiele: LBL_Customer_Mini (de = „K“, en = „Cu“) LBL_CrossOver_Mini (de = „C“, en = „Cr“) Zwei unterschiedliche deutsche Begriffe, die im Englischen gleich heißen Wenn zwei unterschiedliche Begriffe im englischen durch den gleichen Text beschrieben werden, so werden die Bezeichnungen der MLKeys durch Anhängen eines Zählers beginnend mit 1 im Format _{Zähler} unterschieden. Beispiel: de = „Herkunft“, en = „Source“ => MLKey = LBL_Source de = „Quelle“, en = „Source“ => MLKey = LBL_Source_1 Tooltips Wenn ein Tooltip eindeutig einem einfachen Begriff zugeordnet werden kann, so wird der MLKey mit TTT_{englische Bezeichnung} benannt. Andernfalls wird das Format TTT_{GUID} verwendet. Beispiele: TTT_Fatal (de = „Fatale Einträge anzeigen“) `TTT_584b58008ed04cd2b40b78b70e52402c' (de = „Wert für die Kreditorenvorerfassung-Pufferzeit definieren.“) Note Wenn man einen Tooltip verwenden möchte, zu dem es bereits einen exakt passenden LBL_ Eintrag gibt, so soll dazu kein TTT_ Eintrag angelegt werden! Diese Einträge wären sonst ja logisch äquivalent. Kleingeschriebene Begriffe Sollte man ein Text (z.B. wegen einer Verwendung in einer Textcollection) berechtigterweise klein geschrieben sein und es soll trotzdem ein sprechender Key generiert werden, so ist dieser ebenfalls klein zu schreiben. Beispiel: de = „eins“, en = „one“ => MLKey = LBL_one Texte Alle Texte in allen Sprachen beginnen mit einem großen Buchstaben. Ausnahmen: Abgekürzte Einheiten (z.B. mm) Einträge in Textcollections, soweit diese zwingend alle klein geschrieben werden müssen. Vor Satzzeichen werden keine Leerzeichen verwendet. Ganze Sätze werden mit einem Satzzeichen beendet. Im Englischen werden bei Texten mit bis ca. 4 Worte (Beschriftungen von Eingabefeldern, Menüs, Buttons usw.) alle Worte bis auf Füllwörter wie of , to , in , ... groß geschrieben."
  },
  "doc/mlkey/draft.html": {
    "href": "doc/mlkey/draft.html",
    "title": "Text-Collections",
    "keywords": "Text-Collections Text-Collections arbeiten ebenfalls mit MLKeys. Im Grunde sind sie eine Auflistung von MLKeys. Arbeitsweise Das Wörterbuch wird in xml-Dateien gespeichert. Diese liegen im Broker-Verzeichnis im Ordner lang . Die Dateien werden separat prop Package und Sprache mit dem folgenden Datei-Namen abgelegt: <package>.<iso>.lang.xml Beispiel: <broker-directory> |--lang | |--CustomPackage.de.lang.xml | |--eNVenta.de.lang.xml | |--eNVenta.en.lang.xml | |--eNVenta.fr.lang.xml | |--SystemPackage.de.lang.xml | |--SystemPackage.en.lang.xml Zur Laufzeit werden diese Dateien bei Bedarf einmalig für die benötigten Sprachen eingelesen. Dabei wird die Package-Hierarchie berücksichtigt."
  },
  "doc/mdt/vererbung.html": {
    "href": "doc/mdt/vererbung.html",
    "title": "Vererbung von Metadatentypen",
    "keywords": "Vererbung von Metadatentypen Es ist möglich, Metadatentypen zu vererben. Das macht dann Sinn, wenn Metadatentypen aufeinander aufbauen und z.B. ein gemeinsames Format-Pattern verwenden. Sie können so in einem Basis-Metadatentyp mit allen Datentypen Controls und einem Default-Label definieren. Anschließend brauchen Sie diesen nur abzuleiten und die Ableitung hat die gleichen Eigenschaften wie die Basis. Dann können Sie noch z.B. das Label oder den Wertebereich ändern. In der Ableitung werden die nachträglich geänderten Werte fettgedruckt dargestellt. Eine Ableitung können Sie auf zwei Wegen erstellen: Einen Metadatentypen ableiten, indem Sie den Metadatentyp im Overview auswählen, den Button ( Derive ) drücken und in der Namespace-Auswahl angeben, in welchem Namespace die Ableitung angelegt werden soll. Einem vorhandenen Metadatentypen im Feld Base eine Basis (oder auch eine andere Basis) zuweisen. Warning Wird beim Ändern der Basis auch der Datentyp geändert, kann das evtl. Auswirkungen auf die Programmteile haben, die diesen Metadatentypen bereits verwenden. Unter Umständen lassen sich diese Programmteile nicht mehr kompilieren."
  },
  "doc/mdt/validierung.html": {
    "href": "doc/mdt/validierung.html",
    "title": "Metadatentyp-Validierung",
    "keywords": "Metadatentyp-Validierung Die Einstellungen, die am Metadatentyp zu sehen sind (z.B. Größe, Formatierung, Wertebereich, …), werden bei der Arbeit mit Properties herangezogen, um die Werte zu validieren und ggf. zu korrigieren. Auch der Client nutzt diese Informationen, um falsche Eingaben so früh wie möglich zu unterbinden. Die Zusammenhänge werden durch folgendes Schaubild erläutert: Die folgende Tabelle stellt dar, was passiert, wenn mit einem Wert gearbeitet wird, der denen am Metadatentyp definierten Kriterien nicht entspricht. Einstellung Lesen von Properties aus der Datenbank, die falsche Werte beinhalten Setzen von Properties Client Allgemein Values Value Ranges Es wird ein Null-Wert zurückgegeben. Eine Exception wird geworfen. Nach der Eingabe wird der Wert geprüft und es wird eine Fehlermeldung ausgegeben. Strings Size Bei zu langen Strings wird auf dieser auf die Size gekürzt. Eine Exception wird geworfen. Die Eingabe wird begrenzt. Uppercase, Lowercase Der Text wird ggf. mit ToUpperInvariant() bzw. ToLowerInvariant() korrigiert. Der Text wird ggf. mit ToUpperInvariant() bzw. ToLowerInvariant() korrigiert. Die Eingabe lässt nur Groß- bzw. Kleinbuchstaben zu. Format-Pattern (Regulärer Ausdruck) Es wird FSstring.Null zurückgegeben. Eine Exception wird geworfen. Nach der Eingabe wird der Wert geprüft und es wird eine Fehlermeldung ausgegeben. Es wird zuvor noch versucht, den String mit Uppercase oder Lowercase zu korrigieren, wenn der reguläre Ausdruck selber Uppercase bzw. Lowercase ist. Wenn das funktioniert, dann wird der Wert in Uppercase bzw. Lowercase konvertiert. Numerische Werte Precision Es wird ein Null-Wert zurückgegeben. Eine Exception wird geworfen. Die Eingabe wird begrenzt. Scale (bei Dezimal-Zahlen) Der Wert wird „kaufmännisch“ gerundet. Der Wert wird „kaufmännisch“ gerundet. Die Eingabe wird begrenzt. Positive Integer, Negative Integer (bei Ganzzahlen) Es wird ein Null-Wert zurückgegeben. Eine Exception wird geworfen. Das Minus-Zeichen wird bei der Eingabe unterdrückt bzw. automatisch hinzugefügt. Der Java-Client gibt bei der Eingabe eines falschen Wertes die folgenden Fehlermeldungen aus: Wenn das Format-Pattern (der reguläre Ausdruck) verletzt wird: Wenn ein Wertebereich verletzt wird:"
  },
  "doc/database/ml-column.html": {
    "href": "doc/database/ml-column.html",
    "title": "ML-Column",
    "keywords": "ML-Column Framework Studio bietet einen Mechanismus, um Dateninhalte in mehreren Sprachen zu speichern. Eine beliebige Tabellen-Spalte, in der eine Zeichenkette abgelegt ist, kann im Tabelleneditor als MLColumn markiert werden. Vorraussetzung ist jedoch, dass die Tabelle die Spalte FSRowID enthält, weil diese als eindeutige Referenz auf den Datensatz benötigt wird. Ist eine Tabellen-Spalte als MLColumn gekennzeichnet, dann werden die fremdsprachigen Texte in der Tabelle dbRun_MLStrings abgelegt. Die normale Tabellen-Spalte beinhaltet die Texte in Default-Sprache. Caution Fehlt einer Component das Property ROWID (mit Mapping auf die DB-Column FSRowID ), funktioniert der Mechanismus nicht. Die FSRowID wird benötigt, weil dadurch die Relation zur Übersetzungs-Tabelle hergestellt wird. Customizing-Package Die Eigenschaft MLColumn kann im Customizing-Package gesetzt werden. Somit kann man in Kunden-Umgebungen den Mechanismus gezielt für die gewünschten Tabellen-Spalten aktivieren. Anwendung in Default-Sprache Die Default-Sprache ist de - außer man definiert über die Tabelle ML_Config eine andere Default-Sprache. Wird die Anwendung in der Default-Sprache gestartet, dann arbeitet Framework Studio mit der ganz normalen Spalte der Tabelle - ohne jegliche Sonder-Logik. Die fremdsprachigen Texte können nicht beeinflusst werden. Ändert man einen Text, dann bleiben die ggf. existierenden Übersetzungen unverändert erhalten. Bei Bedarf müsste man die Anwendung anschließend in den Fremdsprachen starten und den gewünschten Text dort ebenfalls anpassen. Anwendung in Fremdsprache Startet man die Anwendung mit einer Fremdsprache, dann greifen besondere Mechanismen. Die entsprechenden Component-Properties behandeln dann ausschließlich den fremdsprachigen Text mit einem Fallback auf die Default-Sprache. Die ML-Column-Logik wird von den ganz normalen Component-Properties behandelt. Dadurch wirkt sie sich automatisch auf alle Bereiche der Anwendung aus - inkl. Form-Databinding und Reporting. Load : Beim Zugriff auf das entsprechende Component-Property wird der Text aus der Tabelle dbRun_MLStrings gelesen. Existiert dort kein Eintrag, wird der Text der Default-Sprache aus der normalen Tabellen-Spalte verwendet. Update : Wird der Text geändert, dann wird der Eintrag in der entsprechenden Fremdsprache überschrieben. Der Text in der Default-Sprache kann nicht verändert werden. Wird der fremdsprachige Text geleert, dann wird beim Save der Component der Eintrag aus der Übersetzungs-Tabelle gelöscht und das Component-Property fällt auf die Default-Sprache zurück. Insert : Beim Anlegen eines neuen Datensatzes wird der eingegebene Text sowohl in der normalen Tabelle als auch in der Fremdsprache gespeichert. Important Die Sprache ist mit dem Start der Anwendung am GlobalObject festgelegt. Es gibt keine Möglichkeit, zur Laufzeit auf die Sprache Einfluss zu nehmen oder die Texte in einer spezifischen Sprache zu behandeln. Tips für Entwickler Finden von MLColumns Wird eine DBColumn als MLColumn gekennzeichnet wird dafür der folgende Code generiert: public class Package_FSColumnName : FS.Demo.MDT.ArticleName { public Package_FSColumnName() { this.m_IsMLColumn = true; } } Dadurch können alle MLColumns mit dem Text this.m_IsMLColumn = true; über die Code-Suche gefunden werden. Dabei die Suche auf die DBTables einschränken."
  },
  "doc/mdt/metadatentypen.html": {
    "href": "doc/mdt/metadatentypen.html",
    "title": "Metadatentypen",
    "keywords": "Metadatentypen Die Idee der Metadatentypen kommt daher, dass bestimmte Felder innerhalb einer Anwendung immer wieder auftauchen (z.B. Artikelnummer, Kundennummer, ...). Deshalb können solche Felder an einer zentralen Stelle definiert werden, was Fehler in der Felddefinition verhindert und Redundanzen minimiert. Dabei werden Informationen wie das Label, das Datenformat, das zugehörige Control, die mehrsprachige Bezeichnung usw. hinterlegt, so dass sich der Arbeitsaufwand bei der späteren Arbeit mit dem Metadatentypen minimiert. Sie erkennen Metadatentypen an einem - Icon vor der Bezeichnung. Metadatentypen bearbeiten Um einen Metadatatypen zu bearbeiten, doppelklicken Sie den entsprechenden Eintrag auf der Registerkarte Namespaces . Der Metadatentyp wird im Hauptfenster des Framework Designers angezeigt. Der Metadatentyp kann in verschiedenen Teilen der Anwendung zum Einsatz kommen: Er kann auf unterster Ebene der Spalte einer DBTable zugeordnet werden. Er kann in Components oder Forms als Datentyp für Properties verwendet werden. Deshalb nehmen Sie an einem Metadatentyp verschiedene Einstellungen vor: Name : Geben Sie die Bezeichnung des Metadatentyps an. Datatype Database : Benennen Sie den Datentyp der Spalte in der Datenbank. Datatype Application : Gibt den FS-Datentyp des Metadatentyps an. Dieser Datentyp wird später in den Components und Forms gezogen. Die folgende Tabelle zeigt, welche Database-Datentypen mit welchem Application-Datatype kombiniert werden können: FSbool FSbyte FSbyteArray FSDateTime FSdecimal FSdouble FSfloat FSint FSlong FSshort FSstring Binary X Boolean X Byte X Date X DateTime X Time X Double X Currency X X X Single X X X Decimal X X Big Int X Integer X X Smallint X X X Tiny Int X X X Ansi String X Long Varchar X String X null X X X X X X X X X X X Warning Wenn Sie die Datentypen nachträglich ändern, kann das evtl. Auswirkungen auf Programmteile haben, die diesen Metadatentypen bereits verwenden. Unter Umständen lassen sich diese Programmteile nicht mehr kompilieren. Die Einstellungen für Size, Precision und Scale hängen von der Auswahl des Datatype Database ab. Je nachdem, ob der Datenbank-Datentyp Zeichen, Ganzzahlen oder Gleitkommazahlen unterstützt, sind die Felder für Eingaben zugänglich. Size : Definiert die Feldlänge bei Zeichenfeldern. Precision : Anzahl der Stellen inkl. eventueller Nachkommastellen bei numerischen Feldern. Scale : Anzahl der Nachkommastellen bei Dezimal -Feldern. Format : Gibt das Anzeige-Format des Felds an. Das Format wirkt sich in der Darstellung des Felds auf einem Form aus. Format Pattern : Wird im Feld Format User Defined gewählt, ist es möglich hier selbst ein Format anzugeben. Es können Formate für Zahlen, Daten und Zeichenketten entsprechend der Standard-Definition für reguläre Ausdrücke eingegeben werden. Siehe auch Format-Pattern Registerkarte Description Hier kann eine Beschreibung des Metadatentyps eingegeben werden. Registerkarte Values Für einen Metadatentypen kann definiert werden, welche Werte er annehmen darf. Wird hier nichts angegeben, sind alle Werte möglich, die der entsprechend hinterlegte Datentyp zulässt. Es können mehrere Werte oder Wertebereiche angegeben werden. From : Gibt die untere Grenze eines Wertebereichs an. Warning Ist nur dieses Feld gefüllt (und To nicht), wird dies als Wert und nicht als Wertebereich angesehen. To : Gibt die obere Grenze eines Wertebereichs an. Button Add New Range : Mit dem Button Add New Range kann ein neuer Bereich hinzugefügt werden. Button Remove Range : Mit dem Button Remove Range kann ein Bereich gelöscht werden. Registerkarte Default Label Einem Metadatentypen kann ein Label zugewiesen werden. Dieses Label wird im Form links neben dem Control des Metadatentyps angezeigt. Das Label kann mehrsprachig hinterlegt werden. Tip Es ist möglich, dieses Label in den Components und im Form zu überschreiben. Registerkarte Control Types Die Registerkarte ControlTypes zeigt an, welche Controls später im Form zur Verfügung stehen sollen. Es ist möglich, einem Metadatentypen mehrere Controls zuzuordnen. Es kann aber maximal ein Control als Default gekennzeichnet sein. Das als Default gekennzeichnete Control wird zunächst angezeigt, wenn ein Property (welches diesen Metadatentypen verwendet) in ein Form gezogen wird. Das Default-Control kann dann auf weitere, hier hinterlegte Controls geändert werden. Diese Liste von Controls kann auch im DBTable oder in der einer Component ergänzt werden. Ist kein Control als Standard-Control hinterlegt, wird ein Editfeld angenommen. Mit dem Button Add wird ein neuer Control-Type hinzugefügt. Es öffnet sich das Fenster Assign Controls. In diesem Fenster sind alle Controls aufgelistet, einschließlich der Controls, die Sie in den Control Default Styles definieren können (siehe Kapitel Control Default Styles). Wählen Sie hier ein Control aus und setzen Sie ggf. die Checkbox is Default . Mit dem Button OK wird das Control der Liste hinzugefügt. Mit dem Button Change können Sie das Control ändern. Es öffnet sich wieder wie bei Add das Fenster Assign Controls . Sie können hier ein anderes Control auswählen und dann mit OK bestätigen. Mit dem Button Delete wird das markierte Control gelöscht."
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE",
    "keywords": "This is the HOMEPAGE Refer to Markdown for how to write markdown files. Quick Start Notes Add images to the images folder if the file is referencing an image."
  },
  "doc/tables/ml_config.html": {
    "href": "doc/tables/ml_config.html",
    "title": "ML_Config (Business-Datenbank)",
    "keywords": "ML_Config (Business-Datenbank) Die ML-Columns arbeiten standardmäßig mit der Default-Sprache de Deutsch. Ist die \"führende\" Sprache nicht de , dann kann über diese Tabelle die korrekte Default-Sprache eingestellt werden. Das geschieht in der Business-Datenbank, wo auch die Übersetzungs-Tabelle dbRun_MLStrings abgelegt ist, welche die anderssprachigen Werte speichert. Die Einstellung muss in dieser Datenbank stehen, damit sichergestellt ist, dass die Übersetzungs-Tabelle immer mit derselben Konfiguration angesprochen wird - unabhängig davon, wie die Anwendung FS-seitig konfiguriert ist. Die Tabelle muss bei Bedarf manuell per SQL angelegt werden. Dazu können die folgenden Scripte verwendet werden. Das Iso-Sprach-Kürzel de muss entsprechend durch das gewünschte Iso-Sprach-Kürzel ersetzt werden. -- SQL-Server CREATE TABLE ML_CONFIG ( CONFIG_KEY VARCHAR(10) NOT NULL, DEFAULT_LANGUAGE VARCHAR(2), CONSTRAINT PK_ML_CONFIG PRIMARY KEY CLUSTERED (CONFIG_KEY) ); INSERT INTO ML_CONFIG (CONFIG_KEY, DEFAULT_LANGUAGE) values ('!!!!!', 'de'); -- Oracle CREATE TABLE ML_CONFIG ( CONFIG_KEY VARCHAR2(10) NOT NULL, DEFAULT_LANGUAGE VARCHAR2(2) NULL, CONSTRAINT PK_ML_CONFIG PRIMARY KEY (CONFIG_KEY) ); INSERT INTO ML_CONFIG (CONFIG_KEY, DEFAULT_LANGUAGE) values ('!!!!!', 'de'); Caution Wenn die Konfiguration geändert wurde, dann müssen die Anwendungs-Broker und FS-Services neu gestartet werden, weil diese Informationen aus Performance-Gründen zwischengespeichert werden. Die Konfiguration darf nicht nachträglich geändert werden, weil ansonsten die in der Übersetzungs-Tabelle abgelegten Texte nicht mehr stimmen. Wenn die Konfiguration zu Beginn bei Einrichtung der Business-Datenbank vorgenommen wird, dann muss im Anschluss sichergestellt werden, dass die Tabelle dbRun_MLStrings leer ist. Wenn bei einer Änderung der Konfiguration doch dbRun_MLStrings -Inhalte erhalten bleiben sollen, müssen alle Einträge, für die neue Default-Sprache gelöscht werden."
  },
  "doc/tables/dbrun_mlstrings.html": {
    "href": "doc/tables/dbrun_mlstrings.html",
    "title": "dbRun_MLStrings (Business-Datenbank)",
    "keywords": "dbRun_MLStrings (Business-Datenbank) In dieser Tabelle werden die Fremdsprachen-Texte für die ML-Columns abgelegt. Die FS-Update-Logik erzeugt und aktualisiert diese Tabelle automatisch. Spalte Beschreibung ML_TableName Der Name der Datenbank-Tabelle (Uppercase) ML_ColumnName Der Name der MLColumn-Tabellen-Spalte (Uppercase) ML_FSRowID Die FSRowID des referenzierten Datensatzes. Diese kann für SQL-Abfragen verwendet werden. ML_Iso Der 2-stellige Iso-Code der Fremdsprache (Lowercase) ML_Text Der fremdsprachige Text (Langtext)"
  },
  "doc/html-client/controls.html": {
    "href": "doc/html-client/controls.html",
    "title": "Controls",
    "keywords": "Controls Symbol Bedeutung + Property oder Event wird vollständig unterstützt - Property oder Event wird nicht unterstützt o Property oder Event wird teilweise unterstützt (Anmerkung beachten) Allgemein Die folgende Auflistung beinhaltet diejenigen Properties und Events, die an allen verfügbaren Controls im HTML-Client vorhanden sind. Properties Name Unterstützt Anmerkung Alignment + BackColor + BorderColor + BorderRadius + BorderThickness + ButtonGroupDataSource + Caption + DockPanel.ItemSize + Font Family - Ist im Client hart definiert auf die Hierarchie Arial -> Helvetica -> Sans-Serif. Font Bold + Font Italic + Font Underline + ForeColor + IsEditable + LabelTemplate + MapEnterToTabAction - Margin + MaxSize + MinSize + Name + Padding + Shortcut - TabStop + ToolTip + Visibility + Events Name Unterstützt OnCanDrop - OnDrag - Form Properties Name Unterstützt BadgeImage DataSource - IsCloseIconVisible + MainMenu - PreferredSize - SymbolImage - Title + VerticalScrollbarOverlay - Events Name Unterstützt OnLoad + OnClose + Dock Panel Properties Name Unterstützt BackgroundImage - BackgroundScaleMode - DockPanelOrientation + Spacing + Events Name Unterstützt OnEnter - OnLeave - Wrap Panel Properties Name Unterstützt BackgroundImage - BackgroundScaleMode - ContentAlignment + InvertFlowDirection + Spacing + WrapArrangement + Events Name Unterstützt OnEnter - OnLeave - Field Panel Properties Name Unterstützt BackgroundImage - BackgroundScaleMode - RowLabelTemplate + SynchronizeColumns + Events Name Unterstützt OnEnter - OnLeave - Field Row Properties Name Unterstützt FieldRowSize + LabelMode + OptimizeGeneratedLabels + Button Properties Name Unterstützt ShowCaption + TabStop + Events Name Unterstützt OnClick + OnEnter + OnLeave + ImageButton Properties Name Unterstützt BadgeImage DataSource - CaptionAlign - ContextMenu - DataSource - DisabledImage + HighlightImage - Image + MouseOverImage + PressedImage + ScaleMode - ShowCaption + SymbolImage - TabStop + Events Name Unterstützt OnClick + OnEnter + OnLeave + Label Properties Name Unterstützt DataSource + TextAlign + Events Name Unterstützt OnEnter + OnLeave + CheckBox Properties Name Unterstützt DataSource + ShowCaption + Events Name Unterstützt OnClick + OnEnter + OnLeave + Editfield Properties Name Unterstützt Anmerkung DataSource + DisabledBackColor o Wird dynamisch im Client berechnet DisplayLength + Editor o Nur \"PlainText”, \"HTML” wird nicht unterstützt Format + FormatPattern o Funktioniert nur mit Format \"Decimal\" Multiline + PasswordChar + Client generiert ein Password-Feld, wenn gesetzt, das Passwort-Zeichen selbst kann aber nicht geändert werden (in Web Browsern technisch nicht möglich). ScrollBars + SelectionEnd - SelectionStart - TabStop + TextAlign + WordWrap + Events Name Unterstützt OnEnter + OnLeave + OnValidated + ComboBox Properties Name Unterstützt DataSource + DisplayLength + EditStyle + List + ListOrder + MaxDropDownSize + TabStop + Events Name Unterstützt OnEnter + OnLeave + OnSelectionChanged + RadioButton Properties Name Unterstützt CaptionDataSource + DataSourceOnValue + Events Name Unterstützt OnEnter + OnLeave + OnClick + ListView Properties Name Unterstützt DataSource + ItemArrangement + ItemSize + SelectedItems + SelectionMode + SelectorPosition + Spacing + Template + Events Name Unterstützt OnEnter - OnLeave - OnItemActivated + OnItemSelectionChanged +"
  },
  "doc/html-client/funktionsumfang.html": {
    "href": "doc/html-client/funktionsumfang.html",
    "title": "Funktionsumfang",
    "keywords": "Funktionsumfang Der HTML-Client befindet sich noch in der agilen Entwicklung. Verglichen mit dem ausgereiften JavaClient ist der Funktionsumfang des HTML-Clients noch überschaubar. Neue Funktionen und die Unterstützung für weitere Controls werden kontinuierlich weiter entwickelt und veröffentlicht. Note Wird in diesem Kapitel etwas nicht erwähnt, wie z.B. ein Property eines Controls, eine Action oder andere Client-Funktionalitäten, so muss davon ausgegangen werden, dass diese noch nicht unterstützt werden. Handhabung von nicht unterstützten Funktionalitäten Es gibt im Form Designer oder im Code Editor von Framework Studio keine Limitierungen, die den Entwickler auf den Funktionsumfang des HTML-Clients einschränken. Werden Controls, Actions oder anderweitige Funktionalitäten genutzt, die vom HTML-Client nicht unterstützt werden, so werden diese (so weit es möglich ist) vom Client ignoriert. Wenn z.B. ein Grid-Control in ein Form eingebaut wird, so wird dieses erst garnicht vom HTML-Client interpretiert. Dasselbe gilt für nicht unterstützte Properties an Controls. Frameset Der HTML-Client besitzt kein Frameset. Alle geöffneten Forms werden in einer einzigen Liste organisiert. Es ist irrelevant, welchem Frame ein Form in einem Workflow zugeordnet ist. MessageBox und ExceptionBox Werden vollständig unterstützt inkl. Buttons, Icons, DialogResult und EventHandler. Werden im Client als modale Popups angezeigt. Modale Forms Modale Forms, die das Wechseln zu einem anderen Form unterdrücken, werden vom HTML-Client vollflächig angezeigt. Dabei wird der Menü-Button ausgeblendet. Verhalten beim Drücken des „Zurück“-Button auf einem mobilen Gerät: Wenn am Form das Property IsCloseIconVisible auf true gesetzt ist, wird der modale Dialog geschlossen. Wird dem Form über die Action SetCloseButton ein Button zugewiesen, dessen Click-Event beim Schließen ausgelöst werden soll, wird dies beim Drücken des Zurück-Button ebenfalls ausgelöst. Drag & Drop Drag & Drop und alle damit verbundenen Events werden vom HTML Client nicht unterstützt. Shortcuts und ToolTips Da für den HTML-Client die mobile Welt im Vordergrund steht, werden Shortcuts und ToolTips noch nicht unterstützt, da diese auf einem Handy bzw. Tablet keinen Sinn machen. Control Styles Control Styles werden für alle im HTML-Client verfügbaren Controls unterstützt. Wird im Form Designer einem Control ein Control Style zugeordnet, so werden dessen Properties korrekt interpretiert bzw. die Property-Hierarchie beachtet. Actions Es werden derzeit folgende Actions unterstützt: SetEnabled SetVisible SetCloseButton Schließen eines Forms durch den Broker mit \"this.Close()\" Zurück-Button auf mobilen Geräten Mobile Geräte (z.B. Android) besitzen teilweise einen Zurück-Button. Der HTML Client unterstützt diesen kontextabhängig. Es gibt drei Prioritätsebenen, die nacheinander durchlaufen werden. Wird in einer Ebene auf das Drücken des Zurück-Buttons reagiert, so werden die darunter liegenden Ebenen nicht mehr behandelt. Die Ebenen geordnet nach Priorität sind: Overlays Modale Dialoge Normale Anzeige Overlays Als Overlay definiert sich alles, was sich mit einem ausgegrauten Hintergrund über die restliche Anzeige legt, wie z.B. MessageBoxen oder die ComboBox-Auswahl. Wenn ein Overlay geöffnet ist und der Zurück-Button gedrückt wird, wird das Overlay geschlossen. Eine MessageBox kann nur durch den Zurück-Button geschlossen werden, wenn ein Abbrechen-Button vorhanden ist. Modale Dialoge Modale Dialoge können mit dem Zurück-Button geschlossen werden, wenn das Property IsCloseIconVisible am Form auf true gesetzt ist. Wurde dem Form über die Action SetCloseButton ein Button mit einem Click-Event zugeordnet, so wird beim Drücken des Zurück-Buttons das Click-Event ausgelöst. Normale Anzeige Befindet sich der HTML Client in einem normalen Form, wird beim Drücken des Zurück-Buttons das Beenden der Application angestoßen, was mit der Rückfrage, ob die Session beendet werden soll, einher geht. Befindet sich der HTML Client im Broker-Auswahldialog, wird die Anwendung ohne Rückfrage geschlossen."
  },
  "doc/html-client/lizenzen.html": {
    "href": "doc/html-client/lizenzen.html",
    "title": "Hinweise zu Lizenzen",
    "keywords": "Hinweise zu Lizenzen Timeout Aus technischen Gründen kann der HTML-Client weder im Browser, noch in der App auf einem mobilen Gerät dem Broker mitteilen, dass er beendet wurde. Z.B. kann auf einem Android-Gerät nicht unterschieden werden, ob eine App nur in den Ruhezustand gewechselt hat oder komplett geschlossen wurde. Dies hat zur Folge, dass Broker-Sessions, die von einem HTML-Client aus gestartet wurden, offen bleiben, bis der Broker sie von sich aus verwirft. Diese Zeitspanne beträgt 12 Stunden . ClientID Um dem Verbrauch von Lizenzen entgegen zu wirken, wird im HTML-Client eine ClientID generiert, die den Browser bzw. das mobile Gerät identifiziert und mit zum Broker geschickt wird. Im Browser ist die ClientID eine UUIDv4, die im Code generiert wird, auf mobilen Geräten wird die Cordova-Geräte-ID herangezogen. Über die ClientID kann der Broker den Browser bzw. das mobile Gerät identifizieren und bei einem erneuten Start einer Anwendung diesem die bisherige Lizenz zuordnen. Zusatz für mobile Geräte Die ClientID auf mobilen Geräten ist immer gleich. Ein mobiles Gerät verbraucht am Broker eine Lizenz unabhängig vom Benutzer. Zusatz für Browser Ein Browser hat keinen Zugriff auf das Betriebssystem und den Computer. Die generierte ClientID wird deshalb im sogenannten „Local Storage“ des Browsers gespeichert. Dieser Speicher ist je nach Konfiguration benutzerabhängig. Beispiel: Ist auf einem Computer, den drei Benutzer verwenden, Firefox als Browser installiert, so hat jeder Benutzer seinen eigenen Local Storage. Dies bedeutet, dass jeder Benutzer seine eigene ClientID bekommt und somit auch drei Lizenzen am Broker verbraucht werden. Dies gilt auch, wenn ein Benutzer dieselbe Applikation einmal im Firefox und einmal im Chrome öffnet. Die beiden Browser haben separate Local Storages und verbrauchen somit auch wieder zwei Lizenzen am Broker."
  },
  "doc/html-client/android-app.html": {
    "href": "doc/html-client/android-app.html",
    "title": "Android App",
    "keywords": "Android App Für die volle Integration des HTML-Clients in die mobile Welt, stellen wir im Google Play Store den Client als Android App zur Verfügung. Diese ist vom Funktionsumfang equivalent zur Browser-Version. Name der App : Framework Studio Mobile Client Store Link : https://play.google.com/store/apps/details?id=com.fs.htmlclient Note Wir können derzeit noch keine Aussagen zu einer Veröffentlichung der App für iOS treffen. Einrichten eines Brokers Es muss natürlich definiert werden, mit welchem Broker sich der Mobile Client verbinden soll. Nach dem Start der App wird der Login angezeigt. Über den Button „+ New“ können beliebig viele Broker zur Liste hinzugefügt werden. Es ist auch möglich, Urls von Development Brokern hinzuzufügen. Dabei ist zu beachten, dass der Mobile Client nur auf den Development Broker zugreifen kann, wenn dieser über das Netzwerk erreichbar ist. Dazu muss Framework Studio mit Administrator-Rechten ausgeführt werden. Ob der Development Broker vom Netzwerk aus zugreifbar ist, kann über das Tray-Icon geprüft werden:"
  },
  "doc/html-client/index.html": {
    "href": "doc/html-client/index.html",
    "title": "HTML-Client (Beta)",
    "keywords": "HTML-Client (Beta) Neben dem Java Client bietet Framework Studio auch einen HTML-Client für Desktop- sowie mobile Geräte an. Dieser befindet sich aktuell in der Beta-Phase und unterstützt noch deutlich weniger Funktionen und Controls als der Java Client. Was derzeit schon mit dem HTML-Client möglich ist, erfahren Sie in diesem Kapitel. Aktivieren des HTML-Clients Damit der HTML-Client über den Run Wizard und die Broker-Startseite gestartet werden kann, muss in der Application die Checkbox Supports Html Client gesetzt werden. Dies soll vermeiden, dass bisher existierende Applikationen ohne Weiteres im HTML-Client gestartet werden können, da diese sehr wahrscheinlich auf Controls und Funktionalitäten aufbauen, die derzeit vom HTML-Client noch nicht oder nicht vollständig unterstützt werden. Browser-Unterstützung Desktop Der HTML-Client basiert auf modernster Webtechnologie und benötigt deshalb auch einen aktuellen Browser für die Ausführung. Für Desktopsysteme empfehlen wir folgende Browser : Chrome Firefox Edge Safari (OSX) Auch alle weiteren Browser, basierend auf der Chromium-Engine (Opera, Vivaldi), funktionieren problemlos. Note Internet Explorer 11 kann auf Grund der betagten JavaScript-Engine nicht mehr verwendet werden. Mobile Endgeräte Eine auf den HTML-Client ausgelegte Applikation kann über die Broker-Startseite natürlich auch von einem beliebigen mobilen Gerät aus gestartet werden, welches über einen aktuellen Browser verfügt. Die Unterstützung der Browser im mobilen Umfeld ist sehr schwer zu beurteilen, da es gerade auf Android eine extrem große Auswahl gibt. Wir empfehlen deshalb folgende mobilen Browser : Chrome Firefox Edge Dolphin Android Browser (ab Android 5.1) Safari (ab iOS 10)"
  },
  "doc/mdt/format-pattern.html": {
    "href": "doc/mdt/format-pattern.html",
    "title": "Format-Pattern im Metadatentyp",
    "keywords": "Format-Pattern im Metadatentyp Je nachdem, welcher Datentyp ausgewählt wurde, ändern sich die Einstellungen für das Format-Pattern. Format Pattern für Zeichenketten Bei Zeichenketten können im Format reguläre Ausdrücke eingegeben werden. Die Zeichenketten müssen dann dem definierten regulären Ausdruck entsprechen. Im Java-Client wird bereits bei der Eingabe überprüft, ob die Zeichenkette dem Ausdruck genügt. Format-Pattern für Zahlen Bei Zahlen können gewöhnliche Zahlenformate eingegeben werden. Neben dem Feld Format-Pattern wird eine Beispiel-Zahl für das eingegebene Format dargestellt. Warning Es ist aber zu beachten, dass als Tausender-Trennzeichen das Komma und als Dezimal-Trennzeichen der Punkt dient. Gültige Formate wären z.B. #,##0.00 ergibt 1.234,56 0.00 ergibt 1.234,56 #,##0.00 ’EUR’ ergibt 1.234,56 EUR Format-Pattern für Datum Bei Datum können gewöhnliche Datum-Formate eingegeben werden. Neben dem Feld Format-Pattern wird als Beispiel das aktuelle Systemdatum entsprechend formatiert dargestellt. Der Button Default Values setzt die Werte auf die vom Framework Studio vorgegebenen Standardwerte zurück."
  },
  "doc/comp/components.html": {
    "href": "doc/comp/components.html",
    "title": "Components",
    "keywords": "Components"
  },
  "api/FrameworkSystems.FSUtils.BuildExceptionString.html": {
    "href": "api/FrameworkSystems.FSUtils.BuildExceptionString.html",
    "title": "Method BuildExceptionString",
    "keywords": "Method BuildExceptionString BuildExceptionString(Exception) Baut die Details einer Exception in einem String zusammen. Ist ein Workaround, weil in dornet 4.0 das Verhalten von System.Exception.ToString() geändert wurde. Declaration public static string BuildExceptionString(Exception ex) Parameters Type Name Description System.Exception ex Returns Type Description System.String"
  },
  "api/FrameworkSystems.FSUtils.UpdateHelper.html": {
    "href": "api/FrameworkSystems.FSUtils.UpdateHelper.html",
    "title": "Method UpdateHelper",
    "keywords": "Method UpdateHelper UpdateHelper() UpdateHelper.exe Declaration public static void UpdateHelper()"
  },
  "api/FrameworkSystems.FSUtils.EscapeCommandLineArgs.html": {
    "href": "api/FrameworkSystems.FSUtils.EscapeCommandLineArgs.html",
    "title": "Method EscapeCommandLineArgs",
    "keywords": "Method EscapeCommandLineArgs EscapeCommandLineArgs(String) Wandelt den übergebenen String so um dass er als Command-Line-Argument verwendet werden kann. Dabei werden Leerzeichen, \\ und \" escaped. Declaration public static string EscapeCommandLineArgs(string arg) Parameters Type Name Description System.String arg Returns Type Description System.String EscapeCommandLineArgs(IEnumerable<String>) Wandelt die ünergebenen String-Argumente in einen string mit Command-Line-Arguments um. Dabei werden Leerzeichen, \\ und \" escaped. Declaration public static string EscapeCommandLineArgs(IEnumerable<string> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > args Returns Type Description System.String EscapeCommandLineArgs(String[]) Wandelt die ünergebenen String-Argumente in einen string mit Command-Line-Arguments um. Dabei werden Leerzeichen, \\ und \" escaped. Declaration public static string EscapeCommandLineArgs(params string[] args) Parameters Type Name Description System.String [] args Returns Type Description System.String"
  },
  "api/FrameworkSystems.FSUtils.GetMutex.html": {
    "href": "api/FrameworkSystems.FSUtils.GetMutex.html",
    "title": "Method GetMutex",
    "keywords": "Method GetMutex GetMutex(String) Erzeugt einen Mutex mit dem übergebenen Namen und wartet ggf. darauf bis dieser von einem anderen Prozess wieder freigegeben wird. Beim Dispose des zurückgegebenen Objektes wird der Mutex freigegeben. Am besten mit einem using verwenden. using (FSUtils.GetMutex(\"MyMutex\")) { /* aktion */ } Declaration public static IDisposable GetMutex(string mutexName) Parameters Type Name Description System.String mutexName Es kann auch ein Dateiname übergeben werden. Returns Type Description System.IDisposable"
  },
  "api/FrameworkSystems.FSUtils.html": {
    "href": "api/FrameworkSystems.FSUtils.html",
    "title": "Class FSUtils",
    "keywords": "Class FSUtils Inheritance System.Object FSUtils Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : FrameworkSystems Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public abstract class FSUtils Properties Name Description UserAppDataPath Methods Name Description BuildExceptionString(Exception) Baut die Details einer Exception in einem String zusammen. Ist ein Workaround, weil in dornet 4.0 das Verhalten von System.Exception.ToString() geändert wurde. EscapeCommandLineArgs(IEnumerable<String>) Wandelt die ünergebenen String-Argumente in einen string mit Command-Line-Arguments um. Dabei werden Leerzeichen, \\ und \" escaped. EscapeCommandLineArgs(String) Wandelt den übergebenen String so um dass er als Command-Line-Argument verwendet werden kann. Dabei werden Leerzeichen, \\ und \" escaped. EscapeCommandLineArgs(String[]) Wandelt die ünergebenen String-Argumente in einen string mit Command-Line-Arguments um. Dabei werden Leerzeichen, \\ und \" escaped. GetMutex(String) Erzeugt einen Mutex mit dem übergebenen Namen und wartet ggf. darauf bis dieser von einem anderen Prozess wieder freigegeben wird. Beim Dispose des zurückgegebenen Objektes wird der Mutex freigegeben. Am besten mit einem using verwenden. using (FSUtils.GetMutex(\"MyMutex\")) { /* aktion */ } PerfCounterStart() Gibt eine sehr genaue CPU-Zeit zurück. Wenn man dieses Ergebnis kann man in PerfCounterStop übergeben, um eine Zeit-Differenz zu erhalten. PerfCounterStop(Int64) Ermittelt eine sehr genaue Zeitdifferenz. UpdateHelper() UpdateHelper.exe"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSAssemblyVersionListEntryAttribute.-ctor.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSAssemblyVersionListEntryAttribute.-ctor.html",
    "title": "Constructor FSAssemblyVersionListEntryAttribute",
    "keywords": "Constructor FSAssemblyVersionListEntryAttribute FSAssemblyVersionListEntryAttribute(String, VersionEntryPurpose) Declaration public FSAssemblyVersionListEntryAttribute(string version, VersionEntryPurpose purpose) Parameters Type Name Description System.String version VersionEntryPurpose purpose"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSAssemblyVersionListEntryAttribute.Purpose.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSAssemblyVersionListEntryAttribute.Purpose.html",
    "title": "Property Purpose",
    "keywords": "Property Purpose Purpose Der Zweck dieser Version Declaration public VersionEntryPurpose Purpose { get; } Property Value Type Description VersionEntryPurpose"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSAssemblyVersionListEntryAttribute.Version.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSAssemblyVersionListEntryAttribute.Version.html",
    "title": "Property Version",
    "keywords": "Property Version Version Die Version als String Declaration public string Version { get; } Property Value Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSAssemblyVersionListEntryAttribute.VersionAsObjects.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSAssemblyVersionListEntryAttribute.VersionAsObjects.html",
    "title": "Property VersionAsObjects",
    "keywords": "Property VersionAsObjects VersionAsObjects Die Version als System.Version Objekt Declaration public Version VersionAsObjects { get; } Property Value Type Description System.Version"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSAssemblyVersionListEntryAttribute.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSAssemblyVersionListEntryAttribute.html",
    "title": "Class FSAssemblyVersionListEntryAttribute",
    "keywords": "Class FSAssemblyVersionListEntryAttribute Wird in der AssemblyInfo.cs bzw. in der GlobalAssemblyInfo.cs verwendet, um Versionsnummern und Kompatibilitäten zu pflegen. Inheritance System.Object System.Attribute FSAssemblyVersionListEntryAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)] public class FSAssemblyVersionListEntryAttribute : Attribute, _Attribute Constructors Name Description FSAssemblyVersionListEntryAttribute(String, VersionEntryPurpose) Properties Name Description Purpose Der Zweck dieser Version Version Die Version als String VersionAsObjects Die Version als System.Version Objekt"
  },
  "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.DEVELOPING.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.DEVELOPING.html",
    "title": "Field DEVELOPING",
    "keywords": "Field DEVELOPING Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public const string DEVELOPING = \"In Arbeit\" Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.RELEASE.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.RELEASE.html",
    "title": "Field RELEASE",
    "keywords": "Field RELEASE Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public const string RELEASE = \"\" Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.INTERNAL.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.INTERNAL.html",
    "title": "Field INTERNAL",
    "keywords": "Field INTERNAL Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public const string INTERNAL = \"Intern\" Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.GetAssemblyVersionListEntries.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.GetAssemblyVersionListEntries.html",
    "title": "Method GetAssemblyVersionListEntries",
    "keywords": "Method GetAssemblyVersionListEntries GetAssemblyVersionListEntries(VersionEntryPurpose) Ermittelt die AssemblyFileVersion der EntryAssembly. Declaration public static IEnumerable<Version> GetAssemblyVersionListEntries(VersionEntryPurpose purpose = VersionEntryPurpose.UpgradeDatabase | VersionEntryPurpose.UpgradeRuntimeRepository | VersionEntryPurpose.SettingsManager | VersionEntryPurpose.AppData | VersionEntryPurpose.All) Parameters Type Name Description VersionEntryPurpose purpose Returns Type Description System.Collections.Generic.IEnumerable < System.Version >"
  },
  "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.GetAssemblyVersion.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.GetAssemblyVersion.html",
    "title": "Method GetAssemblyVersion",
    "keywords": "Method GetAssemblyVersion GetAssemblyVersion() Declaration public static Version GetAssemblyVersion() Returns Type Description System.Version"
  },
  "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.GetAssemblyFileVersion.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.GetAssemblyFileVersion.html",
    "title": "Method GetAssemblyFileVersion",
    "keywords": "Method GetAssemblyFileVersion GetAssemblyFileVersion() Ermittelt die Versions-Nummer inkl. Service-Release (Major.Minor.Build.0). Sie wird aus der ProductVersion/AssemblyInformationalVersion extrahiert. Declaration public static Version GetAssemblyFileVersion() Returns Type Description System.Version"
  },
  "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.GetAssemblyDisplayVersion.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.GetAssemblyDisplayVersion.html",
    "title": "Method GetAssemblyDisplayVersion",
    "keywords": "Method GetAssemblyDisplayVersion GetAssemblyDisplayVersion() Ermittelt die aktuelle AssemblyDisplayVersion. Declaration public static string GetAssemblyDisplayVersion() Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.GetAssemblyInformationalVersion.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.GetAssemblyInformationalVersion.html",
    "title": "Method GetAssemblyInformationalVersion",
    "keywords": "Method GetAssemblyInformationalVersion GetAssemblyInformationalVersion() Declaration public static string GetAssemblyInformationalVersion() Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.GetAssemblyDescription.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.GetAssemblyDescription.html",
    "title": "Method GetAssemblyDescription",
    "keywords": "Method GetAssemblyDescription GetAssemblyDescription() Ermittelt den Inhalt des AssemblyDescription Attributes Declaration public static string GetAssemblyDescription() Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.Pad.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.Pad.html",
    "title": "Method Pad",
    "keywords": "Method Pad Pad(Version) Declaration public static Version Pad(this Version version) Parameters Type Name Description System.Version version Returns Type Description System.Version"
  },
  "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.Trim.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.Trim.html",
    "title": "Method Trim",
    "keywords": "Method Trim Trim(Version) Declaration public static Version Trim(this Version version) Parameters Type Name Description System.Version version Returns Type Description System.Version"
  },
  "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.VersionUtilities.html",
    "title": "Class VersionUtilities",
    "keywords": "Class VersionUtilities Hilfsmethoden zur Ermittlung bestimmter Versionsinformationen. Inheritance System.Object VersionUtilities Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public static class VersionUtilities Fields Name Description DEVELOPING INTERNAL RELEASE Methods Name Description GetAssemblyDescription() Ermittelt den Inhalt des AssemblyDescription Attributes GetAssemblyDisplayVersion() Ermittelt die aktuelle AssemblyDisplayVersion. GetAssemblyFileVersion() Ermittelt die Versions-Nummer inkl. Service-Release (Major.Minor.Build.0). Sie wird aus der ProductVersion/AssemblyInformationalVersion extrahiert. GetAssemblyInformationalVersion() GetAssemblyVersion() GetAssemblyVersionListEntries(VersionEntryPurpose) Ermittelt die AssemblyFileVersion der EntryAssembly. Pad(Version) Trim(Version)"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkApplicationException.-ctor.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkApplicationException.-ctor.html",
    "title": "Constructor FrameworkApplicationException",
    "keywords": "Constructor FrameworkApplicationException FrameworkApplicationException(String) Declaration public FrameworkApplicationException(string msg) Parameters Type Name Description System.String msg FrameworkApplicationException(String, Int32) Declaration public FrameworkApplicationException(string msg, int severity) Parameters Type Name Description System.String msg System.Int32 severity FrameworkApplicationException(String, Exception) Declaration public FrameworkApplicationException(string msg, Exception innerEx) Parameters Type Name Description System.String msg System.Exception innerEx FrameworkApplicationException(String, Int32, Exception) Declaration public FrameworkApplicationException(string msg, int severity, Exception innerEx) Parameters Type Name Description System.String msg System.Int32 severity System.Exception innerEx FrameworkApplicationException(MLKeyText) Declaration public FrameworkApplicationException(MLKeyText mlkeyText) Parameters Type Name Description MLKeyText mlkeyText FrameworkApplicationException(MLKeyText, Int32) Declaration public FrameworkApplicationException(MLKeyText mlkeyText, int severity) Parameters Type Name Description MLKeyText mlkeyText System.Int32 severity FrameworkApplicationException(MLKeyText, Exception) Declaration public FrameworkApplicationException(MLKeyText mlkeyText, Exception innerEx) Parameters Type Name Description MLKeyText mlkeyText System.Exception innerEx FrameworkApplicationException(MLKeyText, Int32, Exception) Declaration public FrameworkApplicationException(MLKeyText mlkeyText, int severity, Exception innerEx) Parameters Type Name Description MLKeyText mlkeyText System.Int32 severity System.Exception innerEx FrameworkApplicationException(SerializationInfo, StreamingContext) Declaration public FrameworkApplicationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkApplicationException.Severity.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkApplicationException.Severity.html",
    "title": "Property Severity",
    "keywords": "Property Severity Severity Property Severity (int) Declaration public int Severity { get; } Property Value Type Description System.Int32"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkApplicationException.MLKey.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkApplicationException.MLKey.html",
    "title": "Property MLKey",
    "keywords": "Property MLKey MLKey Declaration public MLKey MLKey { get; } Property Value Type Description MLKey"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkApplicationException.GetObjectData.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkApplicationException.GetObjectData.html",
    "title": "Method GetObjectData",
    "keywords": "Method GetObjectData GetObjectData(SerializationInfo, StreamingContext) Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context Overrides System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkApplicationException.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkApplicationException.html",
    "title": "Class FrameworkApplicationException",
    "keywords": "Class FrameworkApplicationException Exceptions die vom Framework geworfen werden und einen erwarteten Fehler darstellen sollten von dieser Klasse sein. Der Broker gibt diese dann als Fehler ohne StackTrace an den Client weiter. Inheritance System.Object System.Exception System.ApplicationException FrameworkApplicationException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax [Serializable] public class FrameworkApplicationException : ApplicationException, ISerializable, _Exception Constructors Name Description FrameworkApplicationException(MLKeyText) FrameworkApplicationException(MLKeyText, Exception) FrameworkApplicationException(MLKeyText, Int32) FrameworkApplicationException(MLKeyText, Int32, Exception) FrameworkApplicationException(SerializationInfo, StreamingContext) FrameworkApplicationException(String) FrameworkApplicationException(String, Exception) FrameworkApplicationException(String, Int32) FrameworkApplicationException(String, Int32, Exception) Properties Name Description MLKey Severity Property Severity (int) Methods Name Description GetObjectData(SerializationInfo, StreamingContext)"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLoggerFileListener.-ctor.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLoggerFileListener.-ctor.html",
    "title": "Constructor FSLoggerFileListener",
    "keywords": "Constructor FSLoggerFileListener FSLoggerFileListener(String) Declaration public FSLoggerFileListener(string filePath) Parameters Type Name Description System.String filePath"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLoggerFileListener.logger_OnWrite.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLoggerFileListener.logger_OnWrite.html",
    "title": "Method logger_OnWrite",
    "keywords": "Method logger_OnWrite logger_OnWrite(Object, FSLoggerEventArgs) Declaration protected override void logger_OnWrite(object sender, FSLoggerEventArgs e) Parameters Type Name Description System.Object sender FSLoggerEventArgs e Overrides FSLoggerListenerBase.logger_OnWrite(Object, FSLoggerEventArgs)"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLoggerFileListener.OnDispose.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLoggerFileListener.OnDispose.html",
    "title": "Method OnDispose",
    "keywords": "Method OnDispose OnDispose() Declaration protected override void OnDispose() Overrides FSLoggerListenerBase.OnDispose()"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLoggerFileListener.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLoggerFileListener.html",
    "title": "Class FSLoggerFileListener",
    "keywords": "Class FSLoggerFileListener Inheritance System.Object FSLoggerListenerBase FSLoggerFileListener Implements System.IDisposable Inherited Members FSLoggerListenerBase.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public class FSLoggerFileListener : FSLoggerListenerBase, IDisposable Constructors Name Description FSLoggerFileListener(String) Methods Name Description logger_OnWrite(Object, FSLoggerEventArgs) OnDispose()"
  },
  "api/FrameworkSystems.FrameworkExceptions.PKKeyException.-ctor.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.PKKeyException.-ctor.html",
    "title": "Constructor PKKeyException",
    "keywords": "Constructor PKKeyException PKKeyException(String, Exception) Declaration public PKKeyException(string message, Exception exc) Parameters Type Name Description System.String message System.Exception exc PKKeyException(String, Object) Declaration public PKKeyException(string propertyName, object comp) Parameters Type Name Description System.String propertyName System.Object comp PKKeyException(String) Declaration public PKKeyException(string caption) Parameters Type Name Description System.String caption"
  },
  "api/FrameworkSystems.FrameworkExceptions.PKKeyException.PropertyName.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.PKKeyException.PropertyName.html",
    "title": "Property PropertyName",
    "keywords": "Property PropertyName PropertyName Declaration public string PropertyName { get; } Property Value Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.PKKeyException.Component.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.PKKeyException.Component.html",
    "title": "Property Component",
    "keywords": "Property Component Component Declaration public object Component { get; } Property Value Type Description System.Object"
  },
  "api/FrameworkSystems.FrameworkExceptions.PKKeyException.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.PKKeyException.html",
    "title": "Class PKKeyException",
    "keywords": "Class PKKeyException Inheritance System.Object System.Exception FrameworkException PKKeyException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members FrameworkException.ErrorCode FrameworkException.YouHaveToSortBeforeSave FrameworkException.NoSortBecauseOfDroppedEntriesInColl FrameworkException.YouHaveToSaveBeforeApplyAFilter FrameworkException.GetObjectData(SerializationInfo, StreamingContext) System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax [Serializable] public class PKKeyException : FrameworkException, ISerializable, _Exception Constructors Name Description PKKeyException(String) PKKeyException(String, Exception) PKKeyException(String, Object) Properties Name Description Component PropertyName"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLoggerEventArgs.-ctor.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLoggerEventArgs.-ctor.html",
    "title": "Constructor FSLoggerEventArgs",
    "keywords": "Constructor FSLoggerEventArgs FSLoggerEventArgs(String, Int32, Boolean) Declaration public FSLoggerEventArgs(string text, int indent = 0, bool newLine = false) Parameters Type Name Description System.String text System.Int32 indent System.Boolean newLine"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLoggerEventArgs.Text.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLoggerEventArgs.Text.html",
    "title": "Property Text",
    "keywords": "Property Text Text Declaration public string Text { get; } Property Value Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLoggerEventArgs.Indent.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLoggerEventArgs.Indent.html",
    "title": "Property Indent",
    "keywords": "Property Indent Indent Declaration public int Indent { get; } Property Value Type Description System.Int32"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLoggerEventArgs.NewLine.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLoggerEventArgs.NewLine.html",
    "title": "Property NewLine",
    "keywords": "Property NewLine NewLine Declaration public bool NewLine { get; } Property Value Type Description System.Boolean"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLoggerEventArgs.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLoggerEventArgs.html",
    "title": "Class FSLoggerEventArgs",
    "keywords": "Class FSLoggerEventArgs Inheritance System.Object FSLoggerEventArgs Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public class FSLoggerEventArgs Constructors Name Description FSLoggerEventArgs(String, Int32, Boolean) Properties Name Description Indent NewLine Text"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkDbException.OriginalStatement.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkDbException.OriginalStatement.html",
    "title": "Property OriginalStatement",
    "keywords": "Property OriginalStatement OriginalStatement Declaration public string OriginalStatement { get; } Property Value Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkDbException.OriginalWhere.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkDbException.OriginalWhere.html",
    "title": "Property OriginalWhere",
    "keywords": "Property OriginalWhere OriginalWhere Declaration public string OriginalWhere { get; } Property Value Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkException.ErrorCode.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkException.ErrorCode.html",
    "title": "Property ErrorCode",
    "keywords": "Property ErrorCode ErrorCode Declaration public int ErrorCode { get; set; } Property Value Type Description System.Int32"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkException.YouHaveToSortBeforeSave.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkException.YouHaveToSortBeforeSave.html",
    "title": "Field YouHaveToSortBeforeSave",
    "keywords": "Field YouHaveToSortBeforeSave Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public static readonly int YouHaveToSortBeforeSave Returns Type Description System.Int32"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkException.NoSortBecauseOfDroppedEntriesInColl.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkException.NoSortBecauseOfDroppedEntriesInColl.html",
    "title": "Field NoSortBecauseOfDroppedEntriesInColl",
    "keywords": "Field NoSortBecauseOfDroppedEntriesInColl Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public static readonly int NoSortBecauseOfDroppedEntriesInColl Returns Type Description System.Int32"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkException.YouHaveToSaveBeforeApplyAFilter.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkException.YouHaveToSaveBeforeApplyAFilter.html",
    "title": "Field YouHaveToSaveBeforeApplyAFilter",
    "keywords": "Field YouHaveToSaveBeforeApplyAFilter Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public static readonly int YouHaveToSaveBeforeApplyAFilter Returns Type Description System.Int32"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkException.GetObjectData.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkException.GetObjectData.html",
    "title": "Method GetObjectData",
    "keywords": "Method GetObjectData GetObjectData(SerializationInfo, StreamingContext) Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context Overrides System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkException.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkException.html",
    "title": "Class FrameworkException",
    "keywords": "Class FrameworkException Summary description for FrameworkException. Inheritance System.Object System.Exception FrameworkException NoRowsAffectedException PKKeyException PropertyNotFoundException RowVersionInvalidException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax [Serializable] public class FrameworkException : Exception, ISerializable, _Exception Constructors Name Description FrameworkException(SerializationInfo, StreamingContext) FrameworkException(String) FrameworkException(String, Exception) FrameworkException(String, Int32) FrameworkException(String, Int32, Exception) Fields Name Description NoSortBecauseOfDroppedEntriesInColl YouHaveToSaveBeforeApplyAFilter YouHaveToSortBeforeSave Properties Name Description ErrorCode Methods Name Description GetObjectData(SerializationInfo, StreamingContext)"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkStudioException.-ctor.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkStudioException.-ctor.html",
    "title": "Constructor FrameworkStudioException",
    "keywords": "Constructor FrameworkStudioException FrameworkStudioException(String) Declaration public FrameworkStudioException(string msg) Parameters Type Name Description System.String msg FrameworkStudioException(String, Exception) Declaration public FrameworkStudioException(string msg, Exception parent) Parameters Type Name Description System.String msg System.Exception parent FrameworkStudioException(SerializationInfo, StreamingContext) Declaration protected FrameworkStudioException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkStudioException.Show.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkStudioException.Show.html",
    "title": "Method Show",
    "keywords": "Method Show Show() Zeigt die Exception an Declaration public void Show()"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkStudioException.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkStudioException.html",
    "title": "Class FrameworkStudioException",
    "keywords": "Class FrameworkStudioException Inheritance System.Object System.Exception System.ApplicationException FrameworkStudioException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax [Serializable] public class FrameworkStudioException : ApplicationException, ISerializable, _Exception Constructors Name Description FrameworkStudioException(SerializationInfo, StreamingContext) FrameworkStudioException(String) FrameworkStudioException(String, Exception) Methods Name Description Show() Zeigt die Exception an"
  },
  "api/FrameworkSystems.FSUtils.PerfCounterStart.html": {
    "href": "api/FrameworkSystems.FSUtils.PerfCounterStart.html",
    "title": "Method PerfCounterStart",
    "keywords": "Method PerfCounterStart PerfCounterStart() Gibt eine sehr genaue CPU-Zeit zurück. Wenn man dieses Ergebnis kann man in PerfCounterStop übergeben, um eine Zeit-Differenz zu erhalten. Declaration public static long PerfCounterStart() Returns Type Description System.Int64"
  },
  "api/FrameworkSystems.FSUtils.PerfCounterStop.html": {
    "href": "api/FrameworkSystems.FSUtils.PerfCounterStop.html",
    "title": "Method PerfCounterStop",
    "keywords": "Method PerfCounterStop PerfCounterStop(Int64) Ermittelt eine sehr genaue Zeitdifferenz. Declaration public static TimeSpan PerfCounterStop(long startCounter) Parameters Type Name Description System.Int64 startCounter Einen Wert, der mit PerfCounterStart ermittelt wurde Returns Type Description System.TimeSpan Eine Zeitdifferenz."
  },
  "api/FrameworkSystems.FSUtils.UserAppDataPath.html": {
    "href": "api/FrameworkSystems.FSUtils.UserAppDataPath.html",
    "title": "Property UserAppDataPath",
    "keywords": "Property UserAppDataPath UserAppDataPath Declaration public static string UserAppDataPath { get; } Property Value Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseApplicationException.IsMessageSet.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseApplicationException.IsMessageSet.html",
    "title": "Property IsMessageSet",
    "keywords": "Property IsMessageSet IsMessageSet Returns true, if the message was set by a constructor. Otherwise the error message will contain a default message and this property will return false. Declaration public bool IsMessageSet { get; } Property Value Type Description System.Boolean"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseApplicationException.Restart.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseApplicationException.Restart.html",
    "title": "Property Restart",
    "keywords": "Property Restart Restart True, if the application should restart Declaration public bool Restart { get; } Property Value Type Description System.Boolean"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseApplicationException.GetObjectData.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseApplicationException.GetObjectData.html",
    "title": "Method GetObjectData",
    "keywords": "Method GetObjectData GetObjectData(SerializationInfo, StreamingContext) Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context Overrides System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseApplicationException.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseApplicationException.html",
    "title": "Class FrameworkCloseApplicationException",
    "keywords": "Class FrameworkCloseApplicationException Diese Exception beendet die Session für das aktuelle Token. Inheritance System.Object System.Exception System.ApplicationException FrameworkCloseApplicationException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax [Serializable] public class FrameworkCloseApplicationException : ApplicationException, ISerializable, _Exception Constructors Name Description FrameworkCloseApplicationException(SerializationInfo, StreamingContext) FrameworkCloseApplicationException(String) Close the application without showing a message FrameworkCloseApplicationException(String, Boolean) Closes or restarts the application without showing a message FrameworkCloseApplicationException(String, Exception) Close the application without showing a message, include inner exception FrameworkCloseApplicationException(String, String) Close the application and show a message FrameworkCloseApplicationException(String, String, Exception) Close the application and show a message, include inner exception Properties Name Description IsMessageSet Returns true, if the message was set by a constructor. Otherwise the error message will contain a default message and this property will return false. Restart True, if the application should restart Token The token of the session to be closed. Methods Name Description GetObjectData(SerializationInfo, StreamingContext)"
  },
  "api/System.Reflection.html": {
    "href": "api/System.Reflection.html",
    "title": "Namespace System.Reflection",
    "keywords": "Namespace System.Reflection Classes ReflectionExtensions Erweiterungs-Methoden für den System.Reflection-Namespace"
  },
  "api/FrameworkSystems.FrameworkExceptions.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.html",
    "title": "Namespace FrameworkSystems.FrameworkExceptions",
    "keywords": "Namespace FrameworkSystems.FrameworkExceptions Classes FrameworkApplicationException Exceptions die vom Framework geworfen werden und einen erwarteten Fehler darstellen sollten von dieser Klasse sein. Der Broker gibt diese dann als Fehler ohne StackTrace an den Client weiter. FrameworkCloseApplicationException Diese Exception beendet die Session für das aktuelle Token. FrameworkCloseRequestApplicationException FrameworkDbException FrameworkException Summary description for FrameworkException. FrameworkStudioException FSAssemblyVersionListEntryAttribute Wird in der AssemblyInfo.cs bzw. in der GlobalAssemblyInfo.cs verwendet, um Versionsnummern und Kompatibilitäten zu pflegen. FSLogger FSLoggerDelegateListener FSLoggerEventArgs FSLoggerFileListener FSLoggerListenerBase NoRowsAffectedException PKKeyException PropertyNotFoundException Summary description for PropertyNotFoundException. RowVersionInvalidException VersionUtilities Hilfsmethoden zur Ermittlung bestimmter Versionsinformationen. Enums FrameworkCloseMode VersionEntryPurpose Der Verwendungszweck eines VersionListEntries"
  },
  "api/FrameworkSystems.FrameworkExceptions.PropertyNotFoundException.-ctor.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.PropertyNotFoundException.-ctor.html",
    "title": "Constructor PropertyNotFoundException",
    "keywords": "Constructor PropertyNotFoundException PropertyNotFoundException(String) Exception wird ausgelöst, wenn ein Property angefordert wird, welches nicht existiert, z.B. über die Methode DevFrameworkObject.get_property. Declaration public PropertyNotFoundException(string info) Parameters Type Name Description System.String info PropertyNotFoundException(String, Exception) Declaration public PropertyNotFoundException(string info, Exception ex) Parameters Type Name Description System.String info System.Exception ex"
  },
  "api/FrameworkSystems.FrameworkExceptions.Util.DpiUtils.Unscale.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.Util.DpiUtils.Unscale.html",
    "title": "Method Unscale",
    "keywords": "Method Unscale Unscale(Point) Declaration public static Point Unscale(Point p) Parameters Type Name Description System.Drawing.Point p Returns Type Description System.Drawing.Point Unscale(PointF) Declaration public static PointF Unscale(PointF p) Parameters Type Name Description System.Drawing.PointF p Returns Type Description System.Drawing.PointF Unscale(Size) Declaration public static Size Unscale(Size p) Parameters Type Name Description System.Drawing.Size p Returns Type Description System.Drawing.Size Unscale(SizeF) Declaration public static SizeF Unscale(SizeF p) Parameters Type Name Description System.Drawing.SizeF p Returns Type Description System.Drawing.SizeF"
  },
  "api/FrameworkSystems.FrameworkExceptions.Util.DpiUtils.UnscaleX.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.Util.DpiUtils.UnscaleX.html",
    "title": "Method UnscaleX",
    "keywords": "Method UnscaleX UnscaleX(Int32) Declaration public static int UnscaleX(int x) Parameters Type Name Description System.Int32 x Returns Type Description System.Int32"
  },
  "api/FrameworkSystems.FrameworkExceptions.Util.DpiUtils.UnscaleY.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.Util.DpiUtils.UnscaleY.html",
    "title": "Method UnscaleY",
    "keywords": "Method UnscaleY UnscaleY(Int32) Declaration public static int UnscaleY(int y) Parameters Type Name Description System.Int32 y Returns Type Description System.Int32"
  },
  "api/FrameworkSystems.FrameworkExceptions.Util.DpiUtils.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.Util.DpiUtils.html",
    "title": "Class DpiUtils",
    "keywords": "Class DpiUtils Inheritance System.Object DpiUtils Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : FrameworkSystems.FrameworkExceptions.Util Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public static class DpiUtils Methods Name Description Scale(Point) Scale(Size) Scale(SizeF) Scale(ToolStrip) ScaleX(Int32) ScaleY(Int32) Unscale(Point) Unscale(PointF) Unscale(Size) Unscale(SizeF) UnscaleX(Int32) UnscaleY(Int32)"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkDbException.OriginalOrderby.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkDbException.OriginalOrderby.html",
    "title": "Property OriginalOrderby",
    "keywords": "Property OriginalOrderby OriginalOrderby Declaration public string OriginalOrderby { get; } Property Value Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkDbException.OriginalHaving.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkDbException.OriginalHaving.html",
    "title": "Property OriginalHaving",
    "keywords": "Property OriginalHaving OriginalHaving Declaration public string OriginalHaving { get; } Property Value Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkDbException.ConvertedStatement.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkDbException.ConvertedStatement.html",
    "title": "Property ConvertedStatement",
    "keywords": "Property ConvertedStatement ConvertedStatement Declaration public string ConvertedStatement { get; } Property Value Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkDbException.Details.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkDbException.Details.html",
    "title": "Property Details",
    "keywords": "Property Details Details Declaration public string Details { get; } Property Value Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkDbException.-ctor.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkDbException.-ctor.html",
    "title": "Constructor FrameworkDbException",
    "keywords": "Constructor FrameworkDbException FrameworkDbException(SerializationInfo, StreamingContext) Declaration public FrameworkDbException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context FrameworkDbException(String) Declaration public FrameworkDbException(string message) Parameters Type Name Description System.String message FrameworkDbException(String, Exception) Declaration public FrameworkDbException(string message, Exception innerException) Parameters Type Name Description System.String message System.Exception innerException FrameworkDbException(String, String, String, String, String, String, Exception) Declaration public FrameworkDbException(string message, string originalStatement, string originalWhere, string originalOrderby, string originalHaving, string convertedStatement, Exception innerException) Parameters Type Name Description System.String message System.String originalStatement System.String originalWhere System.String originalOrderby System.String originalHaving System.String convertedStatement System.Exception innerException FrameworkDbException() Declaration public FrameworkDbException()"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkDbException.ToString.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkDbException.ToString.html",
    "title": "Method ToString",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Runtime.InteropServices.ExternalException.ToString()"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkDbException.GetObjectData.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkDbException.GetObjectData.html",
    "title": "Method GetObjectData",
    "keywords": "Method GetObjectData GetObjectData(SerializationInfo, StreamingContext) Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context Overrides System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkDbException.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkDbException.html",
    "title": "Class FrameworkDbException",
    "keywords": "Class FrameworkDbException Inheritance System.Object System.Exception System.SystemException System.Runtime.InteropServices.ExternalException System.Data.Common.DbException FrameworkDbException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Runtime.InteropServices.ExternalException.ErrorCode System.Exception.GetBaseException() System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax [Serializable] public class FrameworkDbException : DbException, ISerializable, _Exception Constructors Name Description FrameworkDbException() FrameworkDbException(SerializationInfo, StreamingContext) FrameworkDbException(String) FrameworkDbException(String, Exception) FrameworkDbException(String, String, String, String, String, String, Exception) Properties Name Description ConvertedStatement Details OriginalHaving OriginalOrderby OriginalStatement OriginalWhere Methods Name Description GetObjectData(SerializationInfo, StreamingContext) ToString()"
  },
  "api/System.Reflection.ReflectionExtensions.GetPropertyRecursive.html": {
    "href": "api/System.Reflection.ReflectionExtensions.GetPropertyRecursive.html",
    "title": "Method GetPropertyRecursive",
    "keywords": "Method GetPropertyRecursive GetPropertyRecursive(Type, String, Type[]) Ermittelt ein Property mit dem übergebenen Namen und prüft dabei auch die Basis-Klassen und Interfaces Declaration public static PropertyInfo GetPropertyRecursive(this Type type, string name, Type[] parameterTypes = null) Parameters Type Name Description System.Type type System.String name Name des Properties System.Type [] parameterTypes Returns Type Description System.Reflection.PropertyInfo"
  },
  "api/System.Reflection.ReflectionExtensions.GetCodeFullname.html": {
    "href": "api/System.Reflection.ReflectionExtensions.GetCodeFullname.html",
    "title": "Method GetCodeFullname",
    "keywords": "Method GetCodeFullname GetCodeFullname(Type) Das Fullname Proerty für generische Typen gibt einen für die Codegenerierung inkompatiblen String zurück. Diese Methode baut den korrekten String auf und funktioniert rekursiv. Declaration public static string GetCodeFullname(this Type t) Parameters Type Name Description System.Type t Returns Type Description System.String"
  },
  "api/System.Reflection.ReflectionExtensions.html": {
    "href": "api/System.Reflection.ReflectionExtensions.html",
    "title": "Class ReflectionExtensions",
    "keywords": "Class ReflectionExtensions Erweiterungs-Methoden für den System.Reflection-Namespace Inheritance System.Object ReflectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Reflection Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public static class ReflectionExtensions Methods Name Description GetCodeFullname(Type) Das Fullname Proerty für generische Typen gibt einen für die Codegenerierung inkompatiblen String zurück. Diese Methode baut den korrekten String auf und funktioniert rekursiv. GetPropertyRecursive(Type, String, Type[]) Ermittelt ein Property mit dem übergebenen Namen und prüft dabei auch die Basis-Klassen und Interfaces"
  },
  "api/FrameworkSystems.FrameworkExceptions.Util.GacUtils.GetAssembyNames.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.Util.GacUtils.GetAssembyNames.html",
    "title": "Method GetAssembyNames",
    "keywords": "Method GetAssembyNames GetAssembyNames() Liefert alle im GAC installierten Assemblies Declaration public static IEnumerable<AssemblyName> GetAssembyNames() Returns Type Description System.Collections.Generic.IEnumerable < System.Reflection.AssemblyName >"
  },
  "api/FrameworkSystems.html": {
    "href": "api/FrameworkSystems.html",
    "title": "Namespace FrameworkSystems",
    "keywords": "Namespace FrameworkSystems Classes FSDisplayNameAttribute Dieses Attribute kann in Enum-Werten verwendet werden, um einen DisplayName anzugeben. Dieser kann mit der statischen Methode GetFromEnum(Enum) ermittelt werden. FSUtils UacUtils Enums UacUtils.UrlAccess"
  },
  "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKeyText.-ctor.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKeyText.-ctor.html",
    "title": "Constructor MLKeyText",
    "keywords": "Constructor MLKeyText MLKeyText(MLKey, String) Declaration public MLKeyText(MLKey mLKey, string text) Parameters Type Name Description MLKey mLKey System.String text"
  },
  "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKeyText.Key.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKeyText.Key.html",
    "title": "Property Key",
    "keywords": "Property Key Key Declaration public MLKey Key { get; } Property Value Type Description MLKey"
  },
  "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKeyText.Text.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKeyText.Text.html",
    "title": "Property Text",
    "keywords": "Property Text Text Declaration public string Text { get; } Property Value Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKeyText.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKeyText.html",
    "title": "Class MLKeyText",
    "keywords": "Class MLKeyText Inheritance System.Object MLKeyText Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : FrameworkSystems.FrameworkExceptions.MultiLanguage Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public class MLKeyText Constructors Name Description MLKeyText(MLKey, String) Properties Name Description Key Text"
  },
  "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.-ctor.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.-ctor.html",
    "title": "Constructor MLKey",
    "keywords": "Constructor MLKey MLKey(String) Declaration public MLKey(string value) Parameters Type Name Description System.String value"
  },
  "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.ToString.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.ToString.html",
    "title": "Method ToString",
    "keywords": "Method ToString ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.IsKey.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.IsKey.html",
    "title": "Method IsKey",
    "keywords": "Method IsKey IsKey(String) Declaration public static bool IsKey(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean"
  },
  "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.GetHashCode.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.GetHashCode.html",
    "title": "Method GetHashCode",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode()"
  },
  "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.Equals.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.Equals.html",
    "title": "Method Equals",
    "keywords": "Method Equals Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object)"
  },
  "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.KEY.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.KEY.html",
    "title": "Field KEY",
    "keywords": "Field KEY Namespace : FrameworkSystems.FrameworkExceptions.MultiLanguage Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public const string KEY = \"_key\" Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.DISPLAY_FORMAT_START.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.DISPLAY_FORMAT_START.html",
    "title": "Field DISPLAY_FORMAT_START",
    "keywords": "Field DISPLAY_FORMAT_START Namespace : FrameworkSystems.FrameworkExceptions.MultiLanguage Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public const string DISPLAY_FORMAT_START = \"@\" Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.DISPLAY_FORMAT_END.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.DISPLAY_FORMAT_END.html",
    "title": "Field DISPLAY_FORMAT_END",
    "keywords": "Field DISPLAY_FORMAT_END Namespace : FrameworkSystems.FrameworkExceptions.MultiLanguage Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public const string DISPLAY_FORMAT_END = \" - \" Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.DISPLAY_FORMAT.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.DISPLAY_FORMAT.html",
    "title": "Field DISPLAY_FORMAT",
    "keywords": "Field DISPLAY_FORMAT Namespace : FrameworkSystems.FrameworkExceptions.MultiLanguage Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public const string DISPLAY_FORMAT = \"@{0} - {1}\" Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.MLKEYS.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.MLKey.MLKEYS.html",
    "title": "Field MLKEYS",
    "keywords": "Field MLKEYS Namespace : FrameworkSystems.FrameworkExceptions.MultiLanguage Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public const string MLKEYS = \"MLKeys\" Returns Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.Util.GacUtils.RedirectCrystalAssemblies.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.Util.GacUtils.RedirectCrystalAssemblies.html",
    "title": "Method RedirectCrystalAssemblies",
    "keywords": "Method RedirectCrystalAssemblies RedirectCrystalAssemblies(Type) Registiert an der aktuallen AppDomain Redicts für die CrystalReport Assemblies. Declaration public static void RedirectCrystalAssemblies(Type sourceType) Parameters Type Name Description System.Type sourceType Der Typ wird benötigt, um die Crystal-Referenzen der Assembly zu analsieren."
  },
  "api/FrameworkSystems.FrameworkExceptions.Util.GacUtils.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.Util.GacUtils.html",
    "title": "Class GacUtils",
    "keywords": "Class GacUtils Inheritance System.Object GacUtils Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : FrameworkSystems.FrameworkExceptions.Util Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public class GacUtils Methods Name Description GetAssembyNames() Liefert alle im GAC installierten Assemblies RedirectCrystalAssemblies(Type) Registiert an der aktuallen AppDomain Redicts für die CrystalReport Assemblies."
  },
  "api/FrameworkSystems.UacUtils.UrlAccess.html": {
    "href": "api/FrameworkSystems.UacUtils.UrlAccess.html",
    "title": "Enum UacUtils.UrlAccess",
    "keywords": "Enum UacUtils.UrlAccess Namespace : FrameworkSystems Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public enum UrlAccess Fields Name Description Domain Localhost None Public"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseRequestApplicationException.-ctor.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseRequestApplicationException.-ctor.html",
    "title": "Constructor FrameworkCloseRequestApplicationException",
    "keywords": "Constructor FrameworkCloseRequestApplicationException FrameworkCloseRequestApplicationException(String, FrameworkCloseMode) Declaration public FrameworkCloseRequestApplicationException(string token, FrameworkCloseMode closeMode) Parameters Type Name Description System.String token FrameworkCloseMode closeMode FrameworkCloseRequestApplicationException(String) Declaration public FrameworkCloseRequestApplicationException(string token) Parameters Type Name Description System.String token FrameworkCloseRequestApplicationException(String, Exception) Declaration public FrameworkCloseRequestApplicationException(string token, Exception inner) Parameters Type Name Description System.String token System.Exception inner FrameworkCloseRequestApplicationException(String, String) Declaration public FrameworkCloseRequestApplicationException(string token, string message) Parameters Type Name Description System.String token System.String message FrameworkCloseRequestApplicationException(String, String, Exception) Declaration public FrameworkCloseRequestApplicationException(string token, string message, Exception inner) Parameters Type Name Description System.String token System.String message System.Exception inner FrameworkCloseRequestApplicationException(SerializationInfo, StreamingContext) Declaration public FrameworkCloseRequestApplicationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseRequestApplicationException.Token.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseRequestApplicationException.Token.html",
    "title": "Property Token",
    "keywords": "Property Token Token Declaration public string Token { get; } Property Value Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseRequestApplicationException.IsMessageSet.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseRequestApplicationException.IsMessageSet.html",
    "title": "Property IsMessageSet",
    "keywords": "Property IsMessageSet IsMessageSet Declaration public bool IsMessageSet { get; } Property Value Type Description System.Boolean"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseRequestApplicationException.CloseMode.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseRequestApplicationException.CloseMode.html",
    "title": "Property CloseMode",
    "keywords": "Property CloseMode CloseMode Dieses Property enthält den Schließmodus. Declaration public FrameworkCloseMode CloseMode { get; } Property Value Type Description FrameworkCloseMode"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseRequestApplicationException.GetObjectData.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseRequestApplicationException.GetObjectData.html",
    "title": "Method GetObjectData",
    "keywords": "Method GetObjectData GetObjectData(SerializationInfo, StreamingContext) Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context Overrides System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseRequestApplicationException.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseRequestApplicationException.html",
    "title": "Class FrameworkCloseRequestApplicationException",
    "keywords": "Class FrameworkCloseRequestApplicationException Inheritance System.Object System.Exception System.ApplicationException FrameworkCloseRequestApplicationException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax [Serializable] public class FrameworkCloseRequestApplicationException : ApplicationException, ISerializable, _Exception Constructors Name Description FrameworkCloseRequestApplicationException(SerializationInfo, StreamingContext) FrameworkCloseRequestApplicationException(String) FrameworkCloseRequestApplicationException(String, FrameworkCloseMode) FrameworkCloseRequestApplicationException(String, Exception) FrameworkCloseRequestApplicationException(String, String) FrameworkCloseRequestApplicationException(String, String, Exception) Properties Name Description CloseMode Dieses Property enthält den Schließmodus. IsMessageSet Token Methods Name Description GetObjectData(SerializationInfo, StreamingContext)"
  },
  "api/FrameworkSystems.FrameworkExceptions.NoRowsAffectedException.-ctor.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.NoRowsAffectedException.-ctor.html",
    "title": "Constructor NoRowsAffectedException",
    "keywords": "Constructor NoRowsAffectedException NoRowsAffectedException(String) Declaration public NoRowsAffectedException(string caption) Parameters Type Name Description System.String caption NoRowsAffectedException(String, Exception) Declaration public NoRowsAffectedException(string caption, Exception ex) Parameters Type Name Description System.String caption System.Exception ex"
  },
  "api/FrameworkSystems.FrameworkExceptions.NoRowsAffectedException.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.NoRowsAffectedException.html",
    "title": "Class NoRowsAffectedException",
    "keywords": "Class NoRowsAffectedException Inheritance System.Object System.Exception FrameworkException NoRowsAffectedException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members FrameworkException.ErrorCode FrameworkException.YouHaveToSortBeforeSave FrameworkException.NoSortBecauseOfDroppedEntriesInColl FrameworkException.YouHaveToSaveBeforeApplyAFilter FrameworkException.GetObjectData(SerializationInfo, StreamingContext) System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax [Serializable] public class NoRowsAffectedException : FrameworkException, ISerializable, _Exception Constructors Name Description NoRowsAffectedException(String) NoRowsAffectedException(String, Exception)"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLoggerDelegateListener.-ctor.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLoggerDelegateListener.-ctor.html",
    "title": "Constructor FSLoggerDelegateListener",
    "keywords": "Constructor FSLoggerDelegateListener FSLoggerDelegateListener(Action<FSLoggerEventArgs>) Declaration public FSLoggerDelegateListener(Action<FSLoggerEventArgs> logDelegate) Parameters Type Name Description System.Action < FSLoggerEventArgs > logDelegate"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLoggerDelegateListener.logger_OnWrite.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLoggerDelegateListener.logger_OnWrite.html",
    "title": "Method logger_OnWrite",
    "keywords": "Method logger_OnWrite logger_OnWrite(Object, FSLoggerEventArgs) Declaration protected override void logger_OnWrite(object sender, FSLoggerEventArgs e) Parameters Type Name Description System.Object sender FSLoggerEventArgs e Overrides FSLoggerListenerBase.logger_OnWrite(Object, FSLoggerEventArgs)"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLoggerDelegateListener.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLoggerDelegateListener.html",
    "title": "Class FSLoggerDelegateListener",
    "keywords": "Class FSLoggerDelegateListener Inheritance System.Object FSLoggerListenerBase FSLoggerDelegateListener Implements System.IDisposable Inherited Members FSLoggerListenerBase.OnDispose() FSLoggerListenerBase.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public class FSLoggerDelegateListener : FSLoggerListenerBase, IDisposable Constructors Name Description FSLoggerDelegateListener(Action<FSLoggerEventArgs>) Methods Name Description logger_OnWrite(Object, FSLoggerEventArgs)"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkException.-ctor.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkException.-ctor.html",
    "title": "Constructor FrameworkException",
    "keywords": "Constructor FrameworkException FrameworkException(String) Declaration public FrameworkException(string info) Parameters Type Name Description System.String info FrameworkException(String, Exception) Declaration public FrameworkException(string info, Exception inner) Parameters Type Name Description System.String info System.Exception inner FrameworkException(String, Int32) Declaration public FrameworkException(string info, int errorCode) Parameters Type Name Description System.String info System.Int32 errorCode FrameworkException(String, Int32, Exception) Declaration public FrameworkException(string info, int errorCode, Exception inner) Parameters Type Name Description System.String info System.Int32 errorCode System.Exception inner FrameworkException(SerializationInfo, StreamingContext) Declaration public FrameworkException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context"
  },
  "doc/sql/funktionen.html": {
    "href": "doc/sql/funktionen.html",
    "title": "SQL-Funktionen",
    "keywords": "SQL-Funktionen GETGUID ( ) Liefert eine neue Guid mit folgendem Format: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Umsetzung des Statements auf den verschiedenen Datenbanken SQL-Server LOWER( REPLACE ( NEWID ( ), '-', '' ) ) Oracle LOWER( SYS_GUID ( ) )"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseMode.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseMode.html",
    "title": "Enum FrameworkCloseMode",
    "keywords": "Enum FrameworkCloseMode Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax [Flags] public enum FrameworkCloseMode Fields Name Description Close KeepUserLogin Restart"
  },
  "api/FrameworkSystems.FSDisplayNameAttribute.-ctor.html": {
    "href": "api/FrameworkSystems.FSDisplayNameAttribute.-ctor.html",
    "title": "Constructor FSDisplayNameAttribute",
    "keywords": "Constructor FSDisplayNameAttribute FSDisplayNameAttribute(String, Int32) Declaration public FSDisplayNameAttribute(string displayName, int order = 0) Parameters Type Name Description System.String displayName System.Int32 order"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLoggerListenerBase.Dispose.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLoggerListenerBase.Dispose.html",
    "title": "Method Dispose",
    "keywords": "Method Dispose Dispose() Declaration public void Dispose() Implements System.IDisposable.Dispose()"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLoggerListenerBase.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLoggerListenerBase.html",
    "title": "Class FSLoggerListenerBase",
    "keywords": "Class FSLoggerListenerBase Inheritance System.Object FSLoggerListenerBase FSLoggerDelegateListener FSLoggerFileListener Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public abstract class FSLoggerListenerBase : IDisposable Constructors Name Description FSLoggerListenerBase() Methods Name Description Dispose() logger_OnWrite(Object, FSLoggerEventArgs) OnDispose()"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseApplicationException.-ctor.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseApplicationException.-ctor.html",
    "title": "Constructor FrameworkCloseApplicationException",
    "keywords": "Constructor FrameworkCloseApplicationException FrameworkCloseApplicationException(String, Boolean) Closes or restarts the application without showing a message Declaration public FrameworkCloseApplicationException(string token, bool restart) Parameters Type Name Description System.String token System.Boolean restart FrameworkCloseApplicationException(String) Close the application without showing a message Declaration public FrameworkCloseApplicationException(string token) Parameters Type Name Description System.String token FrameworkCloseApplicationException(String, Exception) Close the application without showing a message, include inner exception Declaration public FrameworkCloseApplicationException(string token, Exception inner) Parameters Type Name Description System.String token System.Exception inner FrameworkCloseApplicationException(String, String) Close the application and show a message Declaration public FrameworkCloseApplicationException(string token, string message) Parameters Type Name Description System.String token System.String message FrameworkCloseApplicationException(String, String, Exception) Close the application and show a message, include inner exception Declaration public FrameworkCloseApplicationException(string token, string message, Exception inner) Parameters Type Name Description System.String token System.String message System.Exception inner FrameworkCloseApplicationException(SerializationInfo, StreamingContext) Declaration public FrameworkCloseApplicationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context"
  },
  "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseApplicationException.Token.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FrameworkCloseApplicationException.Token.html",
    "title": "Property Token",
    "keywords": "Property Token Token The token of the session to be closed. Declaration public string Token { get; } Property Value Type Description System.String"
  },
  "api/FrameworkSystems.FrameworkExceptions.PropertyNotFoundException.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.PropertyNotFoundException.html",
    "title": "Class PropertyNotFoundException",
    "keywords": "Class PropertyNotFoundException Summary description for PropertyNotFoundException. Inheritance System.Object System.Exception FrameworkException PropertyNotFoundException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members FrameworkException.ErrorCode FrameworkException.YouHaveToSortBeforeSave FrameworkException.NoSortBecauseOfDroppedEntriesInColl FrameworkException.YouHaveToSaveBeforeApplyAFilter FrameworkException.GetObjectData(SerializationInfo, StreamingContext) System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax [Serializable] public class PropertyNotFoundException : FrameworkException, ISerializable, _Exception Constructors Name Description PropertyNotFoundException(String) Exception wird ausgelöst, wenn ein Property angefordert wird, welches nicht existiert, z.B. über die Methode DevFrameworkObject.get_property. PropertyNotFoundException(String, Exception)"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLogger.Log.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLogger.Log.html",
    "title": "Method Log",
    "keywords": "Method Log Log(String) Schreibt in eine neue Zeile Declaration public static void Log(string text = null) Parameters Type Name Description System.String text"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLogger.LogAppend.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLogger.LogAppend.html",
    "title": "Method LogAppend",
    "keywords": "Method LogAppend LogAppend(String) Schreibt hinter der letzten Zeile weiter Declaration public static void LogAppend(string text) Parameters Type Name Description System.String text"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLogger.LogError.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLogger.LogError.html",
    "title": "Method LogError",
    "keywords": "Method LogError LogError(String) Declaration public static void LogError(string text) Parameters Type Name Description System.String text"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLogger.LogException.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLogger.LogException.html",
    "title": "Method LogException",
    "keywords": "Method LogException LogException(Exception) Declaration public static void LogException(Exception ex) Parameters Type Name Description System.Exception ex"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLogger.Indent.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLogger.Indent.html",
    "title": "Method Indent",
    "keywords": "Method Indent Indent() Erzeugt eine Einrückung. sollte immer mit einem using verwendet werden. Declaration public static IDisposable Indent() Returns Type Description System.IDisposable Ein IDisposable object, welches am Ende vom Using disposed wird. Examples using(FSLogger.Indent()) { ... }"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLogger.CreateFileListener.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLogger.CreateFileListener.html",
    "title": "Method CreateFileListener",
    "keywords": "Method CreateFileListener CreateFileListener(String) Declaration public static IDisposable CreateFileListener(string filePath) Parameters Type Name Description System.String filePath Returns Type Description System.IDisposable"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLogger.CreateDelegateListener.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLogger.CreateDelegateListener.html",
    "title": "Method CreateDelegateListener",
    "keywords": "Method CreateDelegateListener CreateDelegateListener(Action<FSLoggerEventArgs>) Declaration public static IDisposable CreateDelegateListener(Action<FSLoggerEventArgs> logDelegate) Parameters Type Name Description System.Action < FSLoggerEventArgs > logDelegate Returns Type Description System.IDisposable"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLogger.OnWrite.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLogger.OnWrite.html",
    "title": "Event OnWrite",
    "keywords": "Event OnWrite Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public static event EventHandler<FSLoggerEventArgs> OnWrite Returns Type Description System.EventHandler < FSLoggerEventArgs >"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLogger.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLogger.html",
    "title": "Class FSLogger",
    "keywords": "Class FSLogger Inheritance System.Object FSLogger Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public static class FSLogger Methods Name Description CreateDelegateListener(Action<FSLoggerEventArgs>) CreateFileListener(String) Indent() Erzeugt eine Einrückung. sollte immer mit einem using verwendet werden. Log(String) Schreibt in eine neue Zeile LogAppend(String) Schreibt hinter der letzten Zeile weiter LogError(String) LogException(Exception) Events Name Description OnWrite"
  },
  "api/FrameworkSystems.FrameworkExceptions.VersionEntryPurpose.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.VersionEntryPurpose.html",
    "title": "Enum VersionEntryPurpose",
    "keywords": "Enum VersionEntryPurpose Der Verwendungszweck eines VersionListEntries Namespace : FrameworkSystems.FrameworkExceptions Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax [Flags] public enum VersionEntryPurpose Fields Name Description All AppData None SettingsManager UpgradeDatabase UpgradeRuntimeRepository"
  },
  "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.MultiLanguage.html",
    "title": "Namespace FrameworkSystems.FrameworkExceptions.MultiLanguage",
    "keywords": "Namespace FrameworkSystems.FrameworkExceptions.MultiLanguage Classes MLKey MLKeyText"
  },
  "api/FrameworkSystems.FrameworkExceptions.Util.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.Util.html",
    "title": "Namespace FrameworkSystems.FrameworkExceptions.Util",
    "keywords": "Namespace FrameworkSystems.FrameworkExceptions.Util Classes DpiUtils GacUtils"
  },
  "api/FrameworkSystems.FrameworkExceptions.Util.DpiUtils.Scale.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.Util.DpiUtils.Scale.html",
    "title": "Method Scale",
    "keywords": "Method Scale Scale(ToolStrip) Declaration public static void Scale(ToolStrip strip) Parameters Type Name Description System.Windows.Forms.ToolStrip strip Scale(Point) Declaration public static Point Scale(Point p) Parameters Type Name Description System.Drawing.Point p Returns Type Description System.Drawing.Point Scale(Size) Declaration public static Size Scale(Size p) Parameters Type Name Description System.Drawing.Size p Returns Type Description System.Drawing.Size Scale(SizeF) Declaration public static SizeF Scale(SizeF p) Parameters Type Name Description System.Drawing.SizeF p Returns Type Description System.Drawing.SizeF"
  },
  "api/FrameworkSystems.FrameworkExceptions.Util.DpiUtils.ScaleX.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.Util.DpiUtils.ScaleX.html",
    "title": "Method ScaleX",
    "keywords": "Method ScaleX ScaleX(Int32) Declaration public static int ScaleX(int x) Parameters Type Name Description System.Int32 x Returns Type Description System.Int32"
  },
  "api/FrameworkSystems.FrameworkExceptions.Util.DpiUtils.ScaleY.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.Util.DpiUtils.ScaleY.html",
    "title": "Method ScaleY",
    "keywords": "Method ScaleY ScaleY(Int32) Declaration public static int ScaleY(int y) Parameters Type Name Description System.Int32 y Returns Type Description System.Int32"
  },
  "api/FrameworkSystems.FSDisplayNameAttribute.DisplayName.html": {
    "href": "api/FrameworkSystems.FSDisplayNameAttribute.DisplayName.html",
    "title": "Property DisplayName",
    "keywords": "Property DisplayName DisplayName Declaration public string DisplayName { get; } Property Value Type Description System.String"
  },
  "api/FrameworkSystems.FSDisplayNameAttribute.Order.html": {
    "href": "api/FrameworkSystems.FSDisplayNameAttribute.Order.html",
    "title": "Property Order",
    "keywords": "Property Order Order Declaration public int Order { get; } Property Value Type Description System.Int32"
  },
  "api/FrameworkSystems.FSDisplayNameAttribute.GetFromEnum.html": {
    "href": "api/FrameworkSystems.FSDisplayNameAttribute.GetFromEnum.html",
    "title": "Method GetFromEnum",
    "keywords": "Method GetFromEnum GetFromEnum(Enum) Liefert den DisplayName eines Enum-Members. Wenn das Attribut nicht definiert ist, dann wird der Name des Enums zurückgegeben. Declaration public static string GetFromEnum(Enum enumValue) Parameters Type Name Description System.Enum enumValue Returns Type Description System.String GetFromEnum<TEnum>(TEnum) Liefert den DisplayName eines Enum-Members. Wenn das Attribut nicht definiert ist, dann wird der Name des Enums zurückgegeben. Declaration public static string GetFromEnum<TEnum>(TEnum enumValue) where TEnum : struct, IConvertible Parameters Type Name Description TEnum enumValue Returns Type Description System.String Type Parameters Name Description TEnum"
  },
  "api/FrameworkSystems.FSDisplayNameAttribute.GetOrderFromEnum.html": {
    "href": "api/FrameworkSystems.FSDisplayNameAttribute.GetOrderFromEnum.html",
    "title": "Method GetOrderFromEnum",
    "keywords": "Method GetOrderFromEnum GetOrderFromEnum(Enum) Liefert die Order eines Enum-Members. Wann das Attribut oder die Order nicht angegeben sind, dann wird 0 zurückgegeben. Declaration public static int GetOrderFromEnum(Enum enumValue) Parameters Type Name Description System.Enum enumValue Returns Type Description System.Int32 GetOrderFromEnum<TEnum>(TEnum) Liefert die Order eines Enum-Members. Wann das Attribut oder die Order nicht angegeben sind, dann wird 0 zurückgegeben. Declaration public static int GetOrderFromEnum<TEnum>(TEnum enumValue) where TEnum : struct, IConvertible Parameters Type Name Description TEnum enumValue Returns Type Description System.Int32 Type Parameters Name Description TEnum"
  },
  "api/FrameworkSystems.FSDisplayNameAttribute.html": {
    "href": "api/FrameworkSystems.FSDisplayNameAttribute.html",
    "title": "Class FSDisplayNameAttribute",
    "keywords": "Class FSDisplayNameAttribute Dieses Attribute kann in Enum-Werten verwendet werden, um einen DisplayName anzugeben. Dieser kann mit der statischen Methode GetFromEnum(Enum) ermittelt werden. Inheritance System.Object System.Attribute FSDisplayNameAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : FrameworkSystems Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public class FSDisplayNameAttribute : Attribute, _Attribute Constructors Name Description FSDisplayNameAttribute(String, Int32) Properties Name Description DisplayName Order Methods Name Description GetFromEnum(Enum) Liefert den DisplayName eines Enum-Members. Wenn das Attribut nicht definiert ist, dann wird der Name des Enums zurückgegeben. GetFromEnum<TEnum>(TEnum) Liefert den DisplayName eines Enum-Members. Wenn das Attribut nicht definiert ist, dann wird der Name des Enums zurückgegeben. GetOrderFromEnum(Enum) Liefert die Order eines Enum-Members. Wann das Attribut oder die Order nicht angegeben sind, dann wird 0 zurückgegeben. GetOrderFromEnum<TEnum>(TEnum) Liefert die Order eines Enum-Members. Wann das Attribut oder die Order nicht angegeben sind, dann wird 0 zurückgegeben."
  },
  "api/FrameworkSystems.UacUtils.IsUacEnabled.html": {
    "href": "api/FrameworkSystems.UacUtils.IsUacEnabled.html",
    "title": "Property IsUacEnabled",
    "keywords": "Property IsUacEnabled IsUacEnabled Declaration public static bool IsUacEnabled { get; } Property Value Type Description System.Boolean"
  },
  "api/FrameworkSystems.UacUtils.AddShield.html": {
    "href": "api/FrameworkSystems.UacUtils.AddShield.html",
    "title": "Method AddShield",
    "keywords": "Method AddShield AddShield(Button) Add the UAC shield to the Button, if the current process is not running with admin privileges. Declaration public static void AddShield(Button button) Parameters Type Name Description System.Windows.Forms.Button button Exceptions Type Condition System.ArgumentNullException es wurde kein Button übergeben AddShield(ToolStripMenuItem) Add the UAC shield to the MenuItem, if the current process is not running with admin privileges. Declaration public static void AddShield(ToolStripMenuItem menuItem) Parameters Type Name Description System.Windows.Forms.ToolStripMenuItem menuItem Exceptions Type Condition System.ArgumentNullException es wurde kein Button übergeben"
  },
  "api/FrameworkSystems.UacUtils.IsAdmin.html": {
    "href": "api/FrameworkSystems.UacUtils.IsAdmin.html",
    "title": "Property IsAdmin",
    "keywords": "Property IsAdmin IsAdmin Returns, if the current process is running with admin privileges. Declaration public static bool IsAdmin { get; } Property Value Type Description System.Boolean"
  },
  "api/FrameworkSystems.UacUtils.TryStartElevated.html": {
    "href": "api/FrameworkSystems.UacUtils.TryStartElevated.html",
    "title": "Method TryStartElevated",
    "keywords": "Method TryStartElevated TryStartElevated(ProcessStartInfo, out Process) Try to start the process with elevated privileges. All exception from Process.Start() are thrown except ERROR_CANCELLED. If the user cancels the operation, the return value is false. Declaration public static bool TryStartElevated(ProcessStartInfo startInfo, out Process process) Parameters Type Name Description System.Diagnostics.ProcessStartInfo startInfo System.Diagnostics.Process process Returns Type Description System.Boolean true, if the user allowes it. Exceptions Type Condition System.ArgumentNullException startInfo is not specified System.ComponentModel.Win32Exception thrown in another error than ERROR_CANCELLED. (see Process.Start()) System.IO.FileNotFoundException (see Process.Start()) System.InvalidOperationException In startInfo a verb is already specified. (see also Process.Start())"
  },
  "api/FrameworkSystems.UacUtils.RestartConsoleAndWait.html": {
    "href": "api/FrameworkSystems.UacUtils.RestartConsoleAndWait.html",
    "title": "Method RestartConsoleAndWait",
    "keywords": "Method RestartConsoleAndWait RestartConsoleAndWait(out Int32) Declaration public static bool RestartConsoleAndWait(out int exitCode) Parameters Type Name Description System.Int32 exitCode Returns Type Description System.Boolean"
  },
  "api/FrameworkSystems.UacUtils.TryMakeHttpEndpointPublic.html": {
    "href": "api/FrameworkSystems.UacUtils.TryMakeHttpEndpointPublic.html",
    "title": "Method TryMakeHttpEndpointPublic",
    "keywords": "Method TryMakeHttpEndpointPublic TryMakeHttpEndpointPublic(String) Declaration public static string TryMakeHttpEndpointPublic(string url) Parameters Type Name Description System.String url Returns Type Description System.String TryMakeHttpEndpointPublic(String, out UacUtils.UrlAccess) Declaration public static string TryMakeHttpEndpointPublic(string url, out UacUtils.UrlAccess access) Parameters Type Name Description System.String url UacUtils.UrlAccess access Returns Type Description System.String"
  },
  "api/FrameworkSystems.UacUtils.CheckPublicEndpointAccess.html": {
    "href": "api/FrameworkSystems.UacUtils.CheckPublicEndpointAccess.html",
    "title": "Method CheckPublicEndpointAccess",
    "keywords": "Method CheckPublicEndpointAccess CheckPublicEndpointAccess(String) Declaration public static bool CheckPublicEndpointAccess(string endointUrl) Parameters Type Name Description System.String endointUrl Returns Type Description System.Boolean"
  },
  "api/FrameworkSystems.UacUtils.html": {
    "href": "api/FrameworkSystems.UacUtils.html",
    "title": "Class UacUtils",
    "keywords": "Class UacUtils Inheritance System.Object UacUtils Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : FrameworkSystems Assembly : FrameworkSystems.FrameworkExceptions.dll Syntax public static class UacUtils Properties Name Description IsAdmin Returns, if the current process is running with admin privileges. IsUacEnabled Methods Name Description AddShield(Button) Add the UAC shield to the Button, if the current process is not running with admin privileges. AddShield(ToolStripMenuItem) Add the UAC shield to the MenuItem, if the current process is not running with admin privileges. CheckPublicEndpointAccess(String) RestartConsoleAndWait(out Int32) TryMakeHttpEndpointPublic(String) TryMakeHttpEndpointPublic(String, out UacUtils.UrlAccess) TryStartElevated(ProcessStartInfo, out Process) Try to start the process with elevated privileges. All exception from Process.Start() are thrown except ERROR_CANCELLED. If the user cancels the operation, the return value is false."
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLoggerListenerBase.-ctor.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLoggerListenerBase.-ctor.html",
    "title": "Constructor FSLoggerListenerBase",
    "keywords": "Constructor FSLoggerListenerBase FSLoggerListenerBase() Declaration public FSLoggerListenerBase()"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLoggerListenerBase.logger_OnWrite.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLoggerListenerBase.logger_OnWrite.html",
    "title": "Method logger_OnWrite",
    "keywords": "Method logger_OnWrite logger_OnWrite(Object, FSLoggerEventArgs) Declaration protected abstract void logger_OnWrite(object sender, FSLoggerEventArgs e) Parameters Type Name Description System.Object sender FSLoggerEventArgs e"
  },
  "api/FrameworkSystems.FrameworkExceptions.FSLoggerListenerBase.OnDispose.html": {
    "href": "api/FrameworkSystems.FrameworkExceptions.FSLoggerListenerBase.OnDispose.html",
    "title": "Method OnDispose",
    "keywords": "Method OnDispose OnDispose() Declaration protected virtual void OnDispose()"
  }
}